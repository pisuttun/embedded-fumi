
Project_MicTest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b24  08006b24  00020474  2**0
                  CONTENTS
  4 .ARM          00000008  08006b24  08006b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b2c  08006b2c  00020474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  20000000  08006b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000474  08006fa8  00020474  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc0  08006fa8  00020bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0c7  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6a  00000000  00000000  0002e56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  000304d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00031020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aa2  00000000  00000000  00031ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd21  00000000  00000000  0004856a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d35  00000000  00000000  0005828b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  000e9fc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f8  00000000  00000000  000ea094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000474 	.word	0x20000474
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a4c 	.word	0x08006a4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000478 	.word	0x20000478
 80001dc:	08006a4c 	.word	0x08006a4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <FifoWrite>:
uint8_t fifo_w_ptr = 0;
uint8_t fifo_r_ptr = 0;
uint8_t fifo_read_enabled = 0;
char out[10];
uint8_t startRead=0;
void FifoWrite(uint16_t data) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
		if(startRead==1){
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <FifoWrite+0x54>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d104      	bne.n	80005a4 <FifoWrite+0x1c>
			sprintf(out,"-    ");
 800059a:	4911      	ldr	r1, [pc, #68]	; (80005e0 <FifoWrite+0x58>)
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <FifoWrite+0x5c>)
 800059e:	f005 f9bd 	bl	800591c <siprintf>
 80005a2:	e005      	b.n	80005b0 <FifoWrite+0x28>
		}else{
			sprintf(out,"%4d ",data);
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	461a      	mov	r2, r3
 80005a8:	490f      	ldr	r1, [pc, #60]	; (80005e8 <FifoWrite+0x60>)
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <FifoWrite+0x5c>)
 80005ac:	f005 f9b6 	bl	800591c <siprintf>
		}

		 HAL_UART_Transmit(&huart2,out,strlen(out),300);
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <FifoWrite+0x5c>)
 80005b2:	f7ff fe15 	bl	80001e0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80005be:	4909      	ldr	r1, [pc, #36]	; (80005e4 <FifoWrite+0x5c>)
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <FifoWrite+0x64>)
 80005c2:	f002 ff7c 	bl	80034be <HAL_UART_Transmit>
		 HAL_I2C_Slave_Transmit(&hi2c1, out, sizeof(out),300);
 80005c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80005ca:	220a      	movs	r2, #10
 80005cc:	4905      	ldr	r1, [pc, #20]	; (80005e4 <FifoWrite+0x5c>)
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <FifoWrite+0x68>)
 80005d0:	f002 f8d6 	bl	8002780 <HAL_I2C_Slave_Transmit>

}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000494 	.word	0x20000494
 80005e0:	08006a64 	.word	0x08006a64
 80005e4:	20000560 	.word	0x20000560
 80005e8:	08006a6c 	.word	0x08006a6c
 80005ec:	20000914 	.word	0x20000914
 80005f0:	20000504 	.word	0x20000504

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fcc2 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f818 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f97e 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f91c 	bl	8000840 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000608:	f000 f944 	bl	8000894 <MX_DMA_Init>
  MX_ADC1_Init();
 800060c:	f000 f87c 	bl	8000708 <MX_ADC1_Init>
  MX_CRC_Init();
 8000610:	f000 f8cc 	bl	80007ac <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000614:	f003 fa1c 	bl	8003a50 <MX_PDM2PCM_Init>
  MX_I2C1_Init();
 8000618:	f000 f8e4 	bl	80007e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)pdmRxBuf, 128);
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	4902      	ldr	r1, [pc, #8]	; (8000628 <main+0x34>)
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <main+0x38>)
 8000622:	f000 fd63 	bl	80010ec <HAL_ADC_Start_DMA>
  	      	HAL_UART_Transmit(&huart2,out,strlen(out),100);*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0x32>
 8000628:	20000814 	.word	0x20000814
 800062c:	2000066c 	.word	0x2000066c

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 f964 	bl	800590c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a28      	ldr	r2, [pc, #160]	; (8000700 <SystemClock_Config+0xd0>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd4>)
 800067e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006a8:	233c      	movs	r3, #60	; 0x3c
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fa3f 	bl	8002b3c <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c4:	f000 fa1a 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80006da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fca0 	bl	800302c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f2:	f000 fa03 	bl	8000afc <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC1_Init+0x98>)
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000734:	2201      	movs	r2, #1
 8000736:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_ADC1_Init+0xa0>)
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000754:	2201      	movs	r2, #1
 8000756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ADC1_Init+0x98>)
 800075a:	2201      	movs	r2, #1
 800075c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000762:	2201      	movs	r2, #1
 8000764:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000768:	f000 fc7c 	bl	8001064 <HAL_ADC_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f9c3 	bl	8000afc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000776:	2307      	movs	r3, #7
 8000778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800077e:	2307      	movs	r3, #7
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000788:	f000 fdaa 	bl	80012e0 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000792:	f000 f9b3 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000066c 	.word	0x2000066c
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_CRC_Init+0x30>)
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <MX_CRC_Init+0x34>)
 80007b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_CRC_Init+0x30>)
 80007b8:	f001 f943 	bl	8001a42 <HAL_CRC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007c2:	f000 f99b 	bl	8000afc <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <MX_CRC_Init+0x30>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <MX_CRC_Init+0x30>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f042 0201 	orr.w	r2, r2, #1
 80007d4:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000558 	.word	0x20000558
 80007e0:	40023000 	.word	0x40023000

080007e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C1_Init+0x50>)
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_I2C1_Init+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_I2C1_Init+0x50>)
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_I2C1_Init+0x58>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_I2C1_Init+0x50>)
 8000802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_I2C1_Init+0x50>)
 8000822:	f001 fe69 	bl	80024f8 <HAL_I2C_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 f966 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000504 	.word	0x20000504
 8000838:	40005400 	.word	0x40005400
 800083c:	000186a0 	.word	0x000186a0

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART2_UART_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_USART2_UART_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_USART2_UART_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART2_UART_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART2_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x4c>)
 8000878:	f002 fdd4 	bl	8003424 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000882:	f000 f93b 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000914 	.word	0x20000914
 8000890:	40004400 	.word	0x40004400

08000894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_DMA_Init+0x68>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <MX_DMA_Init+0x68>)
 80008a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_DMA_Init+0x68>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_DMA_Init+0x68>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_DMA_Init+0x68>)
 80008c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_DMA_Init+0x68>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2011      	movs	r0, #17
 80008d8:	f001 f87d 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008dc:	2011      	movs	r0, #17
 80008de:	f001 f896 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2038      	movs	r0, #56	; 0x38
 80008e8:	f001 f875 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008ec:	2038      	movs	r0, #56	; 0x38
 80008ee:	f001 f88e 	bl	8001a0e <HAL_NVIC_EnableIRQ>

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <MX_GPIO_Init+0xfc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a37      	ldr	r2, [pc, #220]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a30      	ldr	r2, [pc, #192]	; (80009fc <MX_GPIO_Init+0xfc>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a29      	ldr	r2, [pc, #164]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a22      	ldr	r2, [pc, #136]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_GPIO_Init+0xfc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	481d      	ldr	r0, [pc, #116]	; (8000a00 <MX_GPIO_Init+0x100>)
 800098c:	f001 fd82 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000996:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4817      	ldr	r0, [pc, #92]	; (8000a04 <MX_GPIO_Init+0x104>)
 80009a8:	f001 fbd8 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ac:	2320      	movs	r3, #32
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	480f      	ldr	r0, [pc, #60]	; (8000a00 <MX_GPIO_Init+0x100>)
 80009c4:	f001 fbca 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <MX_GPIO_Init+0x100>)
 80009de:	f001 fbbd 	bl	800215c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2028      	movs	r0, #40	; 0x28
 80009e8:	f000 fff5 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ec:	2028      	movs	r0, #40	; 0x28
 80009ee:	f001 f80e 	bl	8001a0e <HAL_NVIC_EnableIRQ>

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020800 	.word	0x40020800

08000a08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	start= (start+1)%2;
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x34>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	bfb8      	it	lt
 8000a20:	425b      	neglt	r3, r3
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x34>)
 8000a26:	701a      	strb	r2, [r3, #0]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a28:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	6153      	str	r3, [r2, #20]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000493 	.word	0x20000493
 8000a40:	40013c00 	.word	0x40013c00

08000a44 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
		startRead = HAL_GPIO_ReadPin(GPIOA, 1<<12);
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <HAL_ADC_ConvCpltCallback+0x50>)
 8000a52:	f001 fd07 	bl	8002464 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_ADC_ConvCpltCallback+0x54>)
 8000a5c:	701a      	strb	r2, [r3, #0]
		rxstate = 2;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_ADC_ConvCpltCallback+0x58>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	701a      	strb	r2, [r3, #0]
		txstate = 2;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	701a      	strb	r2, [r3, #0]
		for (int i=64; i<128;i++) {
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e009      	b.n	8000a84 <HAL_ADC_ConvCpltCallback+0x40>
			FifoWrite(pdmRxBuf[i]);
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <HAL_ADC_ConvCpltCallback+0x60>)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd85 	bl	8000588 <FifoWrite>
		for (int i=64; i<128;i++) {
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b7f      	cmp	r3, #127	; 0x7f
 8000a88:	ddf2      	ble.n	8000a70 <HAL_ADC_ConvCpltCallback+0x2c>


	/*char out[10];
	sprintf(out,"Out\r\n");
	HAL_UART_Transmit(&huart2,out,strlen(out),100);*/
}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020000 	.word	0x40020000
 8000a98:	20000494 	.word	0x20000494
 8000a9c:	20000492 	.word	0x20000492
 8000aa0:	20000491 	.word	0x20000491
 8000aa4:	20000814 	.word	0x20000814

08000aa8 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if(startRead==1){
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d115      	bne.n	8000ae4 <HAL_ADC_ConvHalfCpltCallback+0x3c>
		rxstate = 1;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
		txstate = 1;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<64;i++) { FifoWrite(pdmRxBuf[i]); }
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e009      	b.n	8000ade <HAL_ADC_ConvHalfCpltCallback+0x36>
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd58 	bl	8000588 <FifoWrite>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3301      	adds	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ae2:	ddf2      	ble.n	8000aca <HAL_ADC_ConvHalfCpltCallback+0x22>
	}

	/*char out[10];
	sprintf(out,"\r\n");
	HAL_UART_Transmit(&huart2,out,strlen(out),100);*/
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000494 	.word	0x20000494
 8000af0:	20000492 	.word	0x20000492
 8000af4:	20000491 	.word	0x20000491
 8000af8:	20000814 	.word	0x20000814

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b46:	2007      	movs	r0, #7
 8000b48:	f000 ff3a 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <HAL_ADC_MspInit+0xdc>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d157      	bne.n	8000c2a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <HAL_ADC_MspInit+0xe0>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <HAL_ADC_MspInit+0xe0>)
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <HAL_ADC_MspInit+0xe0>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_ADC_MspInit+0xe0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <HAL_ADC_MspInit+0xe0>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <HAL_ADC_MspInit+0xe0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481d      	ldr	r0, [pc, #116]	; (8000c3c <HAL_ADC_MspInit+0xe4>)
 8000bc6:	f001 fac9 	bl	800215c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <HAL_ADC_MspInit+0xec>)
 8000bce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bf0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000c10:	f000 ff34 	bl	8001a7c <HAL_DMA_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c1a:	f7ff ff6f 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_ADC_MspInit+0xe8>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40012000 	.word	0x40012000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	200007b4 	.word	0x200007b4
 8000c44:	40026410 	.word	0x40026410

08000c48 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <HAL_CRC_MspInit+0x3c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10d      	bne.n	8000c76 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_CRC_MspInit+0x40>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_CRC_MspInit+0x40>)
 8000c64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_CRC_MspInit+0x40>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023000 	.word	0x40023000
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <HAL_I2C_MspInit+0xe0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d15a      	bne.n	8000d64 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_I2C_MspInit+0xe4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <HAL_I2C_MspInit+0xe4>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <HAL_I2C_MspInit+0xe4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd0:	2312      	movs	r3, #18
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4823      	ldr	r0, [pc, #140]	; (8000d74 <HAL_I2C_MspInit+0xe8>)
 8000ce8:	f001 fa38 	bl	800215c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <HAL_I2C_MspInit+0xe4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <HAL_I2C_MspInit+0xe4>)
 8000cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_I2C_MspInit+0xe4>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <HAL_I2C_MspInit+0xf0>)
 8000d0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d14:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d18:	2240      	movs	r2, #64	; 0x40
 8000d1a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d28:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d4a:	f000 fe97 	bl	8001a7c <HAL_DMA_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000d54:	f7ff fed2 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d5e:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_I2C_MspInit+0xec>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400
 8000d78:	200004a4 	.word	0x200004a4
 8000d7c:	400260a0 	.word	0x400260a0

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12b      	bne.n	8000dfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dea:	2307      	movs	r3, #7
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_UART_MspInit+0x8c>)
 8000df6:	f001 f9b1 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f8e2 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <DMA1_Stream6_IRQHandler+0x10>)
 8000e6a:	f000 ff0d 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200004a4 	.word	0x200004a4

08000e78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e80:	f001 fb22 	bl	80024c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <DMA2_Stream0_IRQHandler+0x10>)
 8000e8e:	f000 fefb 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200007b4 	.word	0x200007b4

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f004 fcf4 	bl	80058b8 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20018000 	.word	0x20018000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000498 	.word	0x20000498
 8000f04:	20000bc0 	.word	0x20000bc0

08000f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f48:	4c0b      	ldr	r4, [pc, #44]	; (8000f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f56:	f7ff ffd7 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f004 fcb3 	bl	80058c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fb49 	bl	80005f4 <main>
  bx  lr    
 8000f62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	20000474 	.word	0x20000474
  ldr r2, =_sidata
 8000f70:	08006b34 	.word	0x08006b34
  ldr r2, =_sbss
 8000f74:	20000474 	.word	0x20000474
  ldr r4, =_ebss
 8000f78:	20000bc0 	.word	0x20000bc0

08000f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fd09 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fda8 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fd21 	bl	8001a2a <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 fce9 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000400 	.word	0x20000400
 800101c:	20000408 	.word	0x20000408
 8001020:	20000404 	.word	0x20000404

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000408 	.word	0x20000408
 8001048:	20000b58 	.word	0x20000b58

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000b58 	.word	0x20000b58

08001064 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e033      	b.n	80010e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2b00      	cmp	r3, #0
 8001080:	d109      	bne.n	8001096 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fd68 	bl	8000b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d118      	bne.n	80010d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010aa:	f023 0302 	bic.w	r3, r3, #2
 80010ae:	f043 0202 	orr.w	r2, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 fa34 	bl	8001524 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f023 0303 	bic.w	r3, r3, #3
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
 80010d2:	e001      	b.n	80010d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_ADC_Start_DMA+0x1e>
 8001106:	2302      	movs	r3, #2
 8001108:	e0ce      	b.n	80012a8 <HAL_ADC_Start_DMA+0x1bc>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b01      	cmp	r3, #1
 800111e:	d018      	beq.n	8001152 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001130:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <HAL_ADC_Start_DMA+0x1c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a5f      	ldr	r2, [pc, #380]	; (80012b4 <HAL_ADC_Start_DMA+0x1c8>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9a      	lsrs	r2, r3, #18
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001144:	e002      	b.n	800114c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	3b01      	subs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f9      	bne.n	8001146 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001160:	d107      	bne.n	8001172 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001170:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b01      	cmp	r3, #1
 800117e:	f040 8086 	bne.w	800128e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d007      	beq.n	80011b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011c0:	d106      	bne.n	80011d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f023 0206 	bic.w	r2, r3, #6
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
 80011ce:	e002      	b.n	80011d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011de:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <HAL_ADC_Start_DMA+0x1cc>)
 80011e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	4a35      	ldr	r2, [pc, #212]	; (80012bc <HAL_ADC_Start_DMA+0x1d0>)
 80011e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ee:	4a34      	ldr	r2, [pc, #208]	; (80012c0 <HAL_ADC_Start_DMA+0x1d4>)
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f6:	4a33      	ldr	r2, [pc, #204]	; (80012c4 <HAL_ADC_Start_DMA+0x1d8>)
 80011f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001202:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001212:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001222:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	334c      	adds	r3, #76	; 0x4c
 800122e:	4619      	mov	r1, r3
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f000 fcd0 	bl	8001bd8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10f      	bne.n	8001264 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d129      	bne.n	80012a6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	e020      	b.n	80012a6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <HAL_ADC_Start_DMA+0x1dc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d11b      	bne.n	80012a6 <HAL_ADC_Start_DMA+0x1ba>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d114      	bne.n	80012a6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e00b      	b.n	80012a6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0210 	orr.w	r2, r3, #16
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000400 	.word	0x20000400
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	40012300 	.word	0x40012300
 80012bc:	0800171d 	.word	0x0800171d
 80012c0:	080017d7 	.word	0x080017d7
 80012c4:	080017f3 	.word	0x080017f3
 80012c8:	40012000 	.word	0x40012000

080012cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1c>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e105      	b.n	8001508 <HAL_ADC_ConfigChannel+0x228>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b09      	cmp	r3, #9
 800130a:	d925      	bls.n	8001358 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d9      	ldr	r1, [r3, #12]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	3b1e      	subs	r3, #30
 8001322:	2207      	movs	r2, #7
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43da      	mvns	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	400a      	ands	r2, r1
 8001330:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68d9      	ldr	r1, [r3, #12]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	4603      	mov	r3, r0
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4403      	add	r3, r0
 800134a:	3b1e      	subs	r3, #30
 800134c:	409a      	lsls	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	e022      	b.n	800139e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6919      	ldr	r1, [r3, #16]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	2207      	movs	r2, #7
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	400a      	ands	r2, r1
 800137a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6919      	ldr	r1, [r3, #16]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4403      	add	r3, r0
 8001394:	409a      	lsls	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d824      	bhi.n	80013f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b05      	subs	r3, #5
 80013b8:	221f      	movs	r2, #31
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	400a      	ands	r2, r1
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	3b05      	subs	r3, #5
 80013e2:	fa00 f203 	lsl.w	r2, r0, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
 80013ee:	e04c      	b.n	800148a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	d824      	bhi.n	8001442 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b23      	subs	r3, #35	; 0x23
 800140a:	221f      	movs	r2, #31
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43da      	mvns	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	400a      	ands	r2, r1
 8001418:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	3b23      	subs	r3, #35	; 0x23
 8001434:	fa00 f203 	lsl.w	r2, r0, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
 8001440:	e023      	b.n	800148a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b41      	subs	r3, #65	; 0x41
 8001454:	221f      	movs	r2, #31
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	400a      	ands	r2, r1
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	3b41      	subs	r3, #65	; 0x41
 800147e:	fa00 f203 	lsl.w	r2, r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_ADC_ConfigChannel+0x234>)
 800148c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a21      	ldr	r2, [pc, #132]	; (8001518 <HAL_ADC_ConfigChannel+0x238>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d109      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1cc>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b12      	cmp	r3, #18
 800149e:	d105      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_ADC_ConfigChannel+0x238>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d123      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x21e>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b10      	cmp	r3, #16
 80014bc:	d003      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x1e6>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b11      	cmp	r3, #17
 80014c4:	d11b      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d111      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_ADC_ConfigChannel+0x23c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_ADC_ConfigChannel+0x240>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9a      	lsrs	r2, r3, #18
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40012300 	.word	0x40012300
 8001518:	40012000 	.word	0x40012000
 800151c:	20000400 	.word	0x20000400
 8001520:	431bde83 	.word	0x431bde83

08001524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800152c:	4b79      	ldr	r3, [pc, #484]	; (8001714 <ADC_Init+0x1f0>)
 800152e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	431a      	orrs	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	021a      	lsls	r2, r3, #8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800157c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	4a58      	ldr	r2, [pc, #352]	; (8001718 <ADC_Init+0x1f4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6899      	ldr	r1, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e00f      	b.n	8001622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001620:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0202 	bic.w	r2, r2, #2
 8001630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6899      	ldr	r1, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7e1b      	ldrb	r3, [r3, #24]
 800163c:	005a      	lsls	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01b      	beq.n	8001688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800165e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800166e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	3b01      	subs	r3, #1
 800167c:	035a      	lsls	r2, r3, #13
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	e007      	b.n	8001698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001696:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	051a      	lsls	r2, r3, #20
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6899      	ldr	r1, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016da:	025a      	lsls	r2, r3, #9
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6899      	ldr	r1, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	029a      	lsls	r2, r3, #10
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	609a      	str	r2, [r3, #8]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40012300 	.word	0x40012300
 8001718:	0f000001 	.word	0x0f000001

0800171c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001728:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001732:	2b00      	cmp	r3, #0
 8001734:	d13c      	bne.n	80017b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d12b      	bne.n	80017a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001754:	2b00      	cmp	r3, #0
 8001756:	d127      	bne.n	80017a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001770:	2b00      	cmp	r3, #0
 8001772:	d119      	bne.n	80017a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0220 	bic.w	r2, r2, #32
 8001782:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7ff f94b 	bl	8000a44 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017ae:	e00e      	b.n	80017ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff fd85 	bl	80012cc <HAL_ADC_ErrorCallback>
}
 80017c2:	e004      	b.n	80017ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff f95f 	bl	8000aa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f043 0204 	orr.w	r2, r3, #4
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff fd5a 	bl	80012cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff3e 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff31 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e00e      	b.n	8001a72 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	795b      	ldrb	r3, [r3, #5]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff f8ef 	bl	8000c48 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff fae0 	bl	800104c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e099      	b.n	8001bcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab8:	e00f      	b.n	8001ada <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aba:	f7ff fac7 	bl	800104c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d908      	bls.n	8001ada <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e078      	b.n	8001bcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e8      	bne.n	8001aba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_DMA_Init+0x158>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d107      	bne.n	8001b44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f023 0307 	bic.w	r3, r3, #7
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d117      	bne.n	8001b9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fa6f 	bl	8002064 <DMA_CheckFifoParam>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e016      	b.n	8001bcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fa26 	bl	8001ff8 <DMA_CalcBaseAndBitshift>
 8001bac:	4603      	mov	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	f010803f 	.word	0xf010803f

08001bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_DMA_Start_IT+0x26>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e040      	b.n	8001c80 <HAL_DMA_Start_IT+0xa8>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d12f      	bne.n	8001c72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f9b8 	bl	8001f9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	223f      	movs	r2, #63	; 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0216 	orr.w	r2, r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0208 	orr.w	r2, r2, #8
 8001c5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e005      	b.n	8001c7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_DMA_IRQHandler+0x258>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a92      	ldr	r2, [pc, #584]	; (8001ee4 <HAL_DMA_IRQHandler+0x25c>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0204 	bic.w	r2, r2, #4
 8001cda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d012      	beq.n	8001d2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2201      	movs	r2, #1
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	2204      	movs	r2, #4
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d012      	beq.n	8001d60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00b      	beq.n	8001d60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f043 0204 	orr.w	r2, r3, #4
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2210      	movs	r2, #16
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d043      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d03c      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2210      	movs	r2, #16
 8001d84:	409a      	lsls	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d018      	beq.n	8001dca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d108      	bne.n	8001db8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d024      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	4798      	blx	r3
 8001db6:	e01f      	b.n	8001df8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	4798      	blx	r3
 8001dc8:	e016      	b.n	8001df8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d107      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0208 	bic.w	r2, r2, #8
 8001de6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 808e 	beq.w	8001f26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8086 	beq.w	8001f26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2220      	movs	r2, #32
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d136      	bne.n	8001ea0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0216 	bic.w	r2, r2, #22
 8001e40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <HAL_DMA_IRQHandler+0x1da>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0208 	bic.w	r2, r2, #8
 8001e70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	223f      	movs	r2, #63	; 0x3f
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d07d      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
        }
        return;
 8001e9e:	e078      	b.n	8001f92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01c      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d108      	bne.n	8001ece <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d030      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
 8001ecc:	e02b      	b.n	8001f26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d027      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
 8001ede:	e022      	b.n	8001f26 <HAL_DMA_IRQHandler+0x29e>
 8001ee0:	20000400 	.word	0x20000400
 8001ee4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0210 	bic.w	r2, r2, #16
 8001f04:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d032      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d022      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3301      	adds	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d307      	bcc.n	8001f6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f2      	bne.n	8001f52 <HAL_DMA_IRQHandler+0x2ca>
 8001f6c:	e000      	b.n	8001f70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f6e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	e000      	b.n	8001f94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f92:	bf00      	nop
    }
  }
}
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop

08001f9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b40      	cmp	r3, #64	; 0x40
 8001fc8:	d108      	bne.n	8001fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fda:	e007      	b.n	8001fec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3b10      	subs	r3, #16
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <DMA_CalcBaseAndBitshift+0x64>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <DMA_CalcBaseAndBitshift+0x68>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d909      	bls.n	800203a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	1d1a      	adds	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	659a      	str	r2, [r3, #88]	; 0x58
 8002038:	e007      	b.n	800204a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	aaaaaaab 	.word	0xaaaaaaab
 8002060:	08006ac8 	.word	0x08006ac8

08002064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11f      	bne.n	80020be <DMA_CheckFifoParam+0x5a>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d856      	bhi.n	8002132 <DMA_CheckFifoParam+0xce>
 8002084:	a201      	add	r2, pc, #4	; (adr r2, 800208c <DMA_CheckFifoParam+0x28>)
 8002086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208a:	bf00      	nop
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080020af 	.word	0x080020af
 8002094:	0800209d 	.word	0x0800209d
 8002098:	08002133 	.word	0x08002133
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d046      	beq.n	8002136 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ac:	e043      	b.n	8002136 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020b6:	d140      	bne.n	800213a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020bc:	e03d      	b.n	800213a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c6:	d121      	bne.n	800210c <DMA_CheckFifoParam+0xa8>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d837      	bhi.n	800213e <DMA_CheckFifoParam+0xda>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <DMA_CheckFifoParam+0x70>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020eb 	.word	0x080020eb
 80020dc:	080020e5 	.word	0x080020e5
 80020e0:	080020fd 	.word	0x080020fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      break;
 80020e8:	e030      	b.n	800214c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d025      	beq.n	8002142 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fa:	e022      	b.n	8002142 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002104:	d11f      	bne.n	8002146 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800210a:	e01c      	b.n	8002146 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d903      	bls.n	800211a <DMA_CheckFifoParam+0xb6>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d003      	beq.n	8002120 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002118:	e018      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
      break;
 800211e:	e015      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      break;
 8002130:	e00b      	b.n	800214a <DMA_CheckFifoParam+0xe6>
      break;
 8002132:	bf00      	nop
 8002134:	e00a      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e008      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
 800213c:	e006      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
 8002140:	e004      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 8002142:	bf00      	nop
 8002144:	e002      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;   
 8002146:	bf00      	nop
 8002148:	e000      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
    }
  } 
  
  return status; 
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e159      	b.n	800242c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8148 	bne.w	8002426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d005      	beq.n	80021ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d130      	bne.n	8002210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 0201 	and.w	r2, r3, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d017      	beq.n	800224c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a2 	beq.w	8002426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b57      	ldr	r3, [pc, #348]	; (8002444 <HAL_GPIO_Init+0x2e8>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a56      	ldr	r2, [pc, #344]	; (8002444 <HAL_GPIO_Init+0x2e8>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b54      	ldr	r3, [pc, #336]	; (8002444 <HAL_GPIO_Init+0x2e8>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_GPIO_Init+0x2ec>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a49      	ldr	r2, [pc, #292]	; (800244c <HAL_GPIO_Init+0x2f0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d019      	beq.n	800235e <HAL_GPIO_Init+0x202>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a48      	ldr	r2, [pc, #288]	; (8002450 <HAL_GPIO_Init+0x2f4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_GPIO_Init+0x1fe>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a47      	ldr	r2, [pc, #284]	; (8002454 <HAL_GPIO_Init+0x2f8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00d      	beq.n	8002356 <HAL_GPIO_Init+0x1fa>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a46      	ldr	r2, [pc, #280]	; (8002458 <HAL_GPIO_Init+0x2fc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0x1f6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a45      	ldr	r2, [pc, #276]	; (800245c <HAL_GPIO_Init+0x300>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_GPIO_Init+0x1f2>
 800234a:	2304      	movs	r3, #4
 800234c:	e008      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800234e:	2307      	movs	r3, #7
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x204>
 8002352:	2303      	movs	r3, #3
 8002354:	e004      	b.n	8002360 <HAL_GPIO_Init+0x204>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800235e:	2300      	movs	r3, #0
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f002 0203 	and.w	r2, r2, #3
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	4093      	lsls	r3, r2
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002370:	4935      	ldr	r1, [pc, #212]	; (8002448 <HAL_GPIO_Init+0x2ec>)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237e:	4b38      	ldr	r3, [pc, #224]	; (8002460 <HAL_GPIO_Init+0x304>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a2:	4a2f      	ldr	r2, [pc, #188]	; (8002460 <HAL_GPIO_Init+0x304>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a8:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_GPIO_Init+0x304>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023cc:	4a24      	ldr	r2, [pc, #144]	; (8002460 <HAL_GPIO_Init+0x304>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <HAL_GPIO_Init+0x304>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f6:	4a1a      	ldr	r2, [pc, #104]	; (8002460 <HAL_GPIO_Init+0x304>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <HAL_GPIO_Init+0x304>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002420:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <HAL_GPIO_Init+0x304>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3301      	adds	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	f67f aea2 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40013800 	.word	0x40013800
 800244c:	40020000 	.word	0x40020000
 8002450:	40020400 	.word	0x40020400
 8002454:	40020800 	.word	0x40020800
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40021000 	.word	0x40021000
 8002460:	40013c00 	.word	0x40013c00

08002464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e001      	b.n	8002486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b0:	e003      	b.n	80024ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fa8e 	bl	8000a08 <HAL_GPIO_EXTI_Callback>
  }
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e12b      	b.n	8002762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fbb4 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800255c:	f000 ff3a 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8002560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a81      	ldr	r2, [pc, #516]	; (800276c <HAL_I2C_Init+0x274>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d807      	bhi.n	800257c <HAL_I2C_Init+0x84>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a80      	ldr	r2, [pc, #512]	; (8002770 <HAL_I2C_Init+0x278>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e006      	b.n	800258a <HAL_I2C_Init+0x92>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a7d      	ldr	r2, [pc, #500]	; (8002774 <HAL_I2C_Init+0x27c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0e7      	b.n	8002762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a78      	ldr	r2, [pc, #480]	; (8002778 <HAL_I2C_Init+0x280>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_I2C_Init+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d802      	bhi.n	80025cc <HAL_I2C_Init+0xd4>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	e009      	b.n	80025e0 <HAL_I2C_Init+0xe8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_I2C_Init+0x284>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	3301      	adds	r3, #1
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	495c      	ldr	r1, [pc, #368]	; (800276c <HAL_I2C_Init+0x274>)
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d819      	bhi.n	8002634 <HAL_I2C_Init+0x13c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e59      	subs	r1, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb1 f3f3 	udiv	r3, r1, r3
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002614:	400b      	ands	r3, r1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_I2C_Init+0x138>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e59      	subs	r1, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fbb1 f3f3 	udiv	r3, r1, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	e051      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002630:	2304      	movs	r3, #4
 8002632:	e04f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d111      	bne.n	8002660 <HAL_I2C_Init+0x168>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_I2C_Init+0x18e>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x196>
 800268a:	2301      	movs	r3, #1
 800268c:	e022      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <HAL_I2C_Init+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e58      	subs	r0, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	440b      	add	r3, r1
 80026a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6911      	ldr	r1, [r2, #16]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	000186a0 	.word	0x000186a0
 8002770:	001e847f 	.word	0x001e847f
 8002774:	003d08ff 	.word	0x003d08ff
 8002778:	431bde83 	.word	0x431bde83
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7fe fc5c 	bl	800104c <HAL_GetTick>
 8002794:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b20      	cmp	r3, #32
 80027a0:	f040 80fb 	bne.w	800299a <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_I2C_Slave_Transmit+0x30>
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0f3      	b.n	800299c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_I2C_Slave_Transmit+0x42>
 80027be:	2302      	movs	r3, #2
 80027c0:	e0ec      	b.n	800299c <HAL_I2C_Slave_Transmit+0x21c>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d007      	beq.n	80027e8 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f6:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2221      	movs	r2, #33	; 0x21
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	88fa      	ldrh	r2, [r7, #6]
 8002818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a5f      	ldr	r2, [pc, #380]	; (80029a4 <HAL_I2C_Slave_Transmit+0x224>)
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002838:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	4959      	ldr	r1, [pc, #356]	; (80029a8 <HAL_I2C_Slave_Transmit+0x228>)
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f8b1 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0a3      	b.n	800299c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002872:	d165      	bne.n	8002940 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	494a      	ldr	r1, [pc, #296]	; (80029a8 <HAL_I2C_Slave_Transmit+0x228>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f894 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e086      	b.n	800299c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028a4:	e04c      	b.n	8002940 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f8d5 	bl	8002a5a <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c4:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e068      	b.n	800299c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b04      	cmp	r3, #4
 8002906:	d11b      	bne.n	8002940 <HAL_I2C_Slave_Transmit+0x1c0>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d017      	beq.n	8002940 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ae      	bne.n	80028a6 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2200      	movs	r2, #0
 8002950:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f829 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e01b      	b.n	800299c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800296c:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800299a:	2302      	movs	r3, #2
  }
}
 800299c:	4618      	mov	r0, r3
 800299e:	3720      	adds	r7, #32
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	ffff0000 	.word	0xffff0000
 80029a8:	00010002 	.word	0x00010002

080029ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029bc:	e025      	b.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d021      	beq.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe fb41 	bl	800104c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d116      	bne.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e023      	b.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d10d      	bne.n	8002a30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf0c      	ite	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	2300      	movne	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	e00c      	b.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf0c      	ite	eq
 8002a42:	2301      	moveq	r3, #1
 8002a44:	2300      	movne	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d0b6      	beq.n	80029be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a66:	e02d      	b.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f837 	bl	8002adc <I2C_IsAcknowledgeFailed>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e02d      	b.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d021      	beq.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a80:	f7fe fae4 	bl	800104c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d302      	bcc.n	8002a96 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e007      	b.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d1ca      	bne.n	8002a68 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af2:	d11b      	bne.n	8002b2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002afc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f043 0204 	orr.w	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e264      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d075      	beq.n	8002c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5a:	4ba3      	ldr	r3, [pc, #652]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d112      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b72:	4b9d      	ldr	r3, [pc, #628]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7e:	d10b      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05b      	beq.n	8002c44 <HAL_RCC_OscConfig+0x108>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d157      	bne.n	8002c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e23f      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x74>
 8002ba2:	4b91      	ldr	r3, [pc, #580]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a90      	ldr	r2, [pc, #576]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b8b      	ldr	r3, [pc, #556]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a8a      	ldr	r2, [pc, #552]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a87      	ldr	r2, [pc, #540]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a83      	ldr	r2, [pc, #524]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa2a 	bl	800104c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fa26 	bl	800104c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e204      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xc0>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fa16 	bl	800104c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fa12 	bl	800104c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1f0      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0xe8>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1c4      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4952      	ldr	r1, [pc, #328]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e03a      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <HAL_RCC_OscConfig+0x2b0>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe f9cb 	bl	800104c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cba:	f7fe f9c7 	bl	800104c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1a5      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4940      	ldr	r1, [pc, #256]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_OscConfig+0x2b0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f9aa 	bl	800104c <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fe f9a6 	bl	800104c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e184      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d030      	beq.n	8002d88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCC_OscConfig+0x2b4>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe f98a 	bl	800104c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fe f986 	bl	800104c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e164      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x200>
 8002d5a:	e015      	b.n	8002d88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x2b4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe f973 	bl	800104c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6a:	f7fe f96f 	bl	800104c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e14d      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a0 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7fe f935 	bl	800104c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e011      	b.n	8002e0a <HAL_RCC_OscConfig+0x2ce>
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470000 	.word	0x42470000
 8002df0:	42470e80 	.word	0x42470e80
 8002df4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7fe f928 	bl	800104c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e106      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b85      	ldr	r3, [pc, #532]	; (8003020 <HAL_RCC_OscConfig+0x4e4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
 8002e1e:	4b81      	ldr	r3, [pc, #516]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a80      	ldr	r2, [pc, #512]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	e01c      	b.n	8002e66 <HAL_RCC_OscConfig+0x32a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x312>
 8002e34:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a7a      	ldr	r2, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a77      	ldr	r2, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCC_OscConfig+0x32a>
 8002e4e:	4b75      	ldr	r3, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a74      	ldr	r2, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a71      	ldr	r2, [pc, #452]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d015      	beq.n	8002e9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fe f8ed 	bl	800104c <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe f8e9 	bl	800104c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0c5      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCC_OscConfig+0x33a>
 8002e98:	e014      	b.n	8002ec4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe f8d7 	bl	800104c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe f8d3 	bl	800104c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0af      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a55      	ldr	r2, [pc, #340]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 809b 	beq.w	8003016 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d05c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d141      	bne.n	8002f78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fe f8a7 	bl	800104c <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe f8a3 	bl	800104c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e081      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	019b      	lsls	r3, r3, #6
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	4937      	ldr	r1, [pc, #220]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe f87c 	bl	800104c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe f878 	bl	800104c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e056      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x41c>
 8002f76:	e04e      	b.n	8003016 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe f865 	bl	800104c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe f861 	bl	800104c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e03f      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x44a>
 8002fa4:	e037      	b.n	8003016 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e032      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <HAL_RCC_OscConfig+0x4e8>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d028      	beq.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d121      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d11a      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d111      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d107      	bne.n	8003012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40007000 	.word	0x40007000
 8003024:	40023800 	.word	0x40023800
 8003028:	42470060 	.word	0x42470060

0800302c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0cc      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d90c      	bls.n	8003068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800308a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d044      	beq.n	800314c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d119      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e067      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4934      	ldr	r1, [pc, #208]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800311c:	f7fd ff96 	bl	800104c <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fd ff92 	bl	800104c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d20c      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fef6 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	08006ab0 	.word	0x08006ab0
 80031f0:	20000400 	.word	0x20000400
 80031f4:	20000404 	.word	0x20000404

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	2300      	movs	r3, #0
 800320a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003210:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d00d      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 800321c:	2b08      	cmp	r3, #8
 800321e:	f200 80bd 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d003      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3a>
 800322a:	e0b7      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800322e:	60bb      	str	r3, [r7, #8]
       break;
 8003230:	e0b7      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003234:	60bb      	str	r3, [r7, #8]
      break;
 8003236:	e0b4      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04d      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	461a      	mov	r2, r3
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	ea02 0800 	and.w	r8, r2, r0
 8003266:	ea03 0901 	and.w	r9, r3, r1
 800326a:	4640      	mov	r0, r8
 800326c:	4649      	mov	r1, r9
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	014b      	lsls	r3, r1, #5
 8003278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800327c:	0142      	lsls	r2, r0, #5
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	ebb0 0008 	subs.w	r0, r0, r8
 8003286:	eb61 0109 	sbc.w	r1, r1, r9
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	018b      	lsls	r3, r1, #6
 8003294:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003298:	0182      	lsls	r2, r0, #6
 800329a:	1a12      	subs	r2, r2, r0
 800329c:	eb63 0301 	sbc.w	r3, r3, r1
 80032a0:	f04f 0000 	mov.w	r0, #0
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	00d9      	lsls	r1, r3, #3
 80032aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ae:	00d0      	lsls	r0, r2, #3
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	eb12 0208 	adds.w	r2, r2, r8
 80032b8:	eb43 0309 	adc.w	r3, r3, r9
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	0259      	lsls	r1, r3, #9
 80032c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032ca:	0250      	lsls	r0, r2, #9
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f7fc ffd8 	bl	8000290 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e04a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	461a      	mov	r2, r3
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	ea02 0400 	and.w	r4, r2, r0
 8003302:	ea03 0501 	and.w	r5, r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	014b      	lsls	r3, r1, #5
 8003314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003318:	0142      	lsls	r2, r0, #5
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	1b00      	subs	r0, r0, r4
 8003320:	eb61 0105 	sbc.w	r1, r1, r5
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	018b      	lsls	r3, r1, #6
 800332e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003332:	0182      	lsls	r2, r0, #6
 8003334:	1a12      	subs	r2, r2, r0
 8003336:	eb63 0301 	sbc.w	r3, r3, r1
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	00d9      	lsls	r1, r3, #3
 8003344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003348:	00d0      	lsls	r0, r2, #3
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	1912      	adds	r2, r2, r4
 8003350:	eb45 0303 	adc.w	r3, r5, r3
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0299      	lsls	r1, r3, #10
 800335e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003362:	0290      	lsls	r0, r2, #10
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	461a      	mov	r2, r3
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f7fc ff8c 	bl	8000290 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	60bb      	str	r3, [r7, #8]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800339e:	60bb      	str	r3, [r7, #8]
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	68bb      	ldr	r3, [r7, #8]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000400 	.word	0x20000400

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff0 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08006ac0 	.word	0x08006ac0

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff ffdc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	08006ac0 	.word	0x08006ac0

08003424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e03f      	b.n	80034b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd fc98 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f929 	bl	80036c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800347c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800348c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800349c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b08a      	sub	sp, #40	; 0x28
 80034c2:	af02      	add	r7, sp, #8
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d17c      	bne.n	80035d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_UART_Transmit+0x2c>
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e075      	b.n	80035da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_UART_Transmit+0x3e>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e06e      	b.n	80035da <HAL_UART_Transmit+0x11c>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2221      	movs	r2, #33	; 0x21
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003512:	f7fd fd9b 	bl	800104c <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352c:	d108      	bne.n	8003540 <HAL_UART_Transmit+0x82>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d104      	bne.n	8003540 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e003      	b.n	8003548 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003550:	e02a      	b.n	80035a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	2180      	movs	r1, #128	; 0x80
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f840 	bl	80035e2 <UART_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e036      	b.n	80035da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10b      	bne.n	800358a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003580:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3302      	adds	r3, #2
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	e007      	b.n	800359a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3301      	adds	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1cf      	bne.n	8003552 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2140      	movs	r1, #64	; 0x40
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f810 	bl	80035e2 <UART_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e006      	b.n	80035da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e000      	b.n	80035da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b090      	sub	sp, #64	; 0x40
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	e050      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d04c      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <UART_WaitOnFlagUntilTimeout+0x30>
 8003602:	f7fd fd23 	bl	800104c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800360e:	429a      	cmp	r2, r3
 8003610:	d241      	bcs.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003632:	637a      	str	r2, [r7, #52]	; 0x34
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e5      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	613b      	str	r3, [r7, #16]
   return(result);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3314      	adds	r3, #20
 8003664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003666:	623a      	str	r2, [r7, #32]
 8003668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	69f9      	ldr	r1, [r7, #28]
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	61bb      	str	r3, [r7, #24]
   return(result);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e5      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e00f      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d09f      	beq.n	80035f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3740      	adds	r7, #64	; 0x40
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c4:	b09f      	sub	sp, #124	; 0x7c
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	68d9      	ldr	r1, [r3, #12]
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	ea40 0301 	orr.w	r3, r0, r1
 80036e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80036fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003704:	f021 010c 	bic.w	r1, r1, #12
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800370e:	430b      	orrs	r3, r1
 8003710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800371c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371e:	6999      	ldr	r1, [r3, #24]
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	ea40 0301 	orr.w	r3, r0, r1
 8003728:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800372a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4bc5      	ldr	r3, [pc, #788]	; (8003a44 <UART_SetConfig+0x384>)
 8003730:	429a      	cmp	r2, r3
 8003732:	d004      	beq.n	800373e <UART_SetConfig+0x7e>
 8003734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4bc3      	ldr	r3, [pc, #780]	; (8003a48 <UART_SetConfig+0x388>)
 800373a:	429a      	cmp	r2, r3
 800373c:	d103      	bne.n	8003746 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800373e:	f7ff fe5d 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8003742:	6778      	str	r0, [r7, #116]	; 0x74
 8003744:	e002      	b.n	800374c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003746:	f7ff fe45 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 800374a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003754:	f040 80b6 	bne.w	80038c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800375a:	461c      	mov	r4, r3
 800375c:	f04f 0500 	mov.w	r5, #0
 8003760:	4622      	mov	r2, r4
 8003762:	462b      	mov	r3, r5
 8003764:	1891      	adds	r1, r2, r2
 8003766:	6439      	str	r1, [r7, #64]	; 0x40
 8003768:	415b      	adcs	r3, r3
 800376a:	647b      	str	r3, [r7, #68]	; 0x44
 800376c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003770:	1912      	adds	r2, r2, r4
 8003772:	eb45 0303 	adc.w	r3, r5, r3
 8003776:	f04f 0000 	mov.w	r0, #0
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	00d9      	lsls	r1, r3, #3
 8003780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003784:	00d0      	lsls	r0, r2, #3
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	1911      	adds	r1, r2, r4
 800378c:	6639      	str	r1, [r7, #96]	; 0x60
 800378e:	416b      	adcs	r3, r5
 8003790:	667b      	str	r3, [r7, #100]	; 0x64
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	461a      	mov	r2, r3
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	1891      	adds	r1, r2, r2
 800379e:	63b9      	str	r1, [r7, #56]	; 0x38
 80037a0:	415b      	adcs	r3, r3
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037ac:	f7fc fd70 	bl	8000290 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4ba5      	ldr	r3, [pc, #660]	; (8003a4c <UART_SetConfig+0x38c>)
 80037b6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	011e      	lsls	r6, r3, #4
 80037be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c0:	461c      	mov	r4, r3
 80037c2:	f04f 0500 	mov.w	r5, #0
 80037c6:	4622      	mov	r2, r4
 80037c8:	462b      	mov	r3, r5
 80037ca:	1891      	adds	r1, r2, r2
 80037cc:	6339      	str	r1, [r7, #48]	; 0x30
 80037ce:	415b      	adcs	r3, r3
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
 80037d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037d6:	1912      	adds	r2, r2, r4
 80037d8:	eb45 0303 	adc.w	r3, r5, r3
 80037dc:	f04f 0000 	mov.w	r0, #0
 80037e0:	f04f 0100 	mov.w	r1, #0
 80037e4:	00d9      	lsls	r1, r3, #3
 80037e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ea:	00d0      	lsls	r0, r2, #3
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	1911      	adds	r1, r2, r4
 80037f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80037f4:	416b      	adcs	r3, r5
 80037f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	461a      	mov	r2, r3
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	1891      	adds	r1, r2, r2
 8003804:	62b9      	str	r1, [r7, #40]	; 0x28
 8003806:	415b      	adcs	r3, r3
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800380e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003812:	f7fc fd3d 	bl	8000290 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4b8c      	ldr	r3, [pc, #560]	; (8003a4c <UART_SetConfig+0x38c>)
 800381c:	fba3 1302 	umull	r1, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	2164      	movs	r1, #100	; 0x64
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	3332      	adds	r3, #50	; 0x32
 800382e:	4a87      	ldr	r2, [pc, #540]	; (8003a4c <UART_SetConfig+0x38c>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800383c:	441e      	add	r6, r3
 800383e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003840:	4618      	mov	r0, r3
 8003842:	f04f 0100 	mov.w	r1, #0
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	1894      	adds	r4, r2, r2
 800384c:	623c      	str	r4, [r7, #32]
 800384e:	415b      	adcs	r3, r3
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003856:	1812      	adds	r2, r2, r0
 8003858:	eb41 0303 	adc.w	r3, r1, r3
 800385c:	f04f 0400 	mov.w	r4, #0
 8003860:	f04f 0500 	mov.w	r5, #0
 8003864:	00dd      	lsls	r5, r3, #3
 8003866:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800386a:	00d4      	lsls	r4, r2, #3
 800386c:	4622      	mov	r2, r4
 800386e:	462b      	mov	r3, r5
 8003870:	1814      	adds	r4, r2, r0
 8003872:	653c      	str	r4, [r7, #80]	; 0x50
 8003874:	414b      	adcs	r3, r1
 8003876:	657b      	str	r3, [r7, #84]	; 0x54
 8003878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	461a      	mov	r2, r3
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	1891      	adds	r1, r2, r2
 8003884:	61b9      	str	r1, [r7, #24]
 8003886:	415b      	adcs	r3, r3
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800388e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003892:	f7fc fcfd 	bl	8000290 <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <UART_SetConfig+0x38c>)
 800389c:	fba3 1302 	umull	r1, r3, r3, r2
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	2164      	movs	r1, #100	; 0x64
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	3332      	adds	r3, #50	; 0x32
 80038ae:	4a67      	ldr	r2, [pc, #412]	; (8003a4c <UART_SetConfig+0x38c>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	f003 0207 	and.w	r2, r3, #7
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4432      	add	r2, r6
 80038c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038c2:	e0b9      	b.n	8003a38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c6:	461c      	mov	r4, r3
 80038c8:	f04f 0500 	mov.w	r5, #0
 80038cc:	4622      	mov	r2, r4
 80038ce:	462b      	mov	r3, r5
 80038d0:	1891      	adds	r1, r2, r2
 80038d2:	6139      	str	r1, [r7, #16]
 80038d4:	415b      	adcs	r3, r3
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038dc:	1912      	adds	r2, r2, r4
 80038de:	eb45 0303 	adc.w	r3, r5, r3
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	00d9      	lsls	r1, r3, #3
 80038ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038f0:	00d0      	lsls	r0, r2, #3
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	eb12 0804 	adds.w	r8, r2, r4
 80038fa:	eb43 0905 	adc.w	r9, r3, r5
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	008b      	lsls	r3, r1, #2
 8003912:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003916:	0082      	lsls	r2, r0, #2
 8003918:	4640      	mov	r0, r8
 800391a:	4649      	mov	r1, r9
 800391c:	f7fc fcb8 	bl	8000290 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4b49      	ldr	r3, [pc, #292]	; (8003a4c <UART_SetConfig+0x38c>)
 8003926:	fba3 2302 	umull	r2, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	011e      	lsls	r6, r3, #4
 800392e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003930:	4618      	mov	r0, r3
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	1894      	adds	r4, r2, r2
 800393c:	60bc      	str	r4, [r7, #8]
 800393e:	415b      	adcs	r3, r3
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003946:	1812      	adds	r2, r2, r0
 8003948:	eb41 0303 	adc.w	r3, r1, r3
 800394c:	f04f 0400 	mov.w	r4, #0
 8003950:	f04f 0500 	mov.w	r5, #0
 8003954:	00dd      	lsls	r5, r3, #3
 8003956:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800395a:	00d4      	lsls	r4, r2, #3
 800395c:	4622      	mov	r2, r4
 800395e:	462b      	mov	r3, r5
 8003960:	1814      	adds	r4, r2, r0
 8003962:	64bc      	str	r4, [r7, #72]	; 0x48
 8003964:	414b      	adcs	r3, r1
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	008b      	lsls	r3, r1, #2
 800397c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003980:	0082      	lsls	r2, r0, #2
 8003982:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003986:	f7fc fc83 	bl	8000290 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <UART_SetConfig+0x38c>)
 8003990:	fba3 1302 	umull	r1, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	2164      	movs	r1, #100	; 0x64
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	3332      	adds	r3, #50	; 0x32
 80039a2:	4a2a      	ldr	r2, [pc, #168]	; (8003a4c <UART_SetConfig+0x38c>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ae:	441e      	add	r6, r3
 80039b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b2:	4618      	mov	r0, r3
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	1894      	adds	r4, r2, r2
 80039be:	603c      	str	r4, [r7, #0]
 80039c0:	415b      	adcs	r3, r3
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039c8:	1812      	adds	r2, r2, r0
 80039ca:	eb41 0303 	adc.w	r3, r1, r3
 80039ce:	f04f 0400 	mov.w	r4, #0
 80039d2:	f04f 0500 	mov.w	r5, #0
 80039d6:	00dd      	lsls	r5, r3, #3
 80039d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039dc:	00d4      	lsls	r4, r2, #3
 80039de:	4622      	mov	r2, r4
 80039e0:	462b      	mov	r3, r5
 80039e2:	eb12 0a00 	adds.w	sl, r2, r0
 80039e6:	eb43 0b01 	adc.w	fp, r3, r1
 80039ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f04f 0100 	mov.w	r1, #0
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	008b      	lsls	r3, r1, #2
 80039fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a02:	0082      	lsls	r2, r0, #2
 8003a04:	4650      	mov	r0, sl
 8003a06:	4659      	mov	r1, fp
 8003a08:	f7fc fc42 	bl	8000290 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <UART_SetConfig+0x38c>)
 8003a12:	fba3 1302 	umull	r1, r3, r3, r2
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2164      	movs	r1, #100	; 0x64
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	3332      	adds	r3, #50	; 0x32
 8003a24:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <UART_SetConfig+0x38c>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	f003 020f 	and.w	r2, r3, #15
 8003a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4432      	add	r2, r6
 8003a36:	609a      	str	r2, [r3, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	377c      	adds	r7, #124	; 0x7c
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a42:	bf00      	nop
 8003a44:	40011000 	.word	0x40011000
 8003a48:	40011400 	.word	0x40011400
 8003a4c:	51eb851f 	.word	0x51eb851f

08003a50 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <MX_PDM2PCM_Init+0x48>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <MX_PDM2PCM_Init+0x48>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <MX_PDM2PCM_Init+0x48>)
 8003a62:	4a0e      	ldr	r2, [pc, #56]	; (8003a9c <MX_PDM2PCM_Init+0x4c>)
 8003a64:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <MX_PDM2PCM_Init+0x48>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <MX_PDM2PCM_Init+0x48>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8003a72:	4809      	ldr	r0, [pc, #36]	; (8003a98 <MX_PDM2PCM_Init+0x48>)
 8003a74:	f001 fd66 	bl	8005544 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <MX_PDM2PCM_Init+0x50>)
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <MX_PDM2PCM_Init+0x50>)
 8003a80:	2210      	movs	r2, #16
 8003a82:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <MX_PDM2PCM_Init+0x50>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8003a8a:	4905      	ldr	r1, [pc, #20]	; (8003aa0 <MX_PDM2PCM_Init+0x50>)
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <MX_PDM2PCM_Init+0x48>)
 8003a8e:	f001 fde3 	bl	8005658 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000b64 	.word	0x20000b64
 8003a9c:	7d70a3d6 	.word	0x7d70a3d6
 8003aa0:	20000b5c 	.word	0x20000b5c

08003aa4 <D16_GENERIC>:
 8003aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	b089      	sub	sp, #36	; 0x24
 8003aaa:	68d4      	ldr	r4, [r2, #12]
 8003aac:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003aae:	6993      	ldr	r3, [r2, #24]
 8003ab0:	9407      	str	r4, [sp, #28]
 8003ab2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003ab4:	9306      	str	r3, [sp, #24]
 8003ab6:	9402      	str	r4, [sp, #8]
 8003ab8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003abc:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8003ac0:	69d3      	ldr	r3, [r2, #28]
 8003ac2:	6896      	ldr	r6, [r2, #8]
 8003ac4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003ac6:	9103      	str	r1, [sp, #12]
 8003ac8:	2d00      	cmp	r5, #0
 8003aca:	d066      	beq.n	8003b9a <D16_GENERIC+0xf6>
 8003acc:	f004 0510 	and.w	r5, r4, #16
 8003ad0:	f004 0420 	and.w	r4, r4, #32
 8003ad4:	9504      	str	r5, [sp, #16]
 8003ad6:	4938      	ldr	r1, [pc, #224]	; (8003bb8 <D16_GENERIC+0x114>)
 8003ad8:	9405      	str	r4, [sp, #20]
 8003ada:	f04f 0e00 	mov.w	lr, #0
 8003ade:	4635      	mov	r5, r6
 8003ae0:	e04f      	b.n	8003b82 <D16_GENERIC+0xde>
 8003ae2:	5d87      	ldrb	r7, [r0, r6]
 8003ae4:	7804      	ldrb	r4, [r0, #0]
 8003ae6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003aea:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8003aee:	b2e6      	uxtb	r6, r4
 8003af0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003af4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003af8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8003afc:	4433      	add	r3, r6
 8003afe:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8003b02:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8003b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8003b0e:	0aa3      	lsrs	r3, r4, #10
 8003b10:	4c2a      	ldr	r4, [pc, #168]	; (8003bbc <D16_GENERIC+0x118>)
 8003b12:	fb26 5404 	smlad	r4, r6, r4, r5
 8003b16:	4d2a      	ldr	r5, [pc, #168]	; (8003bc0 <D16_GENERIC+0x11c>)
 8003b18:	fb26 f505 	smuad	r5, r6, r5
 8003b1c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8003b20:	eb04 080a 	add.w	r8, r4, sl
 8003b24:	eba8 080b 	sub.w	r8, r8, fp
 8003b28:	4646      	mov	r6, r8
 8003b2a:	17f7      	asrs	r7, r6, #31
 8003b2c:	e9cd 6700 	strd	r6, r7, [sp]
 8003b30:	9e04      	ldr	r6, [sp, #16]
 8003b32:	f10e 0c01 	add.w	ip, lr, #1
 8003b36:	b16e      	cbz	r6, 8003b54 <D16_GENERIC+0xb0>
 8003b38:	6a16      	ldr	r6, [r2, #32]
 8003b3a:	9f01      	ldr	r7, [sp, #4]
 8003b3c:	fba8 8906 	umull	r8, r9, r8, r6
 8003b40:	fb06 9907 	mla	r9, r6, r7, r9
 8003b44:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003b48:	f149 0900 	adc.w	r9, r9, #0
 8003b4c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8003b50:	46a3      	mov	fp, r4
 8003b52:	4654      	mov	r4, sl
 8003b54:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8003b56:	9f02      	ldr	r7, [sp, #8]
 8003b58:	0424      	lsls	r4, r4, #16
 8003b5a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003b5e:	f04f 0900 	mov.w	r9, #0
 8003b62:	fb0e fe06 	mul.w	lr, lr, r6
 8003b66:	fbc7 8904 	smlal	r8, r9, r7, r4
 8003b6a:	9e03      	ldr	r6, [sp, #12]
 8003b6c:	464f      	mov	r7, r9
 8003b6e:	10bc      	asrs	r4, r7, #2
 8003b70:	f304 040f 	ssat	r4, #16, r4
 8003b74:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8003b78:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003b7a:	fa1f fe8c 	uxth.w	lr, ip
 8003b7e:	4574      	cmp	r4, lr
 8003b80:	d90a      	bls.n	8003b98 <D16_GENERIC+0xf4>
 8003b82:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003b84:	2c01      	cmp	r4, #1
 8003b86:	b2e6      	uxtb	r6, r4
 8003b88:	d1ab      	bne.n	8003ae2 <D16_GENERIC+0x3e>
 8003b8a:	9e05      	ldr	r6, [sp, #20]
 8003b8c:	f850 4b02 	ldr.w	r4, [r0], #2
 8003b90:	2e00      	cmp	r6, #0
 8003b92:	d0ac      	beq.n	8003aee <D16_GENERIC+0x4a>
 8003b94:	ba64      	rev16	r4, r4
 8003b96:	e7aa      	b.n	8003aee <D16_GENERIC+0x4a>
 8003b98:	462e      	mov	r6, r5
 8003b9a:	9907      	ldr	r1, [sp, #28]
 8003b9c:	61d3      	str	r3, [r2, #28]
 8003b9e:	9b06      	ldr	r3, [sp, #24]
 8003ba0:	6096      	str	r6, [r2, #8]
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	60d1      	str	r1, [r2, #12]
 8003ba6:	f8c2 a010 	str.w	sl, [r2, #16]
 8003baa:	f8c2 b014 	str.w	fp, [r2, #20]
 8003bae:	6193      	str	r3, [r2, #24]
 8003bb0:	b009      	add	sp, #36	; 0x24
 8003bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	00030001 	.word	0x00030001
 8003bc0:	00010003 	.word	0x00010003

08003bc4 <D24_GENERIC>:
 8003bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8003bca:	6993      	ldr	r3, [r2, #24]
 8003bcc:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003bce:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003bd2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8003bd6:	6894      	ldr	r4, [r2, #8]
 8003bd8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003bdc:	b089      	sub	sp, #36	; 0x24
 8003bde:	9307      	str	r3, [sp, #28]
 8003be0:	9503      	str	r5, [sp, #12]
 8003be2:	69d3      	ldr	r3, [r2, #28]
 8003be4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8003be6:	9104      	str	r1, [sp, #16]
 8003be8:	2e00      	cmp	r6, #0
 8003bea:	f000 8096 	beq.w	8003d1a <D24_GENERIC+0x156>
 8003bee:	f005 0610 	and.w	r6, r5, #16
 8003bf2:	f005 0520 	and.w	r5, r5, #32
 8003bf6:	4954      	ldr	r1, [pc, #336]	; (8003d48 <D24_GENERIC+0x184>)
 8003bf8:	9605      	str	r6, [sp, #20]
 8003bfa:	9506      	str	r5, [sp, #24]
 8003bfc:	f04f 0e00 	mov.w	lr, #0
 8003c00:	f8cd 9008 	str.w	r9, [sp, #8]
 8003c04:	e06a      	b.n	8003cdc <D24_GENERIC+0x118>
 8003c06:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8003c0a:	f810 8007 	ldrb.w	r8, [r0, r7]
 8003c0e:	f890 c000 	ldrb.w	ip, [r0]
 8003c12:	042d      	lsls	r5, r5, #16
 8003c14:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003c18:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8003c1c:	44ac      	add	ip, r5
 8003c1e:	4438      	add	r0, r7
 8003c20:	fa5f f68c 	uxtb.w	r6, ip
 8003c24:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8003c28:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003c2c:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8003c30:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003c34:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8003c38:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8003c3c:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8003c40:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8003c44:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003c48:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8003c4c:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8003c50:	4d3e      	ldr	r5, [pc, #248]	; (8003d4c <D24_GENERIC+0x188>)
 8003c52:	fb26 b705 	smlad	r7, r6, r5, fp
 8003c56:	4d3e      	ldr	r5, [pc, #248]	; (8003d50 <D24_GENERIC+0x18c>)
 8003c58:	fb26 4b05 	smlad	fp, r6, r5, r4
 8003c5c:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8003c60:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8003c64:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8003c68:	2401      	movs	r4, #1
 8003c6a:	fb26 f604 	smuad	r6, r6, r4
 8003c6e:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8003c72:	9f02      	ldr	r7, [sp, #8]
 8003c74:	eb0e 0c04 	add.w	ip, lr, r4
 8003c78:	eb08 0406 	add.w	r4, r8, r6
 8003c7c:	eb05 060a 	add.w	r6, r5, sl
 8003c80:	1bf6      	subs	r6, r6, r7
 8003c82:	4637      	mov	r7, r6
 8003c84:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8003c88:	e9cd 7800 	strd	r7, r8, [sp]
 8003c8c:	9f05      	ldr	r7, [sp, #20]
 8003c8e:	b177      	cbz	r7, 8003cae <D24_GENERIC+0xea>
 8003c90:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8003c94:	9502      	str	r5, [sp, #8]
 8003c96:	fba6 9a08 	umull	r9, sl, r6, r8
 8003c9a:	9e01      	ldr	r6, [sp, #4]
 8003c9c:	fb08 aa06 	mla	sl, r8, r6, sl
 8003ca0:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8003ca4:	f14a 0700 	adc.w	r7, sl, #0
 8003ca8:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8003cac:	4655      	mov	r5, sl
 8003cae:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8003cb0:	9f03      	ldr	r7, [sp, #12]
 8003cb2:	03ad      	lsls	r5, r5, #14
 8003cb4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003cb8:	f04f 0900 	mov.w	r9, #0
 8003cbc:	fb0e fe06 	mul.w	lr, lr, r6
 8003cc0:	fbc7 8905 	smlal	r8, r9, r7, r5
 8003cc4:	9e04      	ldr	r6, [sp, #16]
 8003cc6:	464f      	mov	r7, r9
 8003cc8:	10bd      	asrs	r5, r7, #2
 8003cca:	f305 050f 	ssat	r5, #16, r5
 8003cce:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8003cd2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003cd4:	fa1f fe8c 	uxth.w	lr, ip
 8003cd8:	4575      	cmp	r5, lr
 8003cda:	d91c      	bls.n	8003d16 <D24_GENERIC+0x152>
 8003cdc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8003cde:	b2ef      	uxtb	r7, r5
 8003ce0:	2d01      	cmp	r5, #1
 8003ce2:	b23e      	sxth	r6, r7
 8003ce4:	d18f      	bne.n	8003c06 <D24_GENERIC+0x42>
 8003ce6:	9d06      	ldr	r5, [sp, #24]
 8003ce8:	b15d      	cbz	r5, 8003d02 <D24_GENERIC+0x13e>
 8003cea:	f01e 0f01 	tst.w	lr, #1
 8003cee:	d122      	bne.n	8003d36 <D24_GENERIC+0x172>
 8003cf0:	7805      	ldrb	r5, [r0, #0]
 8003cf2:	78c7      	ldrb	r7, [r0, #3]
 8003cf4:	7846      	ldrb	r6, [r0, #1]
 8003cf6:	022d      	lsls	r5, r5, #8
 8003cf8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003cfc:	44b4      	add	ip, r6
 8003cfe:	3002      	adds	r0, #2
 8003d00:	e78e      	b.n	8003c20 <D24_GENERIC+0x5c>
 8003d02:	7846      	ldrb	r6, [r0, #1]
 8003d04:	f890 c002 	ldrb.w	ip, [r0, #2]
 8003d08:	f810 5b03 	ldrb.w	r5, [r0], #3
 8003d0c:	0236      	lsls	r6, r6, #8
 8003d0e:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8003d12:	44ac      	add	ip, r5
 8003d14:	e784      	b.n	8003c20 <D24_GENERIC+0x5c>
 8003d16:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003d1a:	61d3      	str	r3, [r2, #28]
 8003d1c:	9b07      	ldr	r3, [sp, #28]
 8003d1e:	6094      	str	r4, [r2, #8]
 8003d20:	2000      	movs	r0, #0
 8003d22:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003d26:	f8c2 a010 	str.w	sl, [r2, #16]
 8003d2a:	f8c2 9014 	str.w	r9, [r2, #20]
 8003d2e:	6193      	str	r3, [r2, #24]
 8003d30:	b009      	add	sp, #36	; 0x24
 8003d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d36:	78c5      	ldrb	r5, [r0, #3]
 8003d38:	7887      	ldrb	r7, [r0, #2]
 8003d3a:	f810 6b04 	ldrb.w	r6, [r0], #4
 8003d3e:	022d      	lsls	r5, r5, #8
 8003d40:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003d44:	44b4      	add	ip, r6
 8003d46:	e76b      	b.n	8003c20 <D24_GENERIC+0x5c>
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	00030001 	.word	0x00030001
 8003d50:	00060007 	.word	0x00060007

08003d54 <D32_GENERIC>:
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003d5a:	6993      	ldr	r3, [r2, #24]
 8003d5c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003d5e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003d62:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8003d66:	69d6      	ldr	r6, [r2, #28]
 8003d68:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003d6c:	b089      	sub	sp, #36	; 0x24
 8003d6e:	9307      	str	r3, [sp, #28]
 8003d70:	9403      	str	r4, [sp, #12]
 8003d72:	6893      	ldr	r3, [r2, #8]
 8003d74:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003d76:	9104      	str	r1, [sp, #16]
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	f000 809f 	beq.w	8003ebc <D32_GENERIC+0x168>
 8003d7e:	f004 0510 	and.w	r5, r4, #16
 8003d82:	f004 0420 	and.w	r4, r4, #32
 8003d86:	9505      	str	r5, [sp, #20]
 8003d88:	4953      	ldr	r1, [pc, #332]	; (8003ed8 <D32_GENERIC+0x184>)
 8003d8a:	9406      	str	r4, [sp, #24]
 8003d8c:	f04f 0c00 	mov.w	ip, #0
 8003d90:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d94:	461d      	mov	r5, r3
 8003d96:	4617      	mov	r7, r2
 8003d98:	e077      	b.n	8003e8a <D32_GENERIC+0x136>
 8003d9a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8003d9e:	f810 800e 	ldrb.w	r8, [r0, lr]
 8003da2:	f810 e002 	ldrb.w	lr, [r0, r2]
 8003da6:	7800      	ldrb	r0, [r0, #0]
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003dae:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8003db2:	4403      	add	r3, r0
 8003db4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8003db8:	b2dc      	uxtb	r4, r3
 8003dba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003dbe:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8003dc2:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8003dc6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003dca:	0e1b      	lsrs	r3, r3, #24
 8003dcc:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8003dd0:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8003dd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dd8:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8003ddc:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8003de0:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8003de4:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8003de8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003dec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003df0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003df4:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8003df8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003dfc:	4b37      	ldr	r3, [pc, #220]	; (8003edc <D32_GENERIC+0x188>)
 8003dfe:	fb22 b403 	smlad	r4, r2, r3, fp
 8003e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e06:	fb2e 4803 	smlad	r8, lr, r3, r4
 8003e0a:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <D32_GENERIC+0x18c>)
 8003e0c:	fb22 5503 	smlad	r5, r2, r3, r5
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <D32_GENERIC+0x190>)
 8003e12:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8003e16:	2301      	movs	r3, #1
 8003e18:	fb22 f203 	smuad	r2, r2, r3
 8003e1c:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <D32_GENERIC+0x194>)
 8003e1e:	fb2e 2503 	smlad	r5, lr, r3, r2
 8003e22:	9b02      	ldr	r3, [sp, #8]
 8003e24:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8003e28:	eb04 080a 	add.w	r8, r4, sl
 8003e2c:	eba8 0803 	sub.w	r8, r8, r3
 8003e30:	4642      	mov	r2, r8
 8003e32:	17d3      	asrs	r3, r2, #31
 8003e34:	e9cd 2300 	strd	r2, r3, [sp]
 8003e38:	9b05      	ldr	r3, [sp, #20]
 8003e3a:	f10c 0e01 	add.w	lr, ip, #1
 8003e3e:	b16b      	cbz	r3, 8003e5c <D32_GENERIC+0x108>
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	9b01      	ldr	r3, [sp, #4]
 8003e44:	9402      	str	r4, [sp, #8]
 8003e46:	fba8 8902 	umull	r8, r9, r8, r2
 8003e4a:	fb02 9903 	mla	r9, r2, r3, r9
 8003e4e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003e52:	f149 0900 	adc.w	r9, r9, #0
 8003e56:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8003e5a:	4654      	mov	r4, sl
 8003e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e5e:	9a04      	ldr	r2, [sp, #16]
 8003e60:	fb0c fc03 	mul.w	ip, ip, r3
 8003e64:	9b03      	ldr	r3, [sp, #12]
 8003e66:	0364      	lsls	r4, r4, #13
 8003e68:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003e6c:	f04f 0900 	mov.w	r9, #0
 8003e70:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003e74:	464b      	mov	r3, r9
 8003e76:	109b      	asrs	r3, r3, #2
 8003e78:	f303 030f 	ssat	r3, #16, r3
 8003e7c:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8003e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e82:	fa1f fc8e 	uxth.w	ip, lr
 8003e86:	4563      	cmp	r3, ip
 8003e88:	d914      	bls.n	8003eb4 <D32_GENERIC+0x160>
 8003e8a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8003e8c:	b2e2      	uxtb	r2, r4
 8003e8e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8003e92:	eb00 080e 	add.w	r8, r0, lr
 8003e96:	4253      	negs	r3, r2
 8003e98:	2c01      	cmp	r4, #1
 8003e9a:	eb08 0403 	add.w	r4, r8, r3
 8003e9e:	f47f af7c 	bne.w	8003d9a <D32_GENERIC+0x46>
 8003ea2:	1d02      	adds	r2, r0, #4
 8003ea4:	6803      	ldr	r3, [r0, #0]
 8003ea6:	9806      	ldr	r0, [sp, #24]
 8003ea8:	b110      	cbz	r0, 8003eb0 <D32_GENERIC+0x15c>
 8003eaa:	ba5b      	rev16	r3, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	e783      	b.n	8003db8 <D32_GENERIC+0x64>
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	e781      	b.n	8003db8 <D32_GENERIC+0x64>
 8003eb4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003eb8:	462b      	mov	r3, r5
 8003eba:	463a      	mov	r2, r7
 8003ebc:	6093      	str	r3, [r2, #8]
 8003ebe:	9b07      	ldr	r3, [sp, #28]
 8003ec0:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	61d6      	str	r6, [r2, #28]
 8003ec8:	f8c2 a010 	str.w	sl, [r2, #16]
 8003ecc:	f8c2 9014 	str.w	r9, [r2, #20]
 8003ed0:	6193      	str	r3, [r2, #24]
 8003ed2:	b009      	add	sp, #36	; 0x24
 8003ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	00060003 	.word	0x00060003
 8003ee0:	000a000c 	.word	0x000a000c
 8003ee4:	000c000a 	.word	0x000c000a
 8003ee8:	00030006 	.word	0x00030006

08003eec <D48_GENERIC>:
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	b089      	sub	sp, #36	; 0x24
 8003ef2:	6953      	ldr	r3, [r2, #20]
 8003ef4:	68d4      	ldr	r4, [r2, #12]
 8003ef6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003ef8:	9302      	str	r3, [sp, #8]
 8003efa:	9400      	str	r4, [sp, #0]
 8003efc:	6993      	ldr	r3, [r2, #24]
 8003efe:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003f00:	9307      	str	r3, [sp, #28]
 8003f02:	9403      	str	r4, [sp, #12]
 8003f04:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003f08:	69d6      	ldr	r6, [r2, #28]
 8003f0a:	6893      	ldr	r3, [r2, #8]
 8003f0c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003f0e:	9104      	str	r1, [sp, #16]
 8003f10:	2d00      	cmp	r5, #0
 8003f12:	f000 80c5 	beq.w	80040a0 <D48_GENERIC+0x1b4>
 8003f16:	f004 0510 	and.w	r5, r4, #16
 8003f1a:	f004 0420 	and.w	r4, r4, #32
 8003f1e:	4967      	ldr	r1, [pc, #412]	; (80040bc <D48_GENERIC+0x1d0>)
 8003f20:	9505      	str	r5, [sp, #20]
 8003f22:	9406      	str	r4, [sp, #24]
 8003f24:	f04f 0c00 	mov.w	ip, #0
 8003f28:	4657      	mov	r7, sl
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	e09c      	b.n	8004068 <D48_GENERIC+0x17c>
 8003f2e:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8003f32:	f810 b009 	ldrb.w	fp, [r0, r9]
 8003f36:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8003f3a:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8003f3e:	7800      	ldrb	r0, [r0, #0]
 8003f40:	0424      	lsls	r4, r4, #16
 8003f42:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8003f46:	f818 4005 	ldrb.w	r4, [r8, r5]
 8003f4a:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8003f4e:	44a8      	add	r8, r5
 8003f50:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8003f54:	eb0b 0500 	add.w	r5, fp, r0
 8003f58:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8003f5c:	fa5f f885 	uxtb.w	r8, r5
 8003f60:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8003f64:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8003f68:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8003f6c:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8003f70:	0e2d      	lsrs	r5, r5, #24
 8003f72:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8003f76:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8003f7a:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8003f7e:	b2e6      	uxtb	r6, r4
 8003f80:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8003f84:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003f88:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8003f8c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003f90:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8003f94:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8003f98:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8003f9c:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8003fa0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003fa4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003fa8:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8003fac:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003fb0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003fb4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003fb8:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8003fbc:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8003fc0:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8003fc4:	4c3e      	ldr	r4, [pc, #248]	; (80040c0 <D48_GENERIC+0x1d4>)
 8003fc6:	9d00      	ldr	r5, [sp, #0]
 8003fc8:	fb2a 5404 	smlad	r4, sl, r4, r5
 8003fcc:	4d3d      	ldr	r5, [pc, #244]	; (80040c4 <D48_GENERIC+0x1d8>)
 8003fce:	fb28 4405 	smlad	r4, r8, r5, r4
 8003fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fd6:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8003fda:	4c3b      	ldr	r4, [pc, #236]	; (80040c8 <D48_GENERIC+0x1dc>)
 8003fdc:	9b01      	ldr	r3, [sp, #4]
 8003fde:	fb2a 3304 	smlad	r3, sl, r4, r3
 8003fe2:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8003fe6:	fb28 3304 	smlad	r3, r8, r4, r3
 8003fea:	4c38      	ldr	r4, [pc, #224]	; (80040cc <D48_GENERIC+0x1e0>)
 8003fec:	fb2e 3304 	smlad	r3, lr, r4, r3
 8003ff0:	2501      	movs	r5, #1
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	fb2a fa05 	smuad	sl, sl, r5
 8003ff8:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <D48_GENERIC+0x1e4>)
 8003ffa:	fb28 a803 	smlad	r8, r8, r3, sl
 8003ffe:	4b35      	ldr	r3, [pc, #212]	; (80040d4 <D48_GENERIC+0x1e8>)
 8004000:	fb2e 8303 	smlad	r3, lr, r3, r8
 8004004:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	9b02      	ldr	r3, [sp, #8]
 800400c:	eb04 0807 	add.w	r8, r4, r7
 8004010:	eba8 0803 	sub.w	r8, r8, r3
 8004014:	9b05      	ldr	r3, [sp, #20]
 8004016:	4465      	add	r5, ip
 8004018:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800401c:	b163      	cbz	r3, 8004038 <D48_GENERIC+0x14c>
 800401e:	6a17      	ldr	r7, [r2, #32]
 8004020:	9402      	str	r4, [sp, #8]
 8004022:	fba8 8907 	umull	r8, r9, r8, r7
 8004026:	fb07 990b 	mla	r9, r7, fp, r9
 800402a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800402e:	f149 0900 	adc.w	r9, r9, #0
 8004032:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8004036:	463c      	mov	r4, r7
 8004038:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	02e4      	lsls	r4, r4, #11
 8004040:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004044:	f04f 0900 	mov.w	r9, #0
 8004048:	fb0c fc0e 	mul.w	ip, ip, lr
 800404c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004050:	9b04      	ldr	r3, [sp, #16]
 8004052:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8004056:	f304 040f 	ssat	r4, #16, r4
 800405a:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800405e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004060:	fa1f fc85 	uxth.w	ip, r5
 8004064:	4564      	cmp	r4, ip
 8004066:	d919      	bls.n	800409c <D48_GENERIC+0x1b0>
 8004068:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800406a:	fa5f fe84 	uxtb.w	lr, r4
 800406e:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8004072:	f1ce 0500 	rsb	r5, lr, #0
 8004076:	eb00 0b09 	add.w	fp, r0, r9
 800407a:	eb0b 0a05 	add.w	sl, fp, r5
 800407e:	2c01      	cmp	r4, #1
 8004080:	eb0a 0809 	add.w	r8, sl, r9
 8004084:	f47f af53 	bne.w	8003f2e <D48_GENERIC+0x42>
 8004088:	9b06      	ldr	r3, [sp, #24]
 800408a:	6805      	ldr	r5, [r0, #0]
 800408c:	6844      	ldr	r4, [r0, #4]
 800408e:	3006      	adds	r0, #6
 8004090:	2b00      	cmp	r3, #0
 8004092:	f43f af63 	beq.w	8003f5c <D48_GENERIC+0x70>
 8004096:	ba6d      	rev16	r5, r5
 8004098:	ba64      	rev16	r4, r4
 800409a:	e75f      	b.n	8003f5c <D48_GENERIC+0x70>
 800409c:	9b01      	ldr	r3, [sp, #4]
 800409e:	46ba      	mov	sl, r7
 80040a0:	6093      	str	r3, [r2, #8]
 80040a2:	9b00      	ldr	r3, [sp, #0]
 80040a4:	60d3      	str	r3, [r2, #12]
 80040a6:	9b02      	ldr	r3, [sp, #8]
 80040a8:	6153      	str	r3, [r2, #20]
 80040aa:	9b07      	ldr	r3, [sp, #28]
 80040ac:	61d6      	str	r6, [r2, #28]
 80040ae:	2000      	movs	r0, #0
 80040b0:	f8c2 a010 	str.w	sl, [r2, #16]
 80040b4:	6193      	str	r3, [r2, #24]
 80040b6:	b009      	add	sp, #36	; 0x24
 80040b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040bc:	20000000 	.word	0x20000000
 80040c0:	000f000a 	.word	0x000f000a
 80040c4:	00060003 	.word	0x00060003
 80040c8:	00150019 	.word	0x00150019
 80040cc:	00190015 	.word	0x00190015
 80040d0:	00030006 	.word	0x00030006
 80040d4:	000a000f 	.word	0x000a000f

080040d8 <D64_GENERIC>:
 80040d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040dc:	b089      	sub	sp, #36	; 0x24
 80040de:	6913      	ldr	r3, [r2, #16]
 80040e0:	6895      	ldr	r5, [r2, #8]
 80040e2:	9303      	str	r3, [sp, #12]
 80040e4:	9501      	str	r5, [sp, #4]
 80040e6:	6953      	ldr	r3, [r2, #20]
 80040e8:	68d5      	ldr	r5, [r2, #12]
 80040ea:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80040ec:	9304      	str	r3, [sp, #16]
 80040ee:	9500      	str	r5, [sp, #0]
 80040f0:	6993      	ldr	r3, [r2, #24]
 80040f2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80040f4:	9307      	str	r3, [sp, #28]
 80040f6:	9505      	str	r5, [sp, #20]
 80040f8:	69d3      	ldr	r3, [r2, #28]
 80040fa:	9106      	str	r1, [sp, #24]
 80040fc:	2c00      	cmp	r4, #0
 80040fe:	f000 80d9 	beq.w	80042b4 <D64_GENERIC+0x1dc>
 8004102:	6a11      	ldr	r1, [r2, #32]
 8004104:	9102      	str	r1, [sp, #8]
 8004106:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80042f4 <D64_GENERIC+0x21c>
 800410a:	f04f 0c00 	mov.w	ip, #0
 800410e:	4681      	mov	r9, r0
 8004110:	e0c1      	b.n	8004296 <D64_GENERIC+0x1be>
 8004112:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8004116:	4274      	negs	r4, r6
 8004118:	eb09 0708 	add.w	r7, r9, r8
 800411c:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8004120:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8004124:	5d38      	ldrb	r0, [r7, r4]
 8004126:	5d29      	ldrb	r1, [r5, r4]
 8004128:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800412c:	f819 a008 	ldrb.w	sl, [r9, r8]
 8004130:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8004134:	f899 7000 	ldrb.w	r7, [r9]
 8004138:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800413c:	4425      	add	r5, r4
 800413e:	0409      	lsls	r1, r1, #16
 8004140:	0400      	lsls	r0, r0, #16
 8004142:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8004146:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800414a:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800414e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8004152:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8004156:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800415a:	4459      	add	r1, fp
 800415c:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8004160:	4438      	add	r0, r7
 8004162:	b2c5      	uxtb	r5, r0
 8004164:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8004168:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800416c:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8004170:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004174:	0e00      	lsrs	r0, r0, #24
 8004176:	eb03 0806 	add.w	r8, r3, r6
 800417a:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800417e:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8004182:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004186:	b2c8      	uxtb	r0, r1
 8004188:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800418c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004190:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8004194:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8004198:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800419c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80041a0:	0e09      	lsrs	r1, r1, #24
 80041a2:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 80041a6:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80041aa:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80041ae:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80041b2:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 80041b6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80041ba:	f3ca 0309 	ubfx	r3, sl, #0, #10
 80041be:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80041c2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80041c6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80041ca:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 80041ce:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80041d2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80041d6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80041da:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80041de:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80041e2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80041e6:	0a8b      	lsrs	r3, r1, #10
 80041e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80041ec:	4939      	ldr	r1, [pc, #228]	; (80042d4 <D64_GENERIC+0x1fc>)
 80041ee:	9c00      	ldr	r4, [sp, #0]
 80041f0:	fb28 4101 	smlad	r1, r8, r1, r4
 80041f4:	4c38      	ldr	r4, [pc, #224]	; (80042d8 <D64_GENERIC+0x200>)
 80041f6:	fb27 1104 	smlad	r1, r7, r4, r1
 80041fa:	4c38      	ldr	r4, [pc, #224]	; (80042dc <D64_GENERIC+0x204>)
 80041fc:	fb20 1104 	smlad	r1, r0, r4, r1
 8004200:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8004204:	fb2a 1106 	smlad	r1, sl, r6, r1
 8004208:	4c35      	ldr	r4, [pc, #212]	; (80042e0 <D64_GENERIC+0x208>)
 800420a:	9d01      	ldr	r5, [sp, #4]
 800420c:	fb28 5404 	smlad	r4, r8, r4, r5
 8004210:	4d33      	ldr	r5, [pc, #204]	; (80042e0 <D64_GENERIC+0x208>)
 8004212:	fb2a 4415 	smladx	r4, sl, r5, r4
 8004216:	4d33      	ldr	r5, [pc, #204]	; (80042e4 <D64_GENERIC+0x20c>)
 8004218:	fb27 4405 	smlad	r4, r7, r5, r4
 800421c:	fb20 4415 	smladx	r4, r0, r5, r4
 8004220:	2501      	movs	r5, #1
 8004222:	9400      	str	r4, [sp, #0]
 8004224:	fb28 f805 	smuad	r8, r8, r5
 8004228:	4c2f      	ldr	r4, [pc, #188]	; (80042e8 <D64_GENERIC+0x210>)
 800422a:	fb27 8704 	smlad	r7, r7, r4, r8
 800422e:	4c2f      	ldr	r4, [pc, #188]	; (80042ec <D64_GENERIC+0x214>)
 8004230:	fb20 7004 	smlad	r0, r0, r4, r7
 8004234:	4c2e      	ldr	r4, [pc, #184]	; (80042f0 <D64_GENERIC+0x218>)
 8004236:	fb2a 0004 	smlad	r0, sl, r4, r0
 800423a:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800423e:	9902      	ldr	r1, [sp, #8]
 8004240:	9001      	str	r0, [sp, #4]
 8004242:	b189      	cbz	r1, 8004268 <D64_GENERIC+0x190>
 8004244:	9803      	ldr	r0, [sp, #12]
 8004246:	9c04      	ldr	r4, [sp, #16]
 8004248:	9604      	str	r6, [sp, #16]
 800424a:	4430      	add	r0, r6
 800424c:	1b00      	subs	r0, r0, r4
 800424e:	17c5      	asrs	r5, r0, #31
 8004250:	460f      	mov	r7, r1
 8004252:	fba0 0101 	umull	r0, r1, r0, r1
 8004256:	fb07 1105 	mla	r1, r7, r5, r1
 800425a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800425e:	f141 0100 	adc.w	r1, r1, #0
 8004262:	0049      	lsls	r1, r1, #1
 8004264:	9103      	str	r1, [sp, #12]
 8004266:	460e      	mov	r6, r1
 8004268:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800426a:	9905      	ldr	r1, [sp, #20]
 800426c:	9806      	ldr	r0, [sp, #24]
 800426e:	02b6      	lsls	r6, r6, #10
 8004270:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004274:	f04f 0800 	mov.w	r8, #0
 8004278:	fb0c f404 	mul.w	r4, ip, r4
 800427c:	fbc1 7806 	smlal	r7, r8, r1, r6
 8004280:	4641      	mov	r1, r8
 8004282:	1089      	asrs	r1, r1, #2
 8004284:	f301 010f 	ssat	r1, #16, r1
 8004288:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800428c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800428e:	f10c 0c01 	add.w	ip, ip, #1
 8004292:	4561      	cmp	r1, ip
 8004294:	dd0e      	ble.n	80042b4 <D64_GENERIC+0x1dc>
 8004296:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8004298:	2e01      	cmp	r6, #1
 800429a:	f47f af3a 	bne.w	8004112 <D64_GENERIC+0x3a>
 800429e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80042a0:	06b4      	lsls	r4, r6, #26
 80042a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80042a6:	f109 0908 	add.w	r9, r9, #8
 80042aa:	f57f af5a 	bpl.w	8004162 <D64_GENERIC+0x8a>
 80042ae:	ba40      	rev16	r0, r0
 80042b0:	ba49      	rev16	r1, r1
 80042b2:	e756      	b.n	8004162 <D64_GENERIC+0x8a>
 80042b4:	61d3      	str	r3, [r2, #28]
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	9901      	ldr	r1, [sp, #4]
 80042ba:	6113      	str	r3, [r2, #16]
 80042bc:	9b04      	ldr	r3, [sp, #16]
 80042be:	6091      	str	r1, [r2, #8]
 80042c0:	6153      	str	r3, [r2, #20]
 80042c2:	9900      	ldr	r1, [sp, #0]
 80042c4:	9b07      	ldr	r3, [sp, #28]
 80042c6:	60d1      	str	r1, [r2, #12]
 80042c8:	2000      	movs	r0, #0
 80042ca:	6193      	str	r3, [r2, #24]
 80042cc:	b009      	add	sp, #36	; 0x24
 80042ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d2:	bf00      	nop
 80042d4:	001c0015 	.word	0x001c0015
 80042d8:	000f000a 	.word	0x000f000a
 80042dc:	00060003 	.word	0x00060003
 80042e0:	0024002a 	.word	0x0024002a
 80042e4:	002e0030 	.word	0x002e0030
 80042e8:	00030006 	.word	0x00030006
 80042ec:	000a000f 	.word	0x000a000f
 80042f0:	0015001c 	.word	0x0015001c
 80042f4:	20000000 	.word	0x20000000

080042f8 <D80_GENERIC>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	b08b      	sub	sp, #44	; 0x2c
 80042fe:	6914      	ldr	r4, [r2, #16]
 8004300:	9404      	str	r4, [sp, #16]
 8004302:	6954      	ldr	r4, [r2, #20]
 8004304:	9405      	str	r4, [sp, #20]
 8004306:	6994      	ldr	r4, [r2, #24]
 8004308:	9409      	str	r4, [sp, #36]	; 0x24
 800430a:	6894      	ldr	r4, [r2, #8]
 800430c:	9402      	str	r4, [sp, #8]
 800430e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004310:	68d4      	ldr	r4, [r2, #12]
 8004312:	9401      	str	r4, [sp, #4]
 8004314:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004316:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800431a:	9406      	str	r4, [sp, #24]
 800431c:	9107      	str	r1, [sp, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 810f 	beq.w	8004542 <D80_GENERIC+0x24a>
 8004324:	6a13      	ldr	r3, [r2, #32]
 8004326:	9308      	str	r3, [sp, #32]
 8004328:	2300      	movs	r3, #0
 800432a:	9200      	str	r2, [sp, #0]
 800432c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8004594 <D80_GENERIC+0x29c>
 8004330:	f8cd b00c 	str.w	fp, [sp, #12]
 8004334:	461a      	mov	r2, r3
 8004336:	e0ed      	b.n	8004514 <D80_GENERIC+0x21c>
 8004338:	fa5f fc8c 	uxtb.w	ip, ip
 800433c:	fa0f f48c 	sxth.w	r4, ip
 8004340:	0066      	lsls	r6, r4, #1
 8004342:	eb06 0804 	add.w	r8, r6, r4
 8004346:	f1cc 0500 	rsb	r5, ip, #0
 800434a:	eb00 0108 	add.w	r1, r0, r8
 800434e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004352:	194b      	adds	r3, r1, r5
 8004354:	5d49      	ldrb	r1, [r1, r5]
 8004356:	f810 a008 	ldrb.w	sl, [r0, r8]
 800435a:	f813 b004 	ldrb.w	fp, [r3, r4]
 800435e:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8004362:	f890 8000 	ldrb.w	r8, [r0]
 8004366:	eb03 0e04 	add.w	lr, r3, r4
 800436a:	eb0e 0705 	add.w	r7, lr, r5
 800436e:	0409      	lsls	r1, r1, #16
 8004370:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8004374:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8004378:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800437c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8004380:	eb0a 0004 	add.w	r0, sl, r4
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	f81a a004 	ldrb.w	sl, [sl, r4]
 800438a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800438e:	5d44      	ldrb	r4, [r0, r5]
 8004390:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8004394:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004398:	4428      	add	r0, r5
 800439a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800439e:	4441      	add	r1, r8
 80043a0:	4430      	add	r0, r6
 80043a2:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80043a6:	441f      	add	r7, r3
 80043a8:	b2cd      	uxtb	r5, r1
 80043aa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80043ae:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80043b2:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80043bc:	0e09      	lsrs	r1, r1, #24
 80043be:	4433      	add	r3, r6
 80043c0:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 80043c4:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 80043c8:	b2fd      	uxtb	r5, r7
 80043ca:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 80043ce:	469b      	mov	fp, r3
 80043d0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80043d4:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80043d8:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 80043dc:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80043e0:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80043e4:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80043e8:	0e3b      	lsrs	r3, r7, #24
 80043ea:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80043ee:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80043f2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80043f6:	fa5f fe84 	uxtb.w	lr, r4
 80043fa:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80043fe:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004402:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004406:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800440a:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800440e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004412:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8004416:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800441a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800441e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004422:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004426:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800442a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800442e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004432:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8004436:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800443a:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800443e:	0aa3      	lsrs	r3, r4, #10
 8004440:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004444:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004448:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800444c:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8004450:	9303      	str	r3, [sp, #12]
 8004452:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8004456:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800445a:	4b42      	ldr	r3, [pc, #264]	; (8004564 <D80_GENERIC+0x26c>)
 800445c:	9901      	ldr	r1, [sp, #4]
 800445e:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004462:	4941      	ldr	r1, [pc, #260]	; (8004568 <D80_GENERIC+0x270>)
 8004464:	fb28 3301 	smlad	r3, r8, r1, r3
 8004468:	4940      	ldr	r1, [pc, #256]	; (800456c <D80_GENERIC+0x274>)
 800446a:	fb2c 3301 	smlad	r3, ip, r1, r3
 800446e:	4940      	ldr	r1, [pc, #256]	; (8004570 <D80_GENERIC+0x278>)
 8004470:	fb27 3301 	smlad	r3, r7, r1, r3
 8004474:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004478:	fb2e 3301 	smlad	r3, lr, r1, r3
 800447c:	493d      	ldr	r1, [pc, #244]	; (8004574 <D80_GENERIC+0x27c>)
 800447e:	9c02      	ldr	r4, [sp, #8]
 8004480:	fb2b 4401 	smlad	r4, fp, r1, r4
 8004484:	493c      	ldr	r1, [pc, #240]	; (8004578 <D80_GENERIC+0x280>)
 8004486:	fb28 4401 	smlad	r4, r8, r1, r4
 800448a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800448e:	fb2c 4101 	smlad	r1, ip, r1, r4
 8004492:	4c3a      	ldr	r4, [pc, #232]	; (800457c <D80_GENERIC+0x284>)
 8004494:	fb27 1104 	smlad	r1, r7, r4, r1
 8004498:	4c39      	ldr	r4, [pc, #228]	; (8004580 <D80_GENERIC+0x288>)
 800449a:	fb2e 1104 	smlad	r1, lr, r4, r1
 800449e:	9101      	str	r1, [sp, #4]
 80044a0:	2101      	movs	r1, #1
 80044a2:	fb2b fb01 	smuad	fp, fp, r1
 80044a6:	4937      	ldr	r1, [pc, #220]	; (8004584 <D80_GENERIC+0x28c>)
 80044a8:	fb28 b801 	smlad	r8, r8, r1, fp
 80044ac:	4d36      	ldr	r5, [pc, #216]	; (8004588 <D80_GENERIC+0x290>)
 80044ae:	fb2c 8c05 	smlad	ip, ip, r5, r8
 80044b2:	4d36      	ldr	r5, [pc, #216]	; (800458c <D80_GENERIC+0x294>)
 80044b4:	fb27 c705 	smlad	r7, r7, r5, ip
 80044b8:	4d35      	ldr	r5, [pc, #212]	; (8004590 <D80_GENERIC+0x298>)
 80044ba:	fb2e 7105 	smlad	r1, lr, r5, r7
 80044be:	9102      	str	r1, [sp, #8]
 80044c0:	9908      	ldr	r1, [sp, #32]
 80044c2:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 80044c6:	b181      	cbz	r1, 80044ea <D80_GENERIC+0x1f2>
 80044c8:	9c04      	ldr	r4, [sp, #16]
 80044ca:	9d05      	ldr	r5, [sp, #20]
 80044cc:	9305      	str	r3, [sp, #20]
 80044ce:	441c      	add	r4, r3
 80044d0:	1b64      	subs	r4, r4, r5
 80044d2:	17e7      	asrs	r7, r4, #31
 80044d4:	fba4 4501 	umull	r4, r5, r4, r1
 80044d8:	fb01 5507 	mla	r5, r1, r7, r5
 80044dc:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80044e0:	f145 0500 	adc.w	r5, r5, #0
 80044e4:	0069      	lsls	r1, r5, #1
 80044e6:	9104      	str	r1, [sp, #16]
 80044e8:	460b      	mov	r3, r1
 80044ea:	9e00      	ldr	r6, [sp, #0]
 80044ec:	9f06      	ldr	r7, [sp, #24]
 80044ee:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80044f0:	025b      	lsls	r3, r3, #9
 80044f2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80044f6:	2500      	movs	r5, #0
 80044f8:	fb02 f101 	mul.w	r1, r2, r1
 80044fc:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004500:	9c07      	ldr	r4, [sp, #28]
 8004502:	10ab      	asrs	r3, r5, #2
 8004504:	f303 030f 	ssat	r3, #16, r3
 8004508:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800450c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800450e:	3201      	adds	r2, #1
 8004510:	4293      	cmp	r3, r2
 8004512:	dd13      	ble.n	800453c <D80_GENERIC+0x244>
 8004514:	9b00      	ldr	r3, [sp, #0]
 8004516:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800451a:	f1bc 0f01 	cmp.w	ip, #1
 800451e:	f47f af0b 	bne.w	8004338 <D80_GENERIC+0x40>
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	6884      	ldr	r4, [r0, #8]
 8004526:	069b      	lsls	r3, r3, #26
 8004528:	e890 0082 	ldmia.w	r0, {r1, r7}
 800452c:	f100 000a 	add.w	r0, r0, #10
 8004530:	f57f af3a 	bpl.w	80043a8 <D80_GENERIC+0xb0>
 8004534:	ba49      	rev16	r1, r1
 8004536:	ba7f      	rev16	r7, r7
 8004538:	ba64      	rev16	r4, r4
 800453a:	e735      	b.n	80043a8 <D80_GENERIC+0xb0>
 800453c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004540:	4632      	mov	r2, r6
 8004542:	9b02      	ldr	r3, [sp, #8]
 8004544:	6093      	str	r3, [r2, #8]
 8004546:	9b01      	ldr	r3, [sp, #4]
 8004548:	60d3      	str	r3, [r2, #12]
 800454a:	9b04      	ldr	r3, [sp, #16]
 800454c:	6113      	str	r3, [r2, #16]
 800454e:	9b05      	ldr	r3, [sp, #20]
 8004550:	6153      	str	r3, [r2, #20]
 8004552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004554:	f8c2 b01c 	str.w	fp, [r2, #28]
 8004558:	2000      	movs	r0, #0
 800455a:	6193      	str	r3, [r2, #24]
 800455c:	b00b      	add	sp, #44	; 0x2c
 800455e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004562:	bf00      	nop
 8004564:	002d0024 	.word	0x002d0024
 8004568:	001c0015 	.word	0x001c0015
 800456c:	000f000a 	.word	0x000f000a
 8004570:	00060003 	.word	0x00060003
 8004574:	0037003f 	.word	0x0037003f
 8004578:	00450049 	.word	0x00450049
 800457c:	00490045 	.word	0x00490045
 8004580:	003f0037 	.word	0x003f0037
 8004584:	00030006 	.word	0x00030006
 8004588:	000a000f 	.word	0x000a000f
 800458c:	0015001c 	.word	0x0015001c
 8004590:	0024002d 	.word	0x0024002d
 8004594:	20000000 	.word	0x20000000

08004598 <D128_GENERIC>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	b093      	sub	sp, #76	; 0x4c
 800459e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80045a0:	9005      	str	r0, [sp, #20]
 80045a2:	4610      	mov	r0, r2
 80045a4:	9201      	str	r2, [sp, #4]
 80045a6:	6912      	ldr	r2, [r2, #16]
 80045a8:	920c      	str	r2, [sp, #48]	; 0x30
 80045aa:	4602      	mov	r2, r0
 80045ac:	6940      	ldr	r0, [r0, #20]
 80045ae:	900d      	str	r0, [sp, #52]	; 0x34
 80045b0:	4610      	mov	r0, r2
 80045b2:	4614      	mov	r4, r2
 80045b4:	6992      	ldr	r2, [r2, #24]
 80045b6:	9211      	str	r2, [sp, #68]	; 0x44
 80045b8:	69c2      	ldr	r2, [r0, #28]
 80045ba:	9202      	str	r2, [sp, #8]
 80045bc:	68e2      	ldr	r2, [r4, #12]
 80045be:	6880      	ldr	r0, [r0, #8]
 80045c0:	9203      	str	r2, [sp, #12]
 80045c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80045c4:	9004      	str	r0, [sp, #16]
 80045c6:	920e      	str	r2, [sp, #56]	; 0x38
 80045c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 819b 	beq.w	8004906 <D128_GENERIC+0x36e>
 80045d0:	6a23      	ldr	r3, [r4, #32]
 80045d2:	9310      	str	r3, [sp, #64]	; 0x40
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8004980 <D128_GENERIC+0x3e8>
 80045da:	9306      	str	r3, [sp, #24]
 80045dc:	e17a      	b.n	80048d4 <D128_GENERIC+0x33c>
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	9d05      	ldr	r5, [sp, #20]
 80045e2:	b214      	sxth	r4, r2
 80045e4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80045e8:	4250      	negs	r0, r2
 80045ea:	eb05 010a 	add.w	r1, r5, sl
 80045ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80045f2:	eb01 0800 	add.w	r8, r1, r0
 80045f6:	eb0b 0c04 	add.w	ip, fp, r4
 80045fa:	eb08 070c 	add.w	r7, r8, ip
 80045fe:	183b      	adds	r3, r7, r0
 8004600:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004604:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8004608:	eb0e 0604 	add.w	r6, lr, r4
 800460c:	9307      	str	r3, [sp, #28]
 800460e:	1833      	adds	r3, r6, r0
 8004610:	9305      	str	r3, [sp, #20]
 8004612:	462b      	mov	r3, r5
 8004614:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8004618:	f8cd a020 	str.w	sl, [sp, #32]
 800461c:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8004620:	f813 c002 	ldrb.w	ip, [r3, r2]
 8004624:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8004628:	5c3a      	ldrb	r2, [r7, r0]
 800462a:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800462e:	781f      	ldrb	r7, [r3, #0]
 8004630:	9b07      	ldr	r3, [sp, #28]
 8004632:	9d05      	ldr	r5, [sp, #20]
 8004634:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8004638:	5c09      	ldrb	r1, [r1, r0]
 800463a:	9709      	str	r7, [sp, #36]	; 0x24
 800463c:	9307      	str	r3, [sp, #28]
 800463e:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8004642:	5c33      	ldrb	r3, [r6, r0]
 8004644:	0412      	lsls	r2, r2, #16
 8004646:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800464a:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800464e:	9d08      	ldr	r5, [sp, #32]
 8004650:	eb06 0a04 	add.w	sl, r6, r4
 8004654:	0409      	lsls	r1, r1, #16
 8004656:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800465a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800465e:	5d36      	ldrb	r6, [r6, r4]
 8004660:	9c05      	ldr	r4, [sp, #20]
 8004662:	042d      	lsls	r5, r5, #16
 8004664:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8004668:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800466c:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8004670:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8004674:	eb0a 0c00 	add.w	ip, sl, r0
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800467e:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8004682:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8004686:	9d07      	ldr	r5, [sp, #28]
 8004688:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800468c:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8004690:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004692:	4458      	add	r0, fp
 8004694:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8004698:	9005      	str	r0, [sp, #20]
 800469a:	4439      	add	r1, r7
 800469c:	442a      	add	r2, r5
 800469e:	44b2      	add	sl, r6
 80046a0:	1918      	adds	r0, r3, r4
 80046a2:	b2cb      	uxtb	r3, r1
 80046a4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80046a8:	9e02      	ldr	r6, [sp, #8]
 80046aa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80046ae:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80046b2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80046b6:	441e      	add	r6, r3
 80046b8:	0e09      	lsrs	r1, r1, #24
 80046ba:	4633      	mov	r3, r6
 80046bc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80046c0:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 80046c4:	b2d4      	uxtb	r4, r2
 80046c6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80046ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80046ce:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 80046d2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80046d6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80046da:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80046de:	0e12      	lsrs	r2, r2, #24
 80046e0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80046e4:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80046e8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80046ec:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80046f0:	9702      	str	r7, [sp, #8]
 80046f2:	b2c2      	uxtb	r2, r0
 80046f4:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80046f8:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80046fc:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8004700:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004704:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004708:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800470c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004710:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004714:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8004718:	0e00      	lsrs	r0, r0, #24
 800471a:	fa5f f68a 	uxtb.w	r6, sl
 800471e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004722:	9309      	str	r3, [sp, #36]	; 0x24
 8004724:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8004728:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800472c:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004730:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004734:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004738:	950a      	str	r5, [sp, #40]	; 0x28
 800473a:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800473e:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004742:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004746:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800474a:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800474e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004752:	920b      	str	r2, [sp, #44]	; 0x2c
 8004754:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800475a:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800475e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004762:	9307      	str	r3, [sp, #28]
 8004764:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004768:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800476c:	9b02      	ldr	r3, [sp, #8]
 800476e:	f8cd c008 	str.w	ip, [sp, #8]
 8004772:	4694      	mov	ip, r2
 8004774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004776:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800477a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800477e:	9a02      	ldr	r2, [sp, #8]
 8004780:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004784:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004788:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800478c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800478e:	f8cd a020 	str.w	sl, [sp, #32]
 8004792:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004796:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800479a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800479e:	9b07      	ldr	r3, [sp, #28]
 80047a0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80047a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80047a8:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 80047ac:	9a08      	ldr	r2, [sp, #32]
 80047ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80047b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80047ba:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80047be:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 80047c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80047c6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80047ca:	0a96      	lsrs	r6, r2, #10
 80047cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80047d0:	9602      	str	r6, [sp, #8]
 80047d2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80047d6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80047da:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80047de:	4e53      	ldr	r6, [pc, #332]	; (800492c <D128_GENERIC+0x394>)
 80047e0:	9f03      	ldr	r7, [sp, #12]
 80047e2:	fb2c 7606 	smlad	r6, ip, r6, r7
 80047e6:	4f52      	ldr	r7, [pc, #328]	; (8004930 <D128_GENERIC+0x398>)
 80047e8:	fb2a 6607 	smlad	r6, sl, r7, r6
 80047ec:	4f51      	ldr	r7, [pc, #324]	; (8004934 <D128_GENERIC+0x39c>)
 80047ee:	fb21 6607 	smlad	r6, r1, r7, r6
 80047f2:	4f51      	ldr	r7, [pc, #324]	; (8004938 <D128_GENERIC+0x3a0>)
 80047f4:	fb24 6607 	smlad	r6, r4, r7, r6
 80047f8:	4f50      	ldr	r7, [pc, #320]	; (800493c <D128_GENERIC+0x3a4>)
 80047fa:	fb28 6607 	smlad	r6, r8, r7, r6
 80047fe:	4f50      	ldr	r7, [pc, #320]	; (8004940 <D128_GENERIC+0x3a8>)
 8004800:	fb20 6607 	smlad	r6, r0, r7, r6
 8004804:	4f4f      	ldr	r7, [pc, #316]	; (8004944 <D128_GENERIC+0x3ac>)
 8004806:	fb23 6607 	smlad	r6, r3, r7, r6
 800480a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800480e:	fb25 6607 	smlad	r6, r5, r7, r6
 8004812:	4f4d      	ldr	r7, [pc, #308]	; (8004948 <D128_GENERIC+0x3b0>)
 8004814:	9a04      	ldr	r2, [sp, #16]
 8004816:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800481a:	4a4c      	ldr	r2, [pc, #304]	; (800494c <D128_GENERIC+0x3b4>)
 800481c:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004820:	4f4b      	ldr	r7, [pc, #300]	; (8004950 <D128_GENERIC+0x3b8>)
 8004822:	fb21 ee07 	smlad	lr, r1, r7, lr
 8004826:	4f4b      	ldr	r7, [pc, #300]	; (8004954 <D128_GENERIC+0x3bc>)
 8004828:	fb24 ee07 	smlad	lr, r4, r7, lr
 800482c:	4f4a      	ldr	r7, [pc, #296]	; (8004958 <D128_GENERIC+0x3c0>)
 800482e:	fb28 ee07 	smlad	lr, r8, r7, lr
 8004832:	4f4a      	ldr	r7, [pc, #296]	; (800495c <D128_GENERIC+0x3c4>)
 8004834:	fb20 ee07 	smlad	lr, r0, r7, lr
 8004838:	4f49      	ldr	r7, [pc, #292]	; (8004960 <D128_GENERIC+0x3c8>)
 800483a:	fb23 e707 	smlad	r7, r3, r7, lr
 800483e:	f8df e144 	ldr.w	lr, [pc, #324]	; 8004984 <D128_GENERIC+0x3ec>
 8004842:	fb25 720e 	smlad	r2, r5, lr, r7
 8004846:	f04f 0b01 	mov.w	fp, #1
 800484a:	9203      	str	r2, [sp, #12]
 800484c:	fb2c fb0b 	smuad	fp, ip, fp
 8004850:	4f44      	ldr	r7, [pc, #272]	; (8004964 <D128_GENERIC+0x3cc>)
 8004852:	fb2a ba07 	smlad	sl, sl, r7, fp
 8004856:	4f44      	ldr	r7, [pc, #272]	; (8004968 <D128_GENERIC+0x3d0>)
 8004858:	fb21 aa07 	smlad	sl, r1, r7, sl
 800485c:	4f43      	ldr	r7, [pc, #268]	; (800496c <D128_GENERIC+0x3d4>)
 800485e:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004862:	4f43      	ldr	r7, [pc, #268]	; (8004970 <D128_GENERIC+0x3d8>)
 8004864:	fb28 a707 	smlad	r7, r8, r7, sl
 8004868:	4a42      	ldr	r2, [pc, #264]	; (8004974 <D128_GENERIC+0x3dc>)
 800486a:	fb20 7702 	smlad	r7, r0, r2, r7
 800486e:	4a42      	ldr	r2, [pc, #264]	; (8004978 <D128_GENERIC+0x3e0>)
 8004870:	fb23 7702 	smlad	r7, r3, r2, r7
 8004874:	4b41      	ldr	r3, [pc, #260]	; (800497c <D128_GENERIC+0x3e4>)
 8004876:	fb25 7303 	smlad	r3, r5, r3, r7
 800487a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800487c:	9304      	str	r3, [sp, #16]
 800487e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8004882:	b185      	cbz	r5, 80048a6 <D128_GENERIC+0x30e>
 8004884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004886:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004888:	960d      	str	r6, [sp, #52]	; 0x34
 800488a:	4432      	add	r2, r6
 800488c:	1a52      	subs	r2, r2, r1
 800488e:	17d1      	asrs	r1, r2, #31
 8004890:	fba2 2305 	umull	r2, r3, r2, r5
 8004894:	fb05 3301 	mla	r3, r5, r1, r3
 8004898:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800489c:	f143 0300 	adc.w	r3, r3, #0
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	930c      	str	r3, [sp, #48]	; 0x30
 80048a4:	461e      	mov	r6, r3
 80048a6:	9801      	ldr	r0, [sp, #4]
 80048a8:	9c06      	ldr	r4, [sp, #24]
 80048aa:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80048ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80048ae:	01f6      	lsls	r6, r6, #7
 80048b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048b4:	2300      	movs	r3, #0
 80048b6:	fbc5 2306 	smlal	r2, r3, r5, r6
 80048ba:	fb04 f101 	mul.w	r1, r4, r1
 80048be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048c0:	109b      	asrs	r3, r3, #2
 80048c2:	f303 030f 	ssat	r3, #16, r3
 80048c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80048ca:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80048cc:	1c62      	adds	r2, r4, #1
 80048ce:	4293      	cmp	r3, r2
 80048d0:	9206      	str	r2, [sp, #24]
 80048d2:	dd18      	ble.n	8004906 <D128_GENERIC+0x36e>
 80048d4:	9b01      	ldr	r3, [sp, #4]
 80048d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80048d8:	2a01      	cmp	r2, #1
 80048da:	f47f ae80 	bne.w	80045de <D128_GENERIC+0x46>
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	9d05      	ldr	r5, [sp, #20]
 80048e2:	069b      	lsls	r3, r3, #26
 80048e4:	6829      	ldr	r1, [r5, #0]
 80048e6:	686a      	ldr	r2, [r5, #4]
 80048e8:	68a8      	ldr	r0, [r5, #8]
 80048ea:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80048ee:	f105 0410 	add.w	r4, r5, #16
 80048f2:	d506      	bpl.n	8004902 <D128_GENERIC+0x36a>
 80048f4:	ba49      	rev16	r1, r1
 80048f6:	ba52      	rev16	r2, r2
 80048f8:	ba40      	rev16	r0, r0
 80048fa:	fa9a fa9a 	rev16.w	sl, sl
 80048fe:	9405      	str	r4, [sp, #20]
 8004900:	e6cf      	b.n	80046a2 <D128_GENERIC+0x10a>
 8004902:	9405      	str	r4, [sp, #20]
 8004904:	e6cd      	b.n	80046a2 <D128_GENERIC+0x10a>
 8004906:	9a01      	ldr	r2, [sp, #4]
 8004908:	9904      	ldr	r1, [sp, #16]
 800490a:	6091      	str	r1, [r2, #8]
 800490c:	9903      	ldr	r1, [sp, #12]
 800490e:	60d1      	str	r1, [r2, #12]
 8004910:	9b02      	ldr	r3, [sp, #8]
 8004912:	61d3      	str	r3, [r2, #28]
 8004914:	4611      	mov	r1, r2
 8004916:	4613      	mov	r3, r2
 8004918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800491a:	610a      	str	r2, [r1, #16]
 800491c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800491e:	6159      	str	r1, [r3, #20]
 8004920:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004922:	6199      	str	r1, [r3, #24]
 8004924:	2000      	movs	r0, #0
 8004926:	b013      	add	sp, #76	; 0x4c
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	00780069 	.word	0x00780069
 8004930:	005b004e 	.word	0x005b004e
 8004934:	00420037 	.word	0x00420037
 8004938:	002d0024 	.word	0x002d0024
 800493c:	001c0015 	.word	0x001c0015
 8004940:	000f000a 	.word	0x000f000a
 8004944:	00060003 	.word	0x00060003
 8004948:	00880096 	.word	0x00880096
 800494c:	00a200ac 	.word	0x00a200ac
 8004950:	00b400ba 	.word	0x00b400ba
 8004954:	00be00c0 	.word	0x00be00c0
 8004958:	00c000be 	.word	0x00c000be
 800495c:	00ba00b4 	.word	0x00ba00b4
 8004960:	00ac00a2 	.word	0x00ac00a2
 8004964:	00030006 	.word	0x00030006
 8004968:	000a000f 	.word	0x000a000f
 800496c:	0015001c 	.word	0x0015001c
 8004970:	0024002d 	.word	0x0024002d
 8004974:	00370042 	.word	0x00370042
 8004978:	004e005b 	.word	0x004e005b
 800497c:	00690078 	.word	0x00690078
 8004980:	20000000 	.word	0x20000000
 8004984:	00960088 	.word	0x00960088

08004988 <D16_1CH_HTONS_VOL_HP>:
 8004988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498c:	4691      	mov	r9, r2
 800498e:	b083      	sub	sp, #12
 8004990:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004992:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004996:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4680      	mov	r8, r0
 800499e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80049a2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80049a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80049aa:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80049ae:	9401      	str	r4, [sp, #4]
 80049b0:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80049b4:	f8d9 e020 	ldr.w	lr, [r9, #32]
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	d04e      	beq.n	8004a5a <D16_1CH_HTONS_VOL_HP+0xd2>
 80049bc:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8004a68 <D16_1CH_HTONS_VOL_HP+0xe0>
 80049c0:	1e8c      	subs	r4, r1, #2
 80049c2:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 80049c6:	f858 2b02 	ldr.w	r2, [r8], #2
 80049ca:	ba52      	rev16	r2, r2
 80049cc:	b2d6      	uxtb	r6, r2
 80049ce:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80049d2:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 80049d6:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80049da:	4413      	add	r3, r2
 80049dc:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80049e0:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80049e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80049ec:	0a93      	lsrs	r3, r2, #10
 80049ee:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <D16_1CH_HTONS_VOL_HP+0xd8>)
 80049f0:	fb21 5202 	smlad	r2, r1, r2, r5
 80049f4:	4d1b      	ldr	r5, [pc, #108]	; (8004a64 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80049f6:	fb21 f505 	smuad	r5, r1, r5
 80049fa:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80049fe:	4410      	add	r0, r2
 8004a00:	1bc0      	subs	r0, r0, r7
 8004a02:	17c7      	asrs	r7, r0, #31
 8004a04:	fba0 010e 	umull	r0, r1, r0, lr
 8004a08:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004a0c:	fb0e 1107 	mla	r1, lr, r7, r1
 8004a10:	f141 0100 	adc.w	r1, r1, #0
 8004a14:	0448      	lsls	r0, r1, #17
 8004a16:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004a1a:	2700      	movs	r7, #0
 8004a1c:	fbc0 670a 	smlal	r6, r7, r0, sl
 8004a20:	45d8      	cmp	r8, fp
 8004a22:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8004a26:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8004a2a:	4617      	mov	r7, r2
 8004a2c:	f301 010f 	ssat	r1, #16, r1
 8004a30:	f824 1f02 	strh.w	r1, [r4, #2]!
 8004a34:	d1c7      	bne.n	80049c6 <D16_1CH_HTONS_VOL_HP+0x3e>
 8004a36:	9901      	ldr	r1, [sp, #4]
 8004a38:	f8c9 301c 	str.w	r3, [r9, #28]
 8004a3c:	9b00      	ldr	r3, [sp, #0]
 8004a3e:	f8c9 0010 	str.w	r0, [r9, #16]
 8004a42:	2000      	movs	r0, #0
 8004a44:	f8c9 5008 	str.w	r5, [r9, #8]
 8004a48:	f8c9 100c 	str.w	r1, [r9, #12]
 8004a4c:	f8c9 2014 	str.w	r2, [r9, #20]
 8004a50:	f8c9 3018 	str.w	r3, [r9, #24]
 8004a54:	b003      	add	sp, #12
 8004a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5a:	463a      	mov	r2, r7
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	e7eb      	b.n	8004a38 <D16_1CH_HTONS_VOL_HP+0xb0>
 8004a60:	00030001 	.word	0x00030001
 8004a64:	00010003 	.word	0x00010003
 8004a68:	20000000 	.word	0x20000000

08004a6c <D24_1CH_HTONS_VOL_HP>:
 8004a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a70:	b089      	sub	sp, #36	; 0x24
 8004a72:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004a74:	6996      	ldr	r6, [r2, #24]
 8004a76:	9304      	str	r3, [sp, #16]
 8004a78:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8004a7a:	9207      	str	r2, [sp, #28]
 8004a7c:	6915      	ldr	r5, [r2, #16]
 8004a7e:	6954      	ldr	r4, [r2, #20]
 8004a80:	9606      	str	r6, [sp, #24]
 8004a82:	6893      	ldr	r3, [r2, #8]
 8004a84:	69d6      	ldr	r6, [r2, #28]
 8004a86:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8004a8a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8004a8e:	9a04      	ldr	r2, [sp, #16]
 8004a90:	9705      	str	r7, [sp, #20]
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	d07e      	beq.n	8004b94 <D24_1CH_HTONS_VOL_HP+0x128>
 8004a96:	f1a1 0b02 	sub.w	fp, r1, #2
 8004a9a:	2700      	movs	r7, #0
 8004a9c:	46a8      	mov	r8, r5
 8004a9e:	f8cd b004 	str.w	fp, [sp, #4]
 8004aa2:	4655      	mov	r5, sl
 8004aa4:	46e3      	mov	fp, ip
 8004aa6:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8004ba0 <D24_1CH_HTONS_VOL_HP+0x134>
 8004aaa:	46ba      	mov	sl, r7
 8004aac:	469c      	mov	ip, r3
 8004aae:	e055      	b.n	8004b5c <D24_1CH_HTONS_VOL_HP+0xf0>
 8004ab0:	7802      	ldrb	r2, [r0, #0]
 8004ab2:	78c3      	ldrb	r3, [r0, #3]
 8004ab4:	7841      	ldrb	r1, [r0, #1]
 8004ab6:	0212      	lsls	r2, r2, #8
 8004ab8:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8004abc:	440b      	add	r3, r1
 8004abe:	3002      	adds	r0, #2
 8004ac0:	b2d9      	uxtb	r1, r3
 8004ac2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ac6:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8004aca:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004ad4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004ad8:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8004adc:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8004ae0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8004ae4:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004ae8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8004aec:	4a2a      	ldr	r2, [pc, #168]	; (8004b98 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8004aee:	fb23 b102 	smlad	r1, r3, r2, fp
 8004af2:	4a2a      	ldr	r2, [pc, #168]	; (8004b9c <D24_1CH_HTONS_VOL_HP+0x130>)
 8004af4:	fb23 cb02 	smlad	fp, r3, r2, ip
 8004af8:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8004afc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8004b00:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8004b04:	2201      	movs	r2, #1
 8004b06:	fb23 f702 	smuad	r7, r3, r2
 8004b0a:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8004b0e:	eb01 0208 	add.w	r2, r1, r8
 8004b12:	1b12      	subs	r2, r2, r4
 8004b14:	17d4      	asrs	r4, r2, #31
 8004b16:	fba2 2305 	umull	r2, r3, r2, r5
 8004b1a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004b1e:	fb05 3304 	mla	r3, r5, r4, r3
 8004b22:	f143 0300 	adc.w	r3, r3, #0
 8004b26:	9c05      	ldr	r4, [sp, #20]
 8004b28:	03da      	lsls	r2, r3, #15
 8004b2a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004b2e:	f04f 0900 	mov.w	r9, #0
 8004b32:	fbc4 8902 	smlal	r8, r9, r4, r2
 8004b36:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004b3a:	9a01      	ldr	r2, [sp, #4]
 8004b3c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	109b      	asrs	r3, r3, #2
 8004b44:	f303 030f 	ssat	r3, #16, r3
 8004b48:	f822 3f02 	strh.w	r3, [r2, #2]!
 8004b4c:	9b04      	ldr	r3, [sp, #16]
 8004b4e:	9201      	str	r2, [sp, #4]
 8004b50:	f10a 0a01 	add.w	sl, sl, #1
 8004b54:	459a      	cmp	sl, r3
 8004b56:	44bc      	add	ip, r7
 8004b58:	460c      	mov	r4, r1
 8004b5a:	d00b      	beq.n	8004b74 <D24_1CH_HTONS_VOL_HP+0x108>
 8004b5c:	f01a 0f01 	tst.w	sl, #1
 8004b60:	d0a6      	beq.n	8004ab0 <D24_1CH_HTONS_VOL_HP+0x44>
 8004b62:	78c2      	ldrb	r2, [r0, #3]
 8004b64:	7883      	ldrb	r3, [r0, #2]
 8004b66:	f810 1b04 	ldrb.w	r1, [r0], #4
 8004b6a:	0212      	lsls	r2, r2, #8
 8004b6c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8004b70:	440b      	add	r3, r1
 8004b72:	e7a5      	b.n	8004ac0 <D24_1CH_HTONS_VOL_HP+0x54>
 8004b74:	4663      	mov	r3, ip
 8004b76:	4645      	mov	r5, r8
 8004b78:	46dc      	mov	ip, fp
 8004b7a:	9807      	ldr	r0, [sp, #28]
 8004b7c:	6141      	str	r1, [r0, #20]
 8004b7e:	9906      	ldr	r1, [sp, #24]
 8004b80:	6083      	str	r3, [r0, #8]
 8004b82:	f8c0 c00c 	str.w	ip, [r0, #12]
 8004b86:	61c6      	str	r6, [r0, #28]
 8004b88:	6105      	str	r5, [r0, #16]
 8004b8a:	6181      	str	r1, [r0, #24]
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	b009      	add	sp, #36	; 0x24
 8004b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b94:	4621      	mov	r1, r4
 8004b96:	e7f0      	b.n	8004b7a <D24_1CH_HTONS_VOL_HP+0x10e>
 8004b98:	00030001 	.word	0x00030001
 8004b9c:	00060007 	.word	0x00060007
 8004ba0:	20000000 	.word	0x20000000

08004ba4 <D32_1CH_HTONS_VOL_HP>:
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	4692      	mov	sl, r2
 8004baa:	b087      	sub	sp, #28
 8004bac:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004bae:	f8da 3018 	ldr.w	r3, [sl, #24]
 8004bb2:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	f8da 4010 	ldr.w	r4, [sl, #16]
 8004bbc:	f8da 8014 	ldr.w	r8, [sl, #20]
 8004bc0:	f8da 601c 	ldr.w	r6, [sl, #28]
 8004bc4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004bc8:	f8da e00c 	ldr.w	lr, [sl, #12]
 8004bcc:	9501      	str	r5, [sp, #4]
 8004bce:	f8da c020 	ldr.w	ip, [sl, #32]
 8004bd2:	2a00      	cmp	r2, #0
 8004bd4:	d07b      	beq.n	8004cce <D32_1CH_HTONS_VOL_HP+0x12a>
 8004bd6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004bda:	4f3e      	ldr	r7, [pc, #248]	; (8004cd4 <D32_1CH_HTONS_VOL_HP+0x130>)
 8004bdc:	f8cd c00c 	str.w	ip, [sp, #12]
 8004be0:	9202      	str	r2, [sp, #8]
 8004be2:	460d      	mov	r5, r1
 8004be4:	46a1      	mov	r9, r4
 8004be6:	4684      	mov	ip, r0
 8004be8:	f8cd a014 	str.w	sl, [sp, #20]
 8004bec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004bf0:	ba49      	rev16	r1, r1
 8004bf2:	b2c8      	uxtb	r0, r1
 8004bf4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004bf8:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8004bfc:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8004c00:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004c04:	0e09      	lsrs	r1, r1, #24
 8004c06:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004c0a:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8004c0e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8004c12:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8004c16:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8004c1a:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8004c1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c22:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8004c26:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004c2a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004c2e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8004c32:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <D32_1CH_HTONS_VOL_HP+0x134>)
 8004c38:	fb20 e202 	smlad	r2, r0, r2, lr
 8004c3c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004c40:	fb2a 2101 	smlad	r1, sl, r1, r2
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <D32_1CH_HTONS_VOL_HP+0x138>)
 8004c46:	fb20 3302 	smlad	r3, r0, r2, r3
 8004c4a:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8004c4c:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8004c50:	2301      	movs	r3, #1
 8004c52:	fb20 f003 	smuad	r0, r0, r3
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <D32_1CH_HTONS_VOL_HP+0x140>)
 8004c58:	fb2a 0303 	smlad	r3, sl, r3, r0
 8004c5c:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8004c60:	9c03      	ldr	r4, [sp, #12]
 8004c62:	eb02 0009 	add.w	r0, r2, r9
 8004c66:	eba0 0008 	sub.w	r0, r0, r8
 8004c6a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8004c6e:	fba0 0104 	umull	r0, r1, r0, r4
 8004c72:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004c76:	fb04 110b 	mla	r1, r4, fp, r1
 8004c7a:	f141 0100 	adc.w	r1, r1, #0
 8004c7e:	9c01      	ldr	r4, [sp, #4]
 8004c80:	0388      	lsls	r0, r1, #14
 8004c82:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004c86:	f04f 0900 	mov.w	r9, #0
 8004c8a:	fbc0 8904 	smlal	r8, r9, r0, r4
 8004c8e:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8004c92:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8004c96:	f300 000f 	ssat	r0, #16, r0
 8004c9a:	9902      	ldr	r1, [sp, #8]
 8004c9c:	f825 0b02 	strh.w	r0, [r5], #2
 8004ca0:	428d      	cmp	r5, r1
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	d1a2      	bne.n	8004bec <D32_1CH_HTONS_VOL_HP+0x48>
 8004ca6:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004caa:	464c      	mov	r4, r9
 8004cac:	f8ca 3008 	str.w	r3, [sl, #8]
 8004cb0:	9b04      	ldr	r3, [sp, #16]
 8004cb2:	f8ca e00c 	str.w	lr, [sl, #12]
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f8ca 601c 	str.w	r6, [sl, #28]
 8004cbc:	f8ca 4010 	str.w	r4, [sl, #16]
 8004cc0:	f8ca 2014 	str.w	r2, [sl, #20]
 8004cc4:	f8ca 3018 	str.w	r3, [sl, #24]
 8004cc8:	b007      	add	sp, #28
 8004cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cce:	4642      	mov	r2, r8
 8004cd0:	e7ec      	b.n	8004cac <D32_1CH_HTONS_VOL_HP+0x108>
 8004cd2:	bf00      	nop
 8004cd4:	20000000 	.word	0x20000000
 8004cd8:	00060003 	.word	0x00060003
 8004cdc:	000a000c 	.word	0x000a000c
 8004ce0:	000c000a 	.word	0x000c000a
 8004ce4:	00030006 	.word	0x00030006

08004ce8 <D48_1CH_HTONS_VOL_HP>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	4613      	mov	r3, r2
 8004cee:	461c      	mov	r4, r3
 8004cf0:	b087      	sub	sp, #28
 8004cf2:	4625      	mov	r5, r4
 8004cf4:	4626      	mov	r6, r4
 8004cf6:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8004cf8:	9205      	str	r2, [sp, #20]
 8004cfa:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004cfc:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8004d00:	9501      	str	r5, [sp, #4]
 8004d02:	4680      	mov	r8, r0
 8004d04:	6a35      	ldr	r5, [r6, #32]
 8004d06:	6918      	ldr	r0, [r3, #16]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8004d10:	68a3      	ldr	r3, [r4, #8]
 8004d12:	9502      	str	r5, [sp, #8]
 8004d14:	68e4      	ldr	r4, [r4, #12]
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	f000 808c 	beq.w	8004e34 <D48_1CH_HTONS_VOL_HP+0x14c>
 8004d1c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004d20:	4d45      	ldr	r5, [pc, #276]	; (8004e38 <D48_1CH_HTONS_VOL_HP+0x150>)
 8004d22:	9203      	str	r2, [sp, #12]
 8004d24:	468c      	mov	ip, r1
 8004d26:	e898 0044 	ldmia.w	r8, {r2, r6}
 8004d2a:	f108 0806 	add.w	r8, r8, #6
 8004d2e:	ba52      	rev16	r2, r2
 8004d30:	ba76      	rev16	r6, r6
 8004d32:	b2d7      	uxtb	r7, r2
 8004d34:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004d38:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8004d3c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8004d40:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8004d44:	0e12      	lsrs	r2, r2, #24
 8004d46:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8004d4a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8004d4e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004d52:	fa5f fb86 	uxtb.w	fp, r6
 8004d56:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8004d5a:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8004d5e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8004d62:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8004d66:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8004d6a:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004d6e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004d72:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8004d76:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004d7a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d7e:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8004d82:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004d86:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004d8a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004d8e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8004d92:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8004d96:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8004d9a:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <D48_1CH_HTONS_VOL_HP+0x154>)
 8004d9c:	fb2a 4202 	smlad	r2, sl, r2, r4
 8004da0:	4927      	ldr	r1, [pc, #156]	; (8004e40 <D48_1CH_HTONS_VOL_HP+0x158>)
 8004da2:	fb27 2201 	smlad	r2, r7, r1, r2
 8004da6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004daa:	fb26 2201 	smlad	r2, r6, r1, r2
 8004dae:	4925      	ldr	r1, [pc, #148]	; (8004e44 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8004db0:	fb2a 3401 	smlad	r4, sl, r1, r3
 8004db4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8004db8:	fb27 4403 	smlad	r4, r7, r3, r4
 8004dbc:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <D48_1CH_HTONS_VOL_HP+0x160>)
 8004dbe:	fb26 4403 	smlad	r4, r6, r3, r4
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fb2a fa01 	smuad	sl, sl, r1
 8004dc8:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <D48_1CH_HTONS_VOL_HP+0x164>)
 8004dca:	fb27 a703 	smlad	r7, r7, r3, sl
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <D48_1CH_HTONS_VOL_HP+0x168>)
 8004dd0:	fb26 7303 	smlad	r3, r6, r3, r7
 8004dd4:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8004dd8:	9e02      	ldr	r6, [sp, #8]
 8004dda:	9f01      	ldr	r7, [sp, #4]
 8004ddc:	4410      	add	r0, r2
 8004dde:	eba0 0009 	sub.w	r0, r0, r9
 8004de2:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8004de6:	fba0 0106 	umull	r0, r1, r0, r6
 8004dea:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004dee:	fb06 110a 	mla	r1, r6, sl, r1
 8004df2:	f141 0100 	adc.w	r1, r1, #0
 8004df6:	0308      	lsls	r0, r1, #12
 8004df8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8004dfc:	f04f 0a00 	mov.w	sl, #0
 8004e00:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8004e04:	4657      	mov	r7, sl
 8004e06:	10b8      	asrs	r0, r7, #2
 8004e08:	f300 000f 	ssat	r0, #16, r0
 8004e0c:	f82c 0b02 	strh.w	r0, [ip], #2
 8004e10:	0048      	lsls	r0, r1, #1
 8004e12:	9903      	ldr	r1, [sp, #12]
 8004e14:	458c      	cmp	ip, r1
 8004e16:	4691      	mov	r9, r2
 8004e18:	d185      	bne.n	8004d26 <D48_1CH_HTONS_VOL_HP+0x3e>
 8004e1a:	9d05      	ldr	r5, [sp, #20]
 8004e1c:	616a      	str	r2, [r5, #20]
 8004e1e:	9a04      	ldr	r2, [sp, #16]
 8004e20:	6128      	str	r0, [r5, #16]
 8004e22:	2000      	movs	r0, #0
 8004e24:	60ab      	str	r3, [r5, #8]
 8004e26:	60ec      	str	r4, [r5, #12]
 8004e28:	f8c5 e01c 	str.w	lr, [r5, #28]
 8004e2c:	61aa      	str	r2, [r5, #24]
 8004e2e:	b007      	add	sp, #28
 8004e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e34:	464a      	mov	r2, r9
 8004e36:	e7f0      	b.n	8004e1a <D48_1CH_HTONS_VOL_HP+0x132>
 8004e38:	20000000 	.word	0x20000000
 8004e3c:	000f000a 	.word	0x000f000a
 8004e40:	00060003 	.word	0x00060003
 8004e44:	00150019 	.word	0x00150019
 8004e48:	00190015 	.word	0x00190015
 8004e4c:	00030006 	.word	0x00030006
 8004e50:	000a000f 	.word	0x000a000f

08004e54 <D64_1CH_HTONS_VOL_HP>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	b089      	sub	sp, #36	; 0x24
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	9207      	str	r2, [sp, #28]
 8004e5e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004e60:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8004e64:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8004e68:	6992      	ldr	r2, [r2, #24]
 8004e6a:	9206      	str	r2, [sp, #24]
 8004e6c:	68e2      	ldr	r2, [r4, #12]
 8004e6e:	9201      	str	r2, [sp, #4]
 8004e70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e72:	9203      	str	r2, [sp, #12]
 8004e74:	6a22      	ldr	r2, [r4, #32]
 8004e76:	69e5      	ldr	r5, [r4, #28]
 8004e78:	68a6      	ldr	r6, [r4, #8]
 8004e7a:	9204      	str	r2, [sp, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80b0 	beq.w	8004fe2 <D64_1CH_HTONS_VOL_HP+0x18e>
 8004e82:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004e86:	4f58      	ldr	r7, [pc, #352]	; (8004fe8 <D64_1CH_HTONS_VOL_HP+0x194>)
 8004e88:	9305      	str	r3, [sp, #20]
 8004e8a:	9102      	str	r1, [sp, #8]
 8004e8c:	f850 2b08 	ldr.w	r2, [r0], #8
 8004e90:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004e94:	ba52      	rev16	r2, r2
 8004e96:	fa93 f993 	rev16.w	r9, r3
 8004e9a:	b2d4      	uxtb	r4, r2
 8004e9c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004ea0:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8004ea4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004ea8:	9901      	ldr	r1, [sp, #4]
 8004eaa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004eae:	0e12      	lsrs	r2, r2, #24
 8004eb0:	44ab      	add	fp, r5
 8004eb2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004eb6:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8004eba:	fa5f f289 	uxtb.w	r2, r9
 8004ebe:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8004ec2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8004ec6:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8004eca:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004ece:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004ed2:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8004ed6:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8004eda:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8004ede:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004ee2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8004ee6:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8004eea:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8004eee:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004ef2:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8004ef6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004efa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004efe:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f06:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004f0a:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8004f0e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004f12:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8004f16:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004f1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8004f1e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8004f22:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004f26:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8004f2a:	4b30      	ldr	r3, [pc, #192]	; (8004fec <D64_1CH_HTONS_VOL_HP+0x198>)
 8004f2c:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004f30:	492f      	ldr	r1, [pc, #188]	; (8004ff0 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8004f32:	fb24 3301 	smlad	r3, r4, r1, r3
 8004f36:	492f      	ldr	r1, [pc, #188]	; (8004ff4 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8004f38:	fb22 3301 	smlad	r3, r2, r1, r3
 8004f3c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8004f40:	fb2e 390a 	smlad	r9, lr, sl, r3
 8004f44:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8004f46:	fb2b 6603 	smlad	r6, fp, r3, r6
 8004f4a:	fb2e 6613 	smladx	r6, lr, r3, r6
 8004f4e:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8004f50:	fb24 6603 	smlad	r6, r4, r3, r6
 8004f54:	fb22 6313 	smladx	r3, r2, r3, r6
 8004f58:	f04f 0a01 	mov.w	sl, #1
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	fb2b fb0a 	smuad	fp, fp, sl
 8004f62:	4b27      	ldr	r3, [pc, #156]	; (8005000 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8004f64:	fb24 ba03 	smlad	sl, r4, r3, fp
 8004f68:	4b26      	ldr	r3, [pc, #152]	; (8005004 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8004f6a:	fb22 a203 	smlad	r2, r2, r3, sl
 8004f6e:	4b26      	ldr	r3, [pc, #152]	; (8005008 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8004f70:	fb2e 2603 	smlad	r6, lr, r3, r2
 8004f74:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8004f78:	eb0a 020c 	add.w	r2, sl, ip
 8004f7c:	9c04      	ldr	r4, [sp, #16]
 8004f7e:	9903      	ldr	r1, [sp, #12]
 8004f80:	eba2 0208 	sub.w	r2, r2, r8
 8004f84:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8004f88:	fba2 2304 	umull	r2, r3, r2, r4
 8004f8c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004f90:	fb04 3309 	mla	r3, r4, r9, r3
 8004f94:	f143 0300 	adc.w	r3, r3, #0
 8004f98:	02da      	lsls	r2, r3, #11
 8004f9a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004f9e:	f04f 0900 	mov.w	r9, #0
 8004fa2:	fbc1 8902 	smlal	r8, r9, r1, r2
 8004fa6:	9902      	ldr	r1, [sp, #8]
 8004fa8:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8004fac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004fb0:	f302 020f 	ssat	r2, #16, r2
 8004fb4:	9b05      	ldr	r3, [sp, #20]
 8004fb6:	f821 2b02 	strh.w	r2, [r1], #2
 8004fba:	4299      	cmp	r1, r3
 8004fbc:	9102      	str	r1, [sp, #8]
 8004fbe:	46d0      	mov	r8, sl
 8004fc0:	f47f af64 	bne.w	8004e8c <D64_1CH_HTONS_VOL_HP+0x38>
 8004fc4:	9a07      	ldr	r2, [sp, #28]
 8004fc6:	9901      	ldr	r1, [sp, #4]
 8004fc8:	60d1      	str	r1, [r2, #12]
 8004fca:	9906      	ldr	r1, [sp, #24]
 8004fcc:	6096      	str	r6, [r2, #8]
 8004fce:	2000      	movs	r0, #0
 8004fd0:	61d5      	str	r5, [r2, #28]
 8004fd2:	f8c2 c010 	str.w	ip, [r2, #16]
 8004fd6:	f8c2 a014 	str.w	sl, [r2, #20]
 8004fda:	6191      	str	r1, [r2, #24]
 8004fdc:	b009      	add	sp, #36	; 0x24
 8004fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe2:	46c2      	mov	sl, r8
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	e7ee      	b.n	8004fc6 <D64_1CH_HTONS_VOL_HP+0x172>
 8004fe8:	20000000 	.word	0x20000000
 8004fec:	001c0015 	.word	0x001c0015
 8004ff0:	000f000a 	.word	0x000f000a
 8004ff4:	00060003 	.word	0x00060003
 8004ff8:	0024002a 	.word	0x0024002a
 8004ffc:	002e0030 	.word	0x002e0030
 8005000:	00030006 	.word	0x00030006
 8005004:	000a000f 	.word	0x000a000f
 8005008:	0015001c 	.word	0x0015001c

0800500c <D80_1CH_HTONS_VOL_HP>:
 800500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	4613      	mov	r3, r2
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	4686      	mov	lr, r0
 8005016:	6918      	ldr	r0, [r3, #16]
 8005018:	9000      	str	r0, [sp, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	461c      	mov	r4, r3
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	6983      	ldr	r3, [r0, #24]
 8005024:	9306      	str	r3, [sp, #24]
 8005026:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800502a:	69c3      	ldr	r3, [r0, #28]
 800502c:	68c0      	ldr	r0, [r0, #12]
 800502e:	9207      	str	r2, [sp, #28]
 8005030:	9001      	str	r0, [sp, #4]
 8005032:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005034:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005036:	9003      	str	r0, [sp, #12]
 8005038:	6a20      	ldr	r0, [r4, #32]
 800503a:	9004      	str	r0, [sp, #16]
 800503c:	2a00      	cmp	r2, #0
 800503e:	f000 80d2 	beq.w	80051e6 <D80_1CH_HTONS_VOL_HP+0x1da>
 8005042:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005046:	4869      	ldr	r0, [pc, #420]	; (80051ec <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8005048:	9205      	str	r2, [sp, #20]
 800504a:	461c      	mov	r4, r3
 800504c:	f8de 5000 	ldr.w	r5, [lr]
 8005050:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005054:	f8de 3008 	ldr.w	r3, [lr, #8]
 8005058:	f10e 0e0a 	add.w	lr, lr, #10
 800505c:	ba6d      	rev16	r5, r5
 800505e:	ba52      	rev16	r2, r2
 8005060:	fa93 fb93 	rev16.w	fp, r3
 8005064:	b2ee      	uxtb	r6, r5
 8005066:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800506a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800506e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005072:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8005076:	eb04 0a07 	add.w	sl, r4, r7
 800507a:	0e2d      	lsrs	r5, r5, #24
 800507c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8005080:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8005084:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8005088:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800508c:	b2d5      	uxtb	r5, r2
 800508e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8005092:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8005096:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800509a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800509e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80050a2:	0e12      	lsrs	r2, r2, #24
 80050a4:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 80050a8:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 80050ac:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80050b0:	fa5f f48b 	uxtb.w	r4, fp
 80050b4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80050b8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80050bc:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80050c0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80050c4:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 80050c8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80050cc:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80050d0:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 80050d4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80050d8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80050dc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80050e0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80050e4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80050e8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80050ec:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80050f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f4:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80050f8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80050fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005100:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8005104:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8005108:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800510c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005110:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8005114:	4d36      	ldr	r5, [pc, #216]	; (80051f0 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8005116:	9f01      	ldr	r7, [sp, #4]
 8005118:	fb23 7505 	smlad	r5, r3, r5, r7
 800511c:	4f35      	ldr	r7, [pc, #212]	; (80051f4 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800511e:	fb29 5507 	smlad	r5, r9, r7, r5
 8005122:	4f35      	ldr	r7, [pc, #212]	; (80051f8 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8005124:	fb28 5507 	smlad	r5, r8, r7, r5
 8005128:	4f34      	ldr	r7, [pc, #208]	; (80051fc <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800512a:	fb22 5507 	smlad	r5, r2, r7, r5
 800512e:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005132:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8005136:	4d32      	ldr	r5, [pc, #200]	; (8005200 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8005138:	fb23 cc05 	smlad	ip, r3, r5, ip
 800513c:	4d31      	ldr	r5, [pc, #196]	; (8005204 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800513e:	fb29 cc05 	smlad	ip, r9, r5, ip
 8005142:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8005146:	fb28 c505 	smlad	r5, r8, r5, ip
 800514a:	4f2f      	ldr	r7, [pc, #188]	; (8005208 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800514c:	fb22 5507 	smlad	r5, r2, r7, r5
 8005150:	4f2e      	ldr	r7, [pc, #184]	; (800520c <D80_1CH_HTONS_VOL_HP+0x200>)
 8005152:	fb26 5507 	smlad	r5, r6, r7, r5
 8005156:	f04f 0a01 	mov.w	sl, #1
 800515a:	9501      	str	r5, [sp, #4]
 800515c:	fb23 fa0a 	smuad	sl, r3, sl
 8005160:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <D80_1CH_HTONS_VOL_HP+0x204>)
 8005162:	fb29 a903 	smlad	r9, r9, r3, sl
 8005166:	4d2b      	ldr	r5, [pc, #172]	; (8005214 <D80_1CH_HTONS_VOL_HP+0x208>)
 8005168:	fb28 9805 	smlad	r8, r8, r5, r9
 800516c:	4d2a      	ldr	r5, [pc, #168]	; (8005218 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800516e:	fb22 8205 	smlad	r2, r2, r5, r8
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <D80_1CH_HTONS_VOL_HP+0x210>)
 8005174:	fb26 2c03 	smlad	ip, r6, r3, r2
 8005178:	9b00      	ldr	r3, [sp, #0]
 800517a:	9d04      	ldr	r5, [sp, #16]
 800517c:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8005180:	4453      	add	r3, sl
 8005182:	461a      	mov	r2, r3
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	f8cd a008 	str.w	sl, [sp, #8]
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	17d7      	asrs	r7, r2, #31
 800518e:	fba2 2305 	umull	r2, r3, r2, r5
 8005192:	fb05 3307 	mla	r3, r5, r7, r3
 8005196:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800519a:	f143 0300 	adc.w	r3, r3, #0
 800519e:	9d03      	ldr	r5, [sp, #12]
 80051a0:	029a      	lsls	r2, r3, #10
 80051a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80051a6:	2700      	movs	r7, #0
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fbc5 6702 	smlal	r6, r7, r5, r2
 80051ae:	10ba      	asrs	r2, r7, #2
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	f302 020f 	ssat	r2, #16, r2
 80051b6:	9b05      	ldr	r3, [sp, #20]
 80051b8:	f821 2b02 	strh.w	r2, [r1], #2
 80051bc:	4299      	cmp	r1, r3
 80051be:	f47f af45 	bne.w	800504c <D80_1CH_HTONS_VOL_HP+0x40>
 80051c2:	4623      	mov	r3, r4
 80051c4:	9907      	ldr	r1, [sp, #28]
 80051c6:	9801      	ldr	r0, [sp, #4]
 80051c8:	60c8      	str	r0, [r1, #12]
 80051ca:	9a00      	ldr	r2, [sp, #0]
 80051cc:	f8c1 c008 	str.w	ip, [r1, #8]
 80051d0:	4608      	mov	r0, r1
 80051d2:	61cb      	str	r3, [r1, #28]
 80051d4:	610a      	str	r2, [r1, #16]
 80051d6:	f8c1 a014 	str.w	sl, [r1, #20]
 80051da:	9906      	ldr	r1, [sp, #24]
 80051dc:	6181      	str	r1, [r0, #24]
 80051de:	2000      	movs	r0, #0
 80051e0:	b009      	add	sp, #36	; 0x24
 80051e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e6:	f8dd a008 	ldr.w	sl, [sp, #8]
 80051ea:	e7eb      	b.n	80051c4 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80051ec:	20000000 	.word	0x20000000
 80051f0:	002d0024 	.word	0x002d0024
 80051f4:	001c0015 	.word	0x001c0015
 80051f8:	000f000a 	.word	0x000f000a
 80051fc:	00060003 	.word	0x00060003
 8005200:	0037003f 	.word	0x0037003f
 8005204:	00450049 	.word	0x00450049
 8005208:	00490045 	.word	0x00490045
 800520c:	003f0037 	.word	0x003f0037
 8005210:	00030006 	.word	0x00030006
 8005214:	000a000f 	.word	0x000a000f
 8005218:	0015001c 	.word	0x0015001c
 800521c:	0024002d 	.word	0x0024002d

08005220 <D128_1CH_HTONS_VOL_HP>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	b093      	sub	sp, #76	; 0x4c
 8005226:	4614      	mov	r4, r2
 8005228:	9211      	str	r2, [sp, #68]	; 0x44
 800522a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800522c:	6912      	ldr	r2, [r2, #16]
 800522e:	9203      	str	r2, [sp, #12]
 8005230:	4622      	mov	r2, r4
 8005232:	4615      	mov	r5, r2
 8005234:	6964      	ldr	r4, [r4, #20]
 8005236:	9406      	str	r4, [sp, #24]
 8005238:	4614      	mov	r4, r2
 800523a:	6992      	ldr	r2, [r2, #24]
 800523c:	9210      	str	r2, [sp, #64]	; 0x40
 800523e:	68ea      	ldr	r2, [r5, #12]
 8005240:	9204      	str	r2, [sp, #16]
 8005242:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005244:	69e6      	ldr	r6, [r4, #28]
 8005246:	920d      	str	r2, [sp, #52]	; 0x34
 8005248:	68a4      	ldr	r4, [r4, #8]
 800524a:	6a2a      	ldr	r2, [r5, #32]
 800524c:	9405      	str	r4, [sp, #20]
 800524e:	920e      	str	r2, [sp, #56]	; 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8145 	beq.w	80054e0 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8005256:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800525a:	930f      	str	r3, [sp, #60]	; 0x3c
 800525c:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800553c <D128_1CH_HTONS_VOL_HP+0x31c>
 8005260:	9107      	str	r1, [sp, #28]
 8005262:	f100 0310 	add.w	r3, r0, #16
 8005266:	4699      	mov	r9, r3
 8005268:	f1a9 0110 	sub.w	r1, r9, #16
 800526c:	c90e      	ldmia	r1, {r1, r2, r3}
 800526e:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8005272:	ba49      	rev16	r1, r1
 8005274:	ba52      	rev16	r2, r2
 8005276:	ba5b      	rev16	r3, r3
 8005278:	fa90 fa90 	rev16.w	sl, r0
 800527c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8005280:	b2cc      	uxtb	r4, r1
 8005282:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8005286:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800528a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800528e:	0e09      	lsrs	r1, r1, #24
 8005290:	4426      	add	r6, r4
 8005292:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005296:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800529a:	b2d0      	uxtb	r0, r2
 800529c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80052a0:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 80052a4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80052a8:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80052ac:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80052b0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80052b4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80052b8:	0e12      	lsrs	r2, r2, #24
 80052ba:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80052be:	9701      	str	r7, [sp, #4]
 80052c0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80052c4:	4627      	mov	r7, r4
 80052c6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80052ca:	9702      	str	r7, [sp, #8]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80052d2:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 80052d6:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 80052da:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80052de:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80052e2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80052e6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80052ea:	0e1b      	lsrs	r3, r3, #24
 80052ec:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80052f0:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80052f4:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80052f8:	fa5f f38a 	uxtb.w	r3, sl
 80052fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005300:	960a      	str	r6, [sp, #40]	; 0x28
 8005302:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005306:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800530a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800530e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005312:	950b      	str	r5, [sp, #44]	; 0x2c
 8005314:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005318:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800531c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005320:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8005324:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8005328:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800532c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005330:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005334:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8005338:	9308      	str	r3, [sp, #32]
 800533a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005344:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005348:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800534c:	9b02      	ldr	r3, [sp, #8]
 800534e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005352:	9302      	str	r3, [sp, #8]
 8005354:	9b08      	ldr	r3, [sp, #32]
 8005356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800535a:	9308      	str	r3, [sp, #32]
 800535c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800535e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005362:	950c      	str	r5, [sp, #48]	; 0x30
 8005364:	461d      	mov	r5, r3
 8005366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005368:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800536c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005370:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8005374:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	9b02      	ldr	r3, [sp, #8]
 800537c:	9202      	str	r2, [sp, #8]
 800537e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005380:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005382:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005386:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800538a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800538e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005392:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005396:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800539a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800539e:	9b08      	ldr	r3, [sp, #32]
 80053a0:	9f01      	ldr	r7, [sp, #4]
 80053a2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80053a6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80053aa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80053ae:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80053b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80053b6:	46be      	mov	lr, r7
 80053b8:	0a96      	lsrs	r6, r2, #10
 80053ba:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80053be:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80053c2:	4f49      	ldr	r7, [pc, #292]	; (80054e8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80053c4:	9a04      	ldr	r2, [sp, #16]
 80053c6:	fb2e 2e07 	smlad	lr, lr, r7, r2
 80053ca:	4a48      	ldr	r2, [pc, #288]	; (80054ec <D128_1CH_HTONS_VOL_HP+0x2cc>)
 80053cc:	fb2a ee02 	smlad	lr, sl, r2, lr
 80053d0:	4a47      	ldr	r2, [pc, #284]	; (80054f0 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 80053d2:	fb21 ee02 	smlad	lr, r1, r2, lr
 80053d6:	4a47      	ldr	r2, [pc, #284]	; (80054f4 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 80053d8:	fb24 ee02 	smlad	lr, r4, r2, lr
 80053dc:	4a46      	ldr	r2, [pc, #280]	; (80054f8 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80053de:	9f02      	ldr	r7, [sp, #8]
 80053e0:	fb27 ee02 	smlad	lr, r7, r2, lr
 80053e4:	4a45      	ldr	r2, [pc, #276]	; (80054fc <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80053e6:	fb20 ee02 	smlad	lr, r0, r2, lr
 80053ea:	4a45      	ldr	r2, [pc, #276]	; (8005500 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80053ec:	fb23 e702 	smlad	r7, r3, r2, lr
 80053f0:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80053f4:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80053f8:	9f01      	ldr	r7, [sp, #4]
 80053fa:	4a42      	ldr	r2, [pc, #264]	; (8005504 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80053fc:	46bc      	mov	ip, r7
 80053fe:	9f05      	ldr	r7, [sp, #20]
 8005400:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8005404:	4a40      	ldr	r2, [pc, #256]	; (8005508 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8005406:	fb2a cc02 	smlad	ip, sl, r2, ip
 800540a:	4f40      	ldr	r7, [pc, #256]	; (800550c <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800540c:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005410:	4f3f      	ldr	r7, [pc, #252]	; (8005510 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8005412:	fb24 cc07 	smlad	ip, r4, r7, ip
 8005416:	4f3f      	ldr	r7, [pc, #252]	; (8005514 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8005418:	9a02      	ldr	r2, [sp, #8]
 800541a:	fb22 cc07 	smlad	ip, r2, r7, ip
 800541e:	4f3e      	ldr	r7, [pc, #248]	; (8005518 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8005420:	fb20 cc07 	smlad	ip, r0, r7, ip
 8005424:	4f3d      	ldr	r7, [pc, #244]	; (800551c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8005426:	fb23 c707 	smlad	r7, r3, r7, ip
 800542a:	f8df c114 	ldr.w	ip, [pc, #276]	; 8005540 <D128_1CH_HTONS_VOL_HP+0x320>
 800542e:	fb25 720c 	smlad	r2, r5, ip, r7
 8005432:	f04f 0b01 	mov.w	fp, #1
 8005436:	9204      	str	r2, [sp, #16]
 8005438:	9f01      	ldr	r7, [sp, #4]
 800543a:	fb27 fb0b 	smuad	fp, r7, fp
 800543e:	4f38      	ldr	r7, [pc, #224]	; (8005520 <D128_1CH_HTONS_VOL_HP+0x300>)
 8005440:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005444:	4f37      	ldr	r7, [pc, #220]	; (8005524 <D128_1CH_HTONS_VOL_HP+0x304>)
 8005446:	fb21 aa07 	smlad	sl, r1, r7, sl
 800544a:	4f37      	ldr	r7, [pc, #220]	; (8005528 <D128_1CH_HTONS_VOL_HP+0x308>)
 800544c:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005450:	4f36      	ldr	r7, [pc, #216]	; (800552c <D128_1CH_HTONS_VOL_HP+0x30c>)
 8005452:	9a02      	ldr	r2, [sp, #8]
 8005454:	fb22 a707 	smlad	r7, r2, r7, sl
 8005458:	4a35      	ldr	r2, [pc, #212]	; (8005530 <D128_1CH_HTONS_VOL_HP+0x310>)
 800545a:	fb20 7702 	smlad	r7, r0, r2, r7
 800545e:	4a35      	ldr	r2, [pc, #212]	; (8005534 <D128_1CH_HTONS_VOL_HP+0x314>)
 8005460:	fb23 7702 	smlad	r7, r3, r2, r7
 8005464:	4b34      	ldr	r3, [pc, #208]	; (8005538 <D128_1CH_HTONS_VOL_HP+0x318>)
 8005466:	fb25 7303 	smlad	r3, r5, r3, r7
 800546a:	9305      	str	r3, [sp, #20]
 800546c:	9b03      	ldr	r3, [sp, #12]
 800546e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005470:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8005474:	4473      	add	r3, lr
 8005476:	461a      	mov	r2, r3
 8005478:	9b06      	ldr	r3, [sp, #24]
 800547a:	f8cd e018 	str.w	lr, [sp, #24]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	17d1      	asrs	r1, r2, #31
 8005482:	fba2 2304 	umull	r2, r3, r2, r4
 8005486:	fb04 3301 	mla	r3, r4, r1, r3
 800548a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800548e:	f143 0300 	adc.w	r3, r3, #0
 8005492:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800549a:	2100      	movs	r1, #0
 800549c:	fbc4 0102 	smlal	r0, r1, r4, r2
 80054a0:	108a      	asrs	r2, r1, #2
 80054a2:	9907      	ldr	r1, [sp, #28]
 80054a4:	f302 020f 	ssat	r2, #16, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	f821 2b02 	strh.w	r2, [r1], #2
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054b2:	9107      	str	r1, [sp, #28]
 80054b4:	4299      	cmp	r1, r3
 80054b6:	f109 0910 	add.w	r9, r9, #16
 80054ba:	f47f aed5 	bne.w	8005268 <D128_1CH_HTONS_VOL_HP+0x48>
 80054be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80054c0:	9905      	ldr	r1, [sp, #20]
 80054c2:	6091      	str	r1, [r2, #8]
 80054c4:	9904      	ldr	r1, [sp, #16]
 80054c6:	60d1      	str	r1, [r2, #12]
 80054c8:	4613      	mov	r3, r2
 80054ca:	61d6      	str	r6, [r2, #28]
 80054cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80054ce:	9a03      	ldr	r2, [sp, #12]
 80054d0:	611a      	str	r2, [r3, #16]
 80054d2:	2000      	movs	r0, #0
 80054d4:	f8c3 e014 	str.w	lr, [r3, #20]
 80054d8:	6199      	str	r1, [r3, #24]
 80054da:	b013      	add	sp, #76	; 0x4c
 80054dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e0:	f8dd e018 	ldr.w	lr, [sp, #24]
 80054e4:	e7eb      	b.n	80054be <D128_1CH_HTONS_VOL_HP+0x29e>
 80054e6:	bf00      	nop
 80054e8:	00780069 	.word	0x00780069
 80054ec:	005b004e 	.word	0x005b004e
 80054f0:	00420037 	.word	0x00420037
 80054f4:	002d0024 	.word	0x002d0024
 80054f8:	001c0015 	.word	0x001c0015
 80054fc:	000f000a 	.word	0x000f000a
 8005500:	00060003 	.word	0x00060003
 8005504:	00880096 	.word	0x00880096
 8005508:	00a200ac 	.word	0x00a200ac
 800550c:	00b400ba 	.word	0x00b400ba
 8005510:	00be00c0 	.word	0x00be00c0
 8005514:	00c000be 	.word	0x00c000be
 8005518:	00ba00b4 	.word	0x00ba00b4
 800551c:	00ac00a2 	.word	0x00ac00a2
 8005520:	00030006 	.word	0x00030006
 8005524:	000a000f 	.word	0x000a000f
 8005528:	0015001c 	.word	0x0015001c
 800552c:	0024002d 	.word	0x0024002d
 8005530:	00370042 	.word	0x00370042
 8005534:	004e005b 	.word	0x004e005b
 8005538:	00690078 	.word	0x00690078
 800553c:	20000000 	.word	0x20000000
 8005540:	00960088 	.word	0x00960088

08005544 <PDM_Filter_Init>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	2240      	movs	r2, #64	; 0x40
 8005548:	4604      	mov	r4, r0
 800554a:	2100      	movs	r1, #0
 800554c:	300c      	adds	r0, #12
 800554e:	f000 f9dd 	bl	800590c <memset>
 8005552:	493b      	ldr	r1, [pc, #236]	; (8005640 <PDM_Filter_Init+0xfc>)
 8005554:	483b      	ldr	r0, [pc, #236]	; (8005644 <PDM_Filter_Init+0x100>)
 8005556:	f000 f971 	bl	800583c <CRC_Lock>
 800555a:	8822      	ldrh	r2, [r4, #0]
 800555c:	8963      	ldrh	r3, [r4, #10]
 800555e:	4938      	ldr	r1, [pc, #224]	; (8005640 <PDM_Filter_Init+0xfc>)
 8005560:	8925      	ldrh	r5, [r4, #8]
 8005562:	86a3      	strh	r3, [r4, #52]	; 0x34
 8005564:	2801      	cmp	r0, #1
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	bf18      	it	ne
 800556c:	2100      	movne	r1, #0
 800556e:	2a01      	cmp	r2, #1
 8005570:	6461      	str	r1, [r4, #68]	; 0x44
 8005572:	86e5      	strh	r5, [r4, #54]	; 0x36
 8005574:	61a3      	str	r3, [r4, #24]
 8005576:	6123      	str	r3, [r4, #16]
 8005578:	6163      	str	r3, [r4, #20]
 800557a:	60e3      	str	r3, [r4, #12]
 800557c:	6263      	str	r3, [r4, #36]	; 0x24
 800557e:	61e3      	str	r3, [r4, #28]
 8005580:	6223      	str	r3, [r4, #32]
 8005582:	6423      	str	r3, [r4, #64]	; 0x40
 8005584:	d918      	bls.n	80055b8 <PDM_Filter_Init+0x74>
 8005586:	2003      	movs	r0, #3
 8005588:	2302      	movs	r3, #2
 800558a:	8862      	ldrh	r2, [r4, #2]
 800558c:	2a01      	cmp	r2, #1
 800558e:	d91d      	bls.n	80055cc <PDM_Filter_Init+0x88>
 8005590:	2140      	movs	r1, #64	; 0x40
 8005592:	2300      	movs	r3, #0
 8005594:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005596:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	bf04      	itt	eq
 800559e:	6421      	streq	r1, [r4, #64]	; 0x40
 80055a0:	460b      	moveq	r3, r1
 80055a2:	b11a      	cbz	r2, 80055ac <PDM_Filter_Init+0x68>
 80055a4:	f043 0310 	orr.w	r3, r3, #16
 80055a8:	6423      	str	r3, [r4, #64]	; 0x40
 80055aa:	62e2      	str	r2, [r4, #44]	; 0x2c
 80055ac:	2200      	movs	r2, #0
 80055ae:	8722      	strh	r2, [r4, #56]	; 0x38
 80055b0:	b908      	cbnz	r0, 80055b6 <PDM_Filter_Init+0x72>
 80055b2:	3380      	adds	r3, #128	; 0x80
 80055b4:	6423      	str	r3, [r4, #64]	; 0x40
 80055b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b8:	4d23      	ldr	r5, [pc, #140]	; (8005648 <PDM_Filter_Init+0x104>)
 80055ba:	d010      	beq.n	80055de <PDM_Filter_Init+0x9a>
 80055bc:	782a      	ldrb	r2, [r5, #0]
 80055be:	2a01      	cmp	r2, #1
 80055c0:	d027      	beq.n	8005612 <PDM_Filter_Init+0xce>
 80055c2:	8862      	ldrh	r2, [r4, #2]
 80055c4:	2a01      	cmp	r2, #1
 80055c6:	f04f 0001 	mov.w	r0, #1
 80055ca:	d8e1      	bhi.n	8005590 <PDM_Filter_Init+0x4c>
 80055cc:	d001      	beq.n	80055d2 <PDM_Filter_Init+0x8e>
 80055ce:	4618      	mov	r0, r3
 80055d0:	e7de      	b.n	8005590 <PDM_Filter_Init+0x4c>
 80055d2:	2220      	movs	r2, #32
 80055d4:	4618      	mov	r0, r3
 80055d6:	6422      	str	r2, [r4, #64]	; 0x40
 80055d8:	4613      	mov	r3, r2
 80055da:	2160      	movs	r1, #96	; 0x60
 80055dc:	e7da      	b.n	8005594 <PDM_Filter_Init+0x50>
 80055de:	7829      	ldrb	r1, [r5, #0]
 80055e0:	2900      	cmp	r1, #0
 80055e2:	d1ee      	bne.n	80055c2 <PDM_Filter_Init+0x7e>
 80055e4:	4919      	ldr	r1, [pc, #100]	; (800564c <PDM_Filter_Init+0x108>)
 80055e6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8005654 <PDM_Filter_Init+0x110>
 80055ea:	4f19      	ldr	r7, [pc, #100]	; (8005650 <PDM_Filter_Init+0x10c>)
 80055ec:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80055f0:	684a      	ldr	r2, [r1, #4]
 80055f2:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80055f6:	ea02 0007 	and.w	r0, r2, r7
 80055fa:	4303      	orrs	r3, r0
 80055fc:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005600:	4413      	add	r3, r2
 8005602:	f841 3f04 	str.w	r3, [r1, #4]!
 8005606:	428e      	cmp	r6, r1
 8005608:	d1f2      	bne.n	80055f0 <PDM_Filter_Init+0xac>
 800560a:	2001      	movs	r0, #1
 800560c:	7028      	strb	r0, [r5, #0]
 800560e:	2300      	movs	r3, #0
 8005610:	e7bb      	b.n	800558a <PDM_Filter_Init+0x46>
 8005612:	490e      	ldr	r1, [pc, #56]	; (800564c <PDM_Filter_Init+0x108>)
 8005614:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005654 <PDM_Filter_Init+0x110>
 8005618:	4f0d      	ldr	r7, [pc, #52]	; (8005650 <PDM_Filter_Init+0x10c>)
 800561a:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800561e:	684a      	ldr	r2, [r1, #4]
 8005620:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005624:	ea02 0007 	and.w	r0, r2, r7
 8005628:	4303      	orrs	r3, r0
 800562a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800562e:	4413      	add	r3, r2
 8005630:	f841 3f04 	str.w	r3, [r1, #4]!
 8005634:	428e      	cmp	r6, r1
 8005636:	d1f2      	bne.n	800561e <PDM_Filter_Init+0xda>
 8005638:	2300      	movs	r3, #0
 800563a:	702b      	strb	r3, [r5, #0]
 800563c:	e7c1      	b.n	80055c2 <PDM_Filter_Init+0x7e>
 800563e:	bf00      	nop
 8005640:	b5e8b5cd 	.word	0xb5e8b5cd
 8005644:	f407a5c2 	.word	0xf407a5c2
 8005648:	20000490 	.word	0x20000490
 800564c:	1ffffffc 	.word	0x1ffffffc
 8005650:	000ffc00 	.word	0x000ffc00
 8005654:	3ff00000 	.word	0x3ff00000

08005658 <PDM_Filter_setConfig>:
 8005658:	4b66      	ldr	r3, [pc, #408]	; (80057f4 <PDM_Filter_setConfig+0x19c>)
 800565a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <PDM_Filter_setConfig+0xc>
 8005660:	2004      	movs	r0, #4
 8005662:	4770      	bx	lr
 8005664:	b530      	push	{r4, r5, lr}
 8005666:	880a      	ldrh	r2, [r1, #0]
 8005668:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800566a:	ed2d 8b04 	vpush	{d8-d9}
 800566e:	4604      	mov	r4, r0
 8005670:	460d      	mov	r5, r1
 8005672:	1e51      	subs	r1, r2, #1
 8005674:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8005678:	2906      	cmp	r1, #6
 800567a:	b083      	sub	sp, #12
 800567c:	6420      	str	r0, [r4, #64]	; 0x40
 800567e:	d91a      	bls.n	80056b6 <PDM_Filter_setConfig+0x5e>
 8005680:	2008      	movs	r0, #8
 8005682:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005686:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800568a:	4299      	cmp	r1, r3
 800568c:	d07e      	beq.n	800578c <PDM_Filter_setConfig+0x134>
 800568e:	f113 0f0c 	cmn.w	r3, #12
 8005692:	da2a      	bge.n	80056ea <PDM_Filter_setConfig+0x92>
 8005694:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8005698:	3040      	adds	r0, #64	; 0x40
 800569a:	80ab      	strh	r3, [r5, #4]
 800569c:	8622      	strh	r2, [r4, #48]	; 0x30
 800569e:	886b      	ldrh	r3, [r5, #2]
 80056a0:	8663      	strh	r3, [r4, #50]	; 0x32
 80056a2:	b920      	cbnz	r0, 80056ae <PDM_Filter_setConfig+0x56>
 80056a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056aa:	6423      	str	r3, [r4, #64]	; 0x40
 80056ac:	2000      	movs	r0, #0
 80056ae:	b003      	add	sp, #12
 80056b0:	ecbd 8b04 	vpop	{d8-d9}
 80056b4:	bd30      	pop	{r4, r5, pc}
 80056b6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80056b8:	4291      	cmp	r1, r2
 80056ba:	d06c      	beq.n	8005796 <PDM_Filter_setConfig+0x13e>
 80056bc:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f003 0170 	and.w	r1, r3, #112	; 0x70
 80056ca:	6423      	str	r3, [r4, #64]	; 0x40
 80056cc:	2970      	cmp	r1, #112	; 0x70
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80056d6:	d066      	beq.n	80057a6 <PDM_Filter_setConfig+0x14e>
 80056d8:	2b06      	cmp	r3, #6
 80056da:	f200 8089 	bhi.w	80057f0 <PDM_Filter_setConfig+0x198>
 80056de:	e8df f003 	tbb	[pc, r3]
 80056e2:	4f52      	.short	0x4f52
 80056e4:	3d43494c 	.word	0x3d43494c
 80056e8:	46          	.byte	0x46
 80056e9:	00          	.byte	0x00
 80056ea:	2b33      	cmp	r3, #51	; 0x33
 80056ec:	dc32      	bgt.n	8005754 <PDM_Filter_setConfig+0xfc>
 80056ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80056f0:	f002 020f 	and.w	r2, r2, #15
 80056f4:	3a01      	subs	r2, #1
 80056f6:	2a06      	cmp	r2, #6
 80056f8:	d872      	bhi.n	80057e0 <PDM_Filter_setConfig+0x188>
 80056fa:	493f      	ldr	r1, [pc, #252]	; (80057f8 <PDM_Filter_setConfig+0x1a0>)
 80056fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005700:	ed92 9a00 	vldr	s18, [r2]
 8005704:	ed92 8a07 	vldr	s16, [r2, #28]
 8005708:	9001      	str	r0, [sp, #4]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005712:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8005716:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800571a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800571e:	f000 fd51 	bl	80061c4 <powf>
 8005722:	eddf 0a36 	vldr	s1, [pc, #216]	; 80057fc <PDM_Filter_setConfig+0x1a4>
 8005726:	eef0 8a40 	vmov.f32	s17, s0
 800572a:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800572e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005732:	f000 fd47 	bl	80061c4 <powf>
 8005736:	ee28 8a28 	vmul.f32	s16, s16, s17
 800573a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800573e:	f000 fd1b 	bl	8006178 <roundf>
 8005742:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8005746:	88ab      	ldrh	r3, [r5, #4]
 8005748:	882a      	ldrh	r2, [r5, #0]
 800574a:	9801      	ldr	r0, [sp, #4]
 800574c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8005750:	8723      	strh	r3, [r4, #56]	; 0x38
 8005752:	e7a3      	b.n	800569c <PDM_Filter_setConfig+0x44>
 8005754:	2333      	movs	r3, #51	; 0x33
 8005756:	3040      	adds	r0, #64	; 0x40
 8005758:	80ab      	strh	r3, [r5, #4]
 800575a:	e79f      	b.n	800569c <PDM_Filter_setConfig+0x44>
 800575c:	4b28      	ldr	r3, [pc, #160]	; (8005800 <PDM_Filter_setConfig+0x1a8>)
 800575e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005760:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005764:	2000      	movs	r0, #0
 8005766:	e792      	b.n	800568e <PDM_Filter_setConfig+0x36>
 8005768:	4b26      	ldr	r3, [pc, #152]	; (8005804 <PDM_Filter_setConfig+0x1ac>)
 800576a:	64a3      	str	r3, [r4, #72]	; 0x48
 800576c:	e7f8      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 800576e:	4b26      	ldr	r3, [pc, #152]	; (8005808 <PDM_Filter_setConfig+0x1b0>)
 8005770:	64a3      	str	r3, [r4, #72]	; 0x48
 8005772:	e7f5      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 8005774:	4b25      	ldr	r3, [pc, #148]	; (800580c <PDM_Filter_setConfig+0x1b4>)
 8005776:	64a3      	str	r3, [r4, #72]	; 0x48
 8005778:	e7f2      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 800577a:	4b25      	ldr	r3, [pc, #148]	; (8005810 <PDM_Filter_setConfig+0x1b8>)
 800577c:	64a3      	str	r3, [r4, #72]	; 0x48
 800577e:	e7ef      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 8005780:	4b24      	ldr	r3, [pc, #144]	; (8005814 <PDM_Filter_setConfig+0x1bc>)
 8005782:	64a3      	str	r3, [r4, #72]	; 0x48
 8005784:	e7ec      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <PDM_Filter_setConfig+0x1c0>)
 8005788:	64a3      	str	r3, [r4, #72]	; 0x48
 800578a:	e7e9      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 800578c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800578e:	4291      	cmp	r1, r2
 8005790:	f47f af7d 	bne.w	800568e <PDM_Filter_setConfig+0x36>
 8005794:	e783      	b.n	800569e <PDM_Filter_setConfig+0x46>
 8005796:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800579a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800579e:	4299      	cmp	r1, r3
 80057a0:	d023      	beq.n	80057ea <PDM_Filter_setConfig+0x192>
 80057a2:	2000      	movs	r0, #0
 80057a4:	e773      	b.n	800568e <PDM_Filter_setConfig+0x36>
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d822      	bhi.n	80057f0 <PDM_Filter_setConfig+0x198>
 80057aa:	e8df f003 	tbb	[pc, r3]
 80057ae:	1316      	.short	0x1316
 80057b0:	070a0d10 	.word	0x070a0d10
 80057b4:	04          	.byte	0x04
 80057b5:	00          	.byte	0x00
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <PDM_Filter_setConfig+0x1c4>)
 80057b8:	64a3      	str	r3, [r4, #72]	; 0x48
 80057ba:	e7d1      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 80057bc:	4b18      	ldr	r3, [pc, #96]	; (8005820 <PDM_Filter_setConfig+0x1c8>)
 80057be:	64a3      	str	r3, [r4, #72]	; 0x48
 80057c0:	e7ce      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 80057c2:	4b18      	ldr	r3, [pc, #96]	; (8005824 <PDM_Filter_setConfig+0x1cc>)
 80057c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80057c6:	e7cb      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 80057c8:	4b17      	ldr	r3, [pc, #92]	; (8005828 <PDM_Filter_setConfig+0x1d0>)
 80057ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80057cc:	e7c8      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 80057ce:	4b17      	ldr	r3, [pc, #92]	; (800582c <PDM_Filter_setConfig+0x1d4>)
 80057d0:	64a3      	str	r3, [r4, #72]	; 0x48
 80057d2:	e7c5      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 80057d4:	4b16      	ldr	r3, [pc, #88]	; (8005830 <PDM_Filter_setConfig+0x1d8>)
 80057d6:	64a3      	str	r3, [r4, #72]	; 0x48
 80057d8:	e7c2      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <PDM_Filter_setConfig+0x1dc>)
 80057dc:	64a3      	str	r3, [r4, #72]	; 0x48
 80057de:	e7bf      	b.n	8005760 <PDM_Filter_setConfig+0x108>
 80057e0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8005838 <PDM_Filter_setConfig+0x1e0>
 80057e4:	eeb0 9a48 	vmov.f32	s18, s16
 80057e8:	e78e      	b.n	8005708 <PDM_Filter_setConfig+0xb0>
 80057ea:	886b      	ldrh	r3, [r5, #2]
 80057ec:	8663      	strh	r3, [r4, #50]	; 0x32
 80057ee:	e759      	b.n	80056a4 <PDM_Filter_setConfig+0x4c>
 80057f0:	2000      	movs	r0, #0
 80057f2:	e746      	b.n	8005682 <PDM_Filter_setConfig+0x2a>
 80057f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80057f8:	08006a78 	.word	0x08006a78
 80057fc:	42000000 	.word	0x42000000
 8005800:	08003bc5 	.word	0x08003bc5
 8005804:	08003aa5 	.word	0x08003aa5
 8005808:	08003d55 	.word	0x08003d55
 800580c:	08004599 	.word	0x08004599
 8005810:	080042f9 	.word	0x080042f9
 8005814:	080040d9 	.word	0x080040d9
 8005818:	08003eed 	.word	0x08003eed
 800581c:	08004ba5 	.word	0x08004ba5
 8005820:	08004a6d 	.word	0x08004a6d
 8005824:	08004989 	.word	0x08004989
 8005828:	08005221 	.word	0x08005221
 800582c:	0800500d 	.word	0x0800500d
 8005830:	08004e55 	.word	0x08004e55
 8005834:	08004ce9 	.word	0x08004ce9
 8005838:	00000000 	.word	0x00000000

0800583c <CRC_Lock>:
 800583c:	4a17      	ldr	r2, [pc, #92]	; (800589c <CRC_Lock+0x60>)
 800583e:	6813      	ldr	r3, [r2, #0]
 8005840:	b410      	push	{r4}
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	4c16      	ldr	r4, [pc, #88]	; (80058a0 <CRC_Lock+0x64>)
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	b933      	cbnz	r3, 800585c <CRC_Lock+0x20>
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <CRC_Lock+0x68>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005856:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800585a:	d00f      	beq.n	800587c <CRC_Lock+0x40>
 800585c:	4a12      	ldr	r2, [pc, #72]	; (80058a8 <CRC_Lock+0x6c>)
 800585e:	2301      	movs	r3, #1
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	6813      	ldr	r3, [r2, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1fc      	bne.n	8005862 <CRC_Lock+0x26>
 8005868:	4b10      	ldr	r3, [pc, #64]	; (80058ac <CRC_Lock+0x70>)
 800586a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800586e:	6018      	str	r0, [r3, #0]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	1a08      	subs	r0, r1, r0
 8005874:	fab0 f080 	clz	r0, r0
 8005878:	0940      	lsrs	r0, r0, #5
 800587a:	4770      	bx	lr
 800587c:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <CRC_Lock+0x74>)
 800587e:	2301      	movs	r3, #1
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	6813      	ldr	r3, [r2, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1fc      	bne.n	8005882 <CRC_Lock+0x46>
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <CRC_Lock+0x78>)
 800588a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800588e:	6018      	str	r0, [r3, #0]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	1a40      	subs	r0, r0, r1
 8005894:	fab0 f080 	clz	r0, r0
 8005898:	0940      	lsrs	r0, r0, #5
 800589a:	4770      	bx	lr
 800589c:	e0002000 	.word	0xe0002000
 80058a0:	e0042000 	.word	0xe0042000
 80058a4:	5c001000 	.word	0x5c001000
 80058a8:	40023008 	.word	0x40023008
 80058ac:	40023000 	.word	0x40023000
 80058b0:	58024c08 	.word	0x58024c08
 80058b4:	58024c00 	.word	0x58024c00

080058b8 <__errno>:
 80058b8:	4b01      	ldr	r3, [pc, #4]	; (80058c0 <__errno+0x8>)
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	2000040c 	.word	0x2000040c

080058c4 <__libc_init_array>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	4d0d      	ldr	r5, [pc, #52]	; (80058fc <__libc_init_array+0x38>)
 80058c8:	4c0d      	ldr	r4, [pc, #52]	; (8005900 <__libc_init_array+0x3c>)
 80058ca:	1b64      	subs	r4, r4, r5
 80058cc:	10a4      	asrs	r4, r4, #2
 80058ce:	2600      	movs	r6, #0
 80058d0:	42a6      	cmp	r6, r4
 80058d2:	d109      	bne.n	80058e8 <__libc_init_array+0x24>
 80058d4:	4d0b      	ldr	r5, [pc, #44]	; (8005904 <__libc_init_array+0x40>)
 80058d6:	4c0c      	ldr	r4, [pc, #48]	; (8005908 <__libc_init_array+0x44>)
 80058d8:	f001 f8b8 	bl	8006a4c <_init>
 80058dc:	1b64      	subs	r4, r4, r5
 80058de:	10a4      	asrs	r4, r4, #2
 80058e0:	2600      	movs	r6, #0
 80058e2:	42a6      	cmp	r6, r4
 80058e4:	d105      	bne.n	80058f2 <__libc_init_array+0x2e>
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ec:	4798      	blx	r3
 80058ee:	3601      	adds	r6, #1
 80058f0:	e7ee      	b.n	80058d0 <__libc_init_array+0xc>
 80058f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f6:	4798      	blx	r3
 80058f8:	3601      	adds	r6, #1
 80058fa:	e7f2      	b.n	80058e2 <__libc_init_array+0x1e>
 80058fc:	08006b2c 	.word	0x08006b2c
 8005900:	08006b2c 	.word	0x08006b2c
 8005904:	08006b2c 	.word	0x08006b2c
 8005908:	08006b30 	.word	0x08006b30

0800590c <memset>:
 800590c:	4402      	add	r2, r0
 800590e:	4603      	mov	r3, r0
 8005910:	4293      	cmp	r3, r2
 8005912:	d100      	bne.n	8005916 <memset+0xa>
 8005914:	4770      	bx	lr
 8005916:	f803 1b01 	strb.w	r1, [r3], #1
 800591a:	e7f9      	b.n	8005910 <memset+0x4>

0800591c <siprintf>:
 800591c:	b40e      	push	{r1, r2, r3}
 800591e:	b500      	push	{lr}
 8005920:	b09c      	sub	sp, #112	; 0x70
 8005922:	ab1d      	add	r3, sp, #116	; 0x74
 8005924:	9002      	str	r0, [sp, #8]
 8005926:	9006      	str	r0, [sp, #24]
 8005928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800592c:	4809      	ldr	r0, [pc, #36]	; (8005954 <siprintf+0x38>)
 800592e:	9107      	str	r1, [sp, #28]
 8005930:	9104      	str	r1, [sp, #16]
 8005932:	4909      	ldr	r1, [pc, #36]	; (8005958 <siprintf+0x3c>)
 8005934:	f853 2b04 	ldr.w	r2, [r3], #4
 8005938:	9105      	str	r1, [sp, #20]
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	a902      	add	r1, sp, #8
 8005940:	f000 f868 	bl	8005a14 <_svfiprintf_r>
 8005944:	9b02      	ldr	r3, [sp, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	b01c      	add	sp, #112	; 0x70
 800594c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005950:	b003      	add	sp, #12
 8005952:	4770      	bx	lr
 8005954:	2000040c 	.word	0x2000040c
 8005958:	ffff0208 	.word	0xffff0208

0800595c <__ssputs_r>:
 800595c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005960:	688e      	ldr	r6, [r1, #8]
 8005962:	429e      	cmp	r6, r3
 8005964:	4682      	mov	sl, r0
 8005966:	460c      	mov	r4, r1
 8005968:	4690      	mov	r8, r2
 800596a:	461f      	mov	r7, r3
 800596c:	d838      	bhi.n	80059e0 <__ssputs_r+0x84>
 800596e:	898a      	ldrh	r2, [r1, #12]
 8005970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005974:	d032      	beq.n	80059dc <__ssputs_r+0x80>
 8005976:	6825      	ldr	r5, [r4, #0]
 8005978:	6909      	ldr	r1, [r1, #16]
 800597a:	eba5 0901 	sub.w	r9, r5, r1
 800597e:	6965      	ldr	r5, [r4, #20]
 8005980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005988:	3301      	adds	r3, #1
 800598a:	444b      	add	r3, r9
 800598c:	106d      	asrs	r5, r5, #1
 800598e:	429d      	cmp	r5, r3
 8005990:	bf38      	it	cc
 8005992:	461d      	movcc	r5, r3
 8005994:	0553      	lsls	r3, r2, #21
 8005996:	d531      	bpl.n	80059fc <__ssputs_r+0xa0>
 8005998:	4629      	mov	r1, r5
 800599a:	f000 fb47 	bl	800602c <_malloc_r>
 800599e:	4606      	mov	r6, r0
 80059a0:	b950      	cbnz	r0, 80059b8 <__ssputs_r+0x5c>
 80059a2:	230c      	movs	r3, #12
 80059a4:	f8ca 3000 	str.w	r3, [sl]
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ae:	81a3      	strh	r3, [r4, #12]
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b8:	6921      	ldr	r1, [r4, #16]
 80059ba:	464a      	mov	r2, r9
 80059bc:	f000 fabe 	bl	8005f3c <memcpy>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	6126      	str	r6, [r4, #16]
 80059ce:	6165      	str	r5, [r4, #20]
 80059d0:	444e      	add	r6, r9
 80059d2:	eba5 0509 	sub.w	r5, r5, r9
 80059d6:	6026      	str	r6, [r4, #0]
 80059d8:	60a5      	str	r5, [r4, #8]
 80059da:	463e      	mov	r6, r7
 80059dc:	42be      	cmp	r6, r7
 80059de:	d900      	bls.n	80059e2 <__ssputs_r+0x86>
 80059e0:	463e      	mov	r6, r7
 80059e2:	4632      	mov	r2, r6
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	4641      	mov	r1, r8
 80059e8:	f000 fab6 	bl	8005f58 <memmove>
 80059ec:	68a3      	ldr	r3, [r4, #8]
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	1b9b      	subs	r3, r3, r6
 80059f2:	4432      	add	r2, r6
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	6022      	str	r2, [r4, #0]
 80059f8:	2000      	movs	r0, #0
 80059fa:	e7db      	b.n	80059b4 <__ssputs_r+0x58>
 80059fc:	462a      	mov	r2, r5
 80059fe:	f000 fb6f 	bl	80060e0 <_realloc_r>
 8005a02:	4606      	mov	r6, r0
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d1e1      	bne.n	80059cc <__ssputs_r+0x70>
 8005a08:	6921      	ldr	r1, [r4, #16]
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	f000 fabe 	bl	8005f8c <_free_r>
 8005a10:	e7c7      	b.n	80059a2 <__ssputs_r+0x46>
	...

08005a14 <_svfiprintf_r>:
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	4698      	mov	r8, r3
 8005a1a:	898b      	ldrh	r3, [r1, #12]
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	b09d      	sub	sp, #116	; 0x74
 8005a20:	4607      	mov	r7, r0
 8005a22:	460d      	mov	r5, r1
 8005a24:	4614      	mov	r4, r2
 8005a26:	d50e      	bpl.n	8005a46 <_svfiprintf_r+0x32>
 8005a28:	690b      	ldr	r3, [r1, #16]
 8005a2a:	b963      	cbnz	r3, 8005a46 <_svfiprintf_r+0x32>
 8005a2c:	2140      	movs	r1, #64	; 0x40
 8005a2e:	f000 fafd 	bl	800602c <_malloc_r>
 8005a32:	6028      	str	r0, [r5, #0]
 8005a34:	6128      	str	r0, [r5, #16]
 8005a36:	b920      	cbnz	r0, 8005a42 <_svfiprintf_r+0x2e>
 8005a38:	230c      	movs	r3, #12
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	e0d1      	b.n	8005be6 <_svfiprintf_r+0x1d2>
 8005a42:	2340      	movs	r3, #64	; 0x40
 8005a44:	616b      	str	r3, [r5, #20]
 8005a46:	2300      	movs	r3, #0
 8005a48:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4a:	2320      	movs	r3, #32
 8005a4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a54:	2330      	movs	r3, #48	; 0x30
 8005a56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c00 <_svfiprintf_r+0x1ec>
 8005a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a5e:	f04f 0901 	mov.w	r9, #1
 8005a62:	4623      	mov	r3, r4
 8005a64:	469a      	mov	sl, r3
 8005a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a6a:	b10a      	cbz	r2, 8005a70 <_svfiprintf_r+0x5c>
 8005a6c:	2a25      	cmp	r2, #37	; 0x25
 8005a6e:	d1f9      	bne.n	8005a64 <_svfiprintf_r+0x50>
 8005a70:	ebba 0b04 	subs.w	fp, sl, r4
 8005a74:	d00b      	beq.n	8005a8e <_svfiprintf_r+0x7a>
 8005a76:	465b      	mov	r3, fp
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f7ff ff6d 	bl	800595c <__ssputs_r>
 8005a82:	3001      	adds	r0, #1
 8005a84:	f000 80aa 	beq.w	8005bdc <_svfiprintf_r+0x1c8>
 8005a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a8a:	445a      	add	r2, fp
 8005a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80a2 	beq.w	8005bdc <_svfiprintf_r+0x1c8>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aa2:	f10a 0a01 	add.w	sl, sl, #1
 8005aa6:	9304      	str	r3, [sp, #16]
 8005aa8:	9307      	str	r3, [sp, #28]
 8005aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aae:	931a      	str	r3, [sp, #104]	; 0x68
 8005ab0:	4654      	mov	r4, sl
 8005ab2:	2205      	movs	r2, #5
 8005ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab8:	4851      	ldr	r0, [pc, #324]	; (8005c00 <_svfiprintf_r+0x1ec>)
 8005aba:	f7fa fb99 	bl	80001f0 <memchr>
 8005abe:	9a04      	ldr	r2, [sp, #16]
 8005ac0:	b9d8      	cbnz	r0, 8005afa <_svfiprintf_r+0xe6>
 8005ac2:	06d0      	lsls	r0, r2, #27
 8005ac4:	bf44      	itt	mi
 8005ac6:	2320      	movmi	r3, #32
 8005ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005acc:	0711      	lsls	r1, r2, #28
 8005ace:	bf44      	itt	mi
 8005ad0:	232b      	movmi	r3, #43	; 0x2b
 8005ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8005ada:	2b2a      	cmp	r3, #42	; 0x2a
 8005adc:	d015      	beq.n	8005b0a <_svfiprintf_r+0xf6>
 8005ade:	9a07      	ldr	r2, [sp, #28]
 8005ae0:	4654      	mov	r4, sl
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f04f 0c0a 	mov.w	ip, #10
 8005ae8:	4621      	mov	r1, r4
 8005aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aee:	3b30      	subs	r3, #48	; 0x30
 8005af0:	2b09      	cmp	r3, #9
 8005af2:	d94e      	bls.n	8005b92 <_svfiprintf_r+0x17e>
 8005af4:	b1b0      	cbz	r0, 8005b24 <_svfiprintf_r+0x110>
 8005af6:	9207      	str	r2, [sp, #28]
 8005af8:	e014      	b.n	8005b24 <_svfiprintf_r+0x110>
 8005afa:	eba0 0308 	sub.w	r3, r0, r8
 8005afe:	fa09 f303 	lsl.w	r3, r9, r3
 8005b02:	4313      	orrs	r3, r2
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	46a2      	mov	sl, r4
 8005b08:	e7d2      	b.n	8005ab0 <_svfiprintf_r+0x9c>
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	1d19      	adds	r1, r3, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	9103      	str	r1, [sp, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bfbb      	ittet	lt
 8005b16:	425b      	neglt	r3, r3
 8005b18:	f042 0202 	orrlt.w	r2, r2, #2
 8005b1c:	9307      	strge	r3, [sp, #28]
 8005b1e:	9307      	strlt	r3, [sp, #28]
 8005b20:	bfb8      	it	lt
 8005b22:	9204      	strlt	r2, [sp, #16]
 8005b24:	7823      	ldrb	r3, [r4, #0]
 8005b26:	2b2e      	cmp	r3, #46	; 0x2e
 8005b28:	d10c      	bne.n	8005b44 <_svfiprintf_r+0x130>
 8005b2a:	7863      	ldrb	r3, [r4, #1]
 8005b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2e:	d135      	bne.n	8005b9c <_svfiprintf_r+0x188>
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	1d1a      	adds	r2, r3, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	9203      	str	r2, [sp, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfb8      	it	lt
 8005b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b40:	3402      	adds	r4, #2
 8005b42:	9305      	str	r3, [sp, #20]
 8005b44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c10 <_svfiprintf_r+0x1fc>
 8005b48:	7821      	ldrb	r1, [r4, #0]
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	4650      	mov	r0, sl
 8005b4e:	f7fa fb4f 	bl	80001f0 <memchr>
 8005b52:	b140      	cbz	r0, 8005b66 <_svfiprintf_r+0x152>
 8005b54:	2340      	movs	r3, #64	; 0x40
 8005b56:	eba0 000a 	sub.w	r0, r0, sl
 8005b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b5e:	9b04      	ldr	r3, [sp, #16]
 8005b60:	4303      	orrs	r3, r0
 8005b62:	3401      	adds	r4, #1
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b6a:	4826      	ldr	r0, [pc, #152]	; (8005c04 <_svfiprintf_r+0x1f0>)
 8005b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b70:	2206      	movs	r2, #6
 8005b72:	f7fa fb3d 	bl	80001f0 <memchr>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d038      	beq.n	8005bec <_svfiprintf_r+0x1d8>
 8005b7a:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <_svfiprintf_r+0x1f4>)
 8005b7c:	bb1b      	cbnz	r3, 8005bc6 <_svfiprintf_r+0x1b2>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	3307      	adds	r3, #7
 8005b82:	f023 0307 	bic.w	r3, r3, #7
 8005b86:	3308      	adds	r3, #8
 8005b88:	9303      	str	r3, [sp, #12]
 8005b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8c:	4433      	add	r3, r6
 8005b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b90:	e767      	b.n	8005a62 <_svfiprintf_r+0x4e>
 8005b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b96:	460c      	mov	r4, r1
 8005b98:	2001      	movs	r0, #1
 8005b9a:	e7a5      	b.n	8005ae8 <_svfiprintf_r+0xd4>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	3401      	adds	r4, #1
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f04f 0c0a 	mov.w	ip, #10
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bae:	3a30      	subs	r2, #48	; 0x30
 8005bb0:	2a09      	cmp	r2, #9
 8005bb2:	d903      	bls.n	8005bbc <_svfiprintf_r+0x1a8>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0c5      	beq.n	8005b44 <_svfiprintf_r+0x130>
 8005bb8:	9105      	str	r1, [sp, #20]
 8005bba:	e7c3      	b.n	8005b44 <_svfiprintf_r+0x130>
 8005bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e7f0      	b.n	8005ba8 <_svfiprintf_r+0x194>
 8005bc6:	ab03      	add	r3, sp, #12
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	462a      	mov	r2, r5
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <_svfiprintf_r+0x1f8>)
 8005bce:	a904      	add	r1, sp, #16
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f3af 8000 	nop.w
 8005bd6:	1c42      	adds	r2, r0, #1
 8005bd8:	4606      	mov	r6, r0
 8005bda:	d1d6      	bne.n	8005b8a <_svfiprintf_r+0x176>
 8005bdc:	89ab      	ldrh	r3, [r5, #12]
 8005bde:	065b      	lsls	r3, r3, #25
 8005be0:	f53f af2c 	bmi.w	8005a3c <_svfiprintf_r+0x28>
 8005be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005be6:	b01d      	add	sp, #116	; 0x74
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	ab03      	add	r3, sp, #12
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <_svfiprintf_r+0x1f8>)
 8005bf4:	a904      	add	r1, sp, #16
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f000 f87a 	bl	8005cf0 <_printf_i>
 8005bfc:	e7eb      	b.n	8005bd6 <_svfiprintf_r+0x1c2>
 8005bfe:	bf00      	nop
 8005c00:	08006ad0 	.word	0x08006ad0
 8005c04:	08006ada 	.word	0x08006ada
 8005c08:	00000000 	.word	0x00000000
 8005c0c:	0800595d 	.word	0x0800595d
 8005c10:	08006ad6 	.word	0x08006ad6

08005c14 <_printf_common>:
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	4616      	mov	r6, r2
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	688a      	ldr	r2, [r1, #8]
 8005c1e:	690b      	ldr	r3, [r1, #16]
 8005c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bfb8      	it	lt
 8005c28:	4613      	movlt	r3, r2
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c30:	4607      	mov	r7, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b10a      	cbz	r2, 8005c3a <_printf_common+0x26>
 8005c36:	3301      	adds	r3, #1
 8005c38:	6033      	str	r3, [r6, #0]
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	0699      	lsls	r1, r3, #26
 8005c3e:	bf42      	ittt	mi
 8005c40:	6833      	ldrmi	r3, [r6, #0]
 8005c42:	3302      	addmi	r3, #2
 8005c44:	6033      	strmi	r3, [r6, #0]
 8005c46:	6825      	ldr	r5, [r4, #0]
 8005c48:	f015 0506 	ands.w	r5, r5, #6
 8005c4c:	d106      	bne.n	8005c5c <_printf_common+0x48>
 8005c4e:	f104 0a19 	add.w	sl, r4, #25
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	6832      	ldr	r2, [r6, #0]
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	42ab      	cmp	r3, r5
 8005c5a:	dc26      	bgt.n	8005caa <_printf_common+0x96>
 8005c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c60:	1e13      	subs	r3, r2, #0
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	bf18      	it	ne
 8005c66:	2301      	movne	r3, #1
 8005c68:	0692      	lsls	r2, r2, #26
 8005c6a:	d42b      	bmi.n	8005cc4 <_printf_common+0xb0>
 8005c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c70:	4649      	mov	r1, r9
 8005c72:	4638      	mov	r0, r7
 8005c74:	47c0      	blx	r8
 8005c76:	3001      	adds	r0, #1
 8005c78:	d01e      	beq.n	8005cb8 <_printf_common+0xa4>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	68e5      	ldr	r5, [r4, #12]
 8005c7e:	6832      	ldr	r2, [r6, #0]
 8005c80:	f003 0306 	and.w	r3, r3, #6
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	bf08      	it	eq
 8005c88:	1aad      	subeq	r5, r5, r2
 8005c8a:	68a3      	ldr	r3, [r4, #8]
 8005c8c:	6922      	ldr	r2, [r4, #16]
 8005c8e:	bf0c      	ite	eq
 8005c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c94:	2500      	movne	r5, #0
 8005c96:	4293      	cmp	r3, r2
 8005c98:	bfc4      	itt	gt
 8005c9a:	1a9b      	subgt	r3, r3, r2
 8005c9c:	18ed      	addgt	r5, r5, r3
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	341a      	adds	r4, #26
 8005ca2:	42b5      	cmp	r5, r6
 8005ca4:	d11a      	bne.n	8005cdc <_printf_common+0xc8>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e008      	b.n	8005cbc <_printf_common+0xa8>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4652      	mov	r2, sl
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	47c0      	blx	r8
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d103      	bne.n	8005cc0 <_printf_common+0xac>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	e7c6      	b.n	8005c52 <_printf_common+0x3e>
 8005cc4:	18e1      	adds	r1, r4, r3
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	2030      	movs	r0, #48	; 0x30
 8005cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cce:	4422      	add	r2, r4
 8005cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cd8:	3302      	adds	r3, #2
 8005cda:	e7c7      	b.n	8005c6c <_printf_common+0x58>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4622      	mov	r2, r4
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	47c0      	blx	r8
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d0e6      	beq.n	8005cb8 <_printf_common+0xa4>
 8005cea:	3601      	adds	r6, #1
 8005cec:	e7d9      	b.n	8005ca2 <_printf_common+0x8e>
	...

08005cf0 <_printf_i>:
 8005cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	4691      	mov	r9, r2
 8005cf8:	7e27      	ldrb	r7, [r4, #24]
 8005cfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cfc:	2f78      	cmp	r7, #120	; 0x78
 8005cfe:	4680      	mov	r8, r0
 8005d00:	469a      	mov	sl, r3
 8005d02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d06:	d807      	bhi.n	8005d18 <_printf_i+0x28>
 8005d08:	2f62      	cmp	r7, #98	; 0x62
 8005d0a:	d80a      	bhi.n	8005d22 <_printf_i+0x32>
 8005d0c:	2f00      	cmp	r7, #0
 8005d0e:	f000 80d8 	beq.w	8005ec2 <_printf_i+0x1d2>
 8005d12:	2f58      	cmp	r7, #88	; 0x58
 8005d14:	f000 80a3 	beq.w	8005e5e <_printf_i+0x16e>
 8005d18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d20:	e03a      	b.n	8005d98 <_printf_i+0xa8>
 8005d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d26:	2b15      	cmp	r3, #21
 8005d28:	d8f6      	bhi.n	8005d18 <_printf_i+0x28>
 8005d2a:	a001      	add	r0, pc, #4	; (adr r0, 8005d30 <_printf_i+0x40>)
 8005d2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d19 	.word	0x08005d19
 8005d3c:	08005d19 	.word	0x08005d19
 8005d40:	08005d19 	.word	0x08005d19
 8005d44:	08005d19 	.word	0x08005d19
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d19 	.word	0x08005d19
 8005d50:	08005d19 	.word	0x08005d19
 8005d54:	08005d19 	.word	0x08005d19
 8005d58:	08005d19 	.word	0x08005d19
 8005d5c:	08005ea9 	.word	0x08005ea9
 8005d60:	08005dcd 	.word	0x08005dcd
 8005d64:	08005e8b 	.word	0x08005e8b
 8005d68:	08005d19 	.word	0x08005d19
 8005d6c:	08005d19 	.word	0x08005d19
 8005d70:	08005ecb 	.word	0x08005ecb
 8005d74:	08005d19 	.word	0x08005d19
 8005d78:	08005dcd 	.word	0x08005dcd
 8005d7c:	08005d19 	.word	0x08005d19
 8005d80:	08005d19 	.word	0x08005d19
 8005d84:	08005e93 	.word	0x08005e93
 8005d88:	680b      	ldr	r3, [r1, #0]
 8005d8a:	1d1a      	adds	r2, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	600a      	str	r2, [r1, #0]
 8005d90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0a3      	b.n	8005ee4 <_printf_i+0x1f4>
 8005d9c:	6825      	ldr	r5, [r4, #0]
 8005d9e:	6808      	ldr	r0, [r1, #0]
 8005da0:	062e      	lsls	r6, r5, #24
 8005da2:	f100 0304 	add.w	r3, r0, #4
 8005da6:	d50a      	bpl.n	8005dbe <_printf_i+0xce>
 8005da8:	6805      	ldr	r5, [r0, #0]
 8005daa:	600b      	str	r3, [r1, #0]
 8005dac:	2d00      	cmp	r5, #0
 8005dae:	da03      	bge.n	8005db8 <_printf_i+0xc8>
 8005db0:	232d      	movs	r3, #45	; 0x2d
 8005db2:	426d      	negs	r5, r5
 8005db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db8:	485e      	ldr	r0, [pc, #376]	; (8005f34 <_printf_i+0x244>)
 8005dba:	230a      	movs	r3, #10
 8005dbc:	e019      	b.n	8005df2 <_printf_i+0x102>
 8005dbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005dc2:	6805      	ldr	r5, [r0, #0]
 8005dc4:	600b      	str	r3, [r1, #0]
 8005dc6:	bf18      	it	ne
 8005dc8:	b22d      	sxthne	r5, r5
 8005dca:	e7ef      	b.n	8005dac <_printf_i+0xbc>
 8005dcc:	680b      	ldr	r3, [r1, #0]
 8005dce:	6825      	ldr	r5, [r4, #0]
 8005dd0:	1d18      	adds	r0, r3, #4
 8005dd2:	6008      	str	r0, [r1, #0]
 8005dd4:	0628      	lsls	r0, r5, #24
 8005dd6:	d501      	bpl.n	8005ddc <_printf_i+0xec>
 8005dd8:	681d      	ldr	r5, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <_printf_i+0xf2>
 8005ddc:	0669      	lsls	r1, r5, #25
 8005dde:	d5fb      	bpl.n	8005dd8 <_printf_i+0xe8>
 8005de0:	881d      	ldrh	r5, [r3, #0]
 8005de2:	4854      	ldr	r0, [pc, #336]	; (8005f34 <_printf_i+0x244>)
 8005de4:	2f6f      	cmp	r7, #111	; 0x6f
 8005de6:	bf0c      	ite	eq
 8005de8:	2308      	moveq	r3, #8
 8005dea:	230a      	movne	r3, #10
 8005dec:	2100      	movs	r1, #0
 8005dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005df2:	6866      	ldr	r6, [r4, #4]
 8005df4:	60a6      	str	r6, [r4, #8]
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	bfa2      	ittt	ge
 8005dfa:	6821      	ldrge	r1, [r4, #0]
 8005dfc:	f021 0104 	bicge.w	r1, r1, #4
 8005e00:	6021      	strge	r1, [r4, #0]
 8005e02:	b90d      	cbnz	r5, 8005e08 <_printf_i+0x118>
 8005e04:	2e00      	cmp	r6, #0
 8005e06:	d04d      	beq.n	8005ea4 <_printf_i+0x1b4>
 8005e08:	4616      	mov	r6, r2
 8005e0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e0e:	fb03 5711 	mls	r7, r3, r1, r5
 8005e12:	5dc7      	ldrb	r7, [r0, r7]
 8005e14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e18:	462f      	mov	r7, r5
 8005e1a:	42bb      	cmp	r3, r7
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	d9f4      	bls.n	8005e0a <_printf_i+0x11a>
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d10b      	bne.n	8005e3c <_printf_i+0x14c>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	07df      	lsls	r7, r3, #31
 8005e28:	d508      	bpl.n	8005e3c <_printf_i+0x14c>
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	6861      	ldr	r1, [r4, #4]
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	bfde      	ittt	le
 8005e32:	2330      	movle	r3, #48	; 0x30
 8005e34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e3c:	1b92      	subs	r2, r2, r6
 8005e3e:	6122      	str	r2, [r4, #16]
 8005e40:	f8cd a000 	str.w	sl, [sp]
 8005e44:	464b      	mov	r3, r9
 8005e46:	aa03      	add	r2, sp, #12
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	f7ff fee2 	bl	8005c14 <_printf_common>
 8005e50:	3001      	adds	r0, #1
 8005e52:	d14c      	bne.n	8005eee <_printf_i+0x1fe>
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	b004      	add	sp, #16
 8005e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5e:	4835      	ldr	r0, [pc, #212]	; (8005f34 <_printf_i+0x244>)
 8005e60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	680e      	ldr	r6, [r1, #0]
 8005e68:	061f      	lsls	r7, r3, #24
 8005e6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e6e:	600e      	str	r6, [r1, #0]
 8005e70:	d514      	bpl.n	8005e9c <_printf_i+0x1ac>
 8005e72:	07d9      	lsls	r1, r3, #31
 8005e74:	bf44      	itt	mi
 8005e76:	f043 0320 	orrmi.w	r3, r3, #32
 8005e7a:	6023      	strmi	r3, [r4, #0]
 8005e7c:	b91d      	cbnz	r5, 8005e86 <_printf_i+0x196>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	f023 0320 	bic.w	r3, r3, #32
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	2310      	movs	r3, #16
 8005e88:	e7b0      	b.n	8005dec <_printf_i+0xfc>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	f043 0320 	orr.w	r3, r3, #32
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	2378      	movs	r3, #120	; 0x78
 8005e94:	4828      	ldr	r0, [pc, #160]	; (8005f38 <_printf_i+0x248>)
 8005e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e9a:	e7e3      	b.n	8005e64 <_printf_i+0x174>
 8005e9c:	065e      	lsls	r6, r3, #25
 8005e9e:	bf48      	it	mi
 8005ea0:	b2ad      	uxthmi	r5, r5
 8005ea2:	e7e6      	b.n	8005e72 <_printf_i+0x182>
 8005ea4:	4616      	mov	r6, r2
 8005ea6:	e7bb      	b.n	8005e20 <_printf_i+0x130>
 8005ea8:	680b      	ldr	r3, [r1, #0]
 8005eaa:	6826      	ldr	r6, [r4, #0]
 8005eac:	6960      	ldr	r0, [r4, #20]
 8005eae:	1d1d      	adds	r5, r3, #4
 8005eb0:	600d      	str	r5, [r1, #0]
 8005eb2:	0635      	lsls	r5, r6, #24
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	d501      	bpl.n	8005ebc <_printf_i+0x1cc>
 8005eb8:	6018      	str	r0, [r3, #0]
 8005eba:	e002      	b.n	8005ec2 <_printf_i+0x1d2>
 8005ebc:	0671      	lsls	r1, r6, #25
 8005ebe:	d5fb      	bpl.n	8005eb8 <_printf_i+0x1c8>
 8005ec0:	8018      	strh	r0, [r3, #0]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	4616      	mov	r6, r2
 8005ec8:	e7ba      	b.n	8005e40 <_printf_i+0x150>
 8005eca:	680b      	ldr	r3, [r1, #0]
 8005ecc:	1d1a      	adds	r2, r3, #4
 8005ece:	600a      	str	r2, [r1, #0]
 8005ed0:	681e      	ldr	r6, [r3, #0]
 8005ed2:	6862      	ldr	r2, [r4, #4]
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f7fa f98a 	bl	80001f0 <memchr>
 8005edc:	b108      	cbz	r0, 8005ee2 <_printf_i+0x1f2>
 8005ede:	1b80      	subs	r0, r0, r6
 8005ee0:	6060      	str	r0, [r4, #4]
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eec:	e7a8      	b.n	8005e40 <_printf_i+0x150>
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	47d0      	blx	sl
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d0ab      	beq.n	8005e54 <_printf_i+0x164>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	079b      	lsls	r3, r3, #30
 8005f00:	d413      	bmi.n	8005f2a <_printf_i+0x23a>
 8005f02:	68e0      	ldr	r0, [r4, #12]
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	4298      	cmp	r0, r3
 8005f08:	bfb8      	it	lt
 8005f0a:	4618      	movlt	r0, r3
 8005f0c:	e7a4      	b.n	8005e58 <_printf_i+0x168>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4632      	mov	r2, r6
 8005f12:	4649      	mov	r1, r9
 8005f14:	4640      	mov	r0, r8
 8005f16:	47d0      	blx	sl
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d09b      	beq.n	8005e54 <_printf_i+0x164>
 8005f1c:	3501      	adds	r5, #1
 8005f1e:	68e3      	ldr	r3, [r4, #12]
 8005f20:	9903      	ldr	r1, [sp, #12]
 8005f22:	1a5b      	subs	r3, r3, r1
 8005f24:	42ab      	cmp	r3, r5
 8005f26:	dcf2      	bgt.n	8005f0e <_printf_i+0x21e>
 8005f28:	e7eb      	b.n	8005f02 <_printf_i+0x212>
 8005f2a:	2500      	movs	r5, #0
 8005f2c:	f104 0619 	add.w	r6, r4, #25
 8005f30:	e7f5      	b.n	8005f1e <_printf_i+0x22e>
 8005f32:	bf00      	nop
 8005f34:	08006ae1 	.word	0x08006ae1
 8005f38:	08006af2 	.word	0x08006af2

08005f3c <memcpy>:
 8005f3c:	440a      	add	r2, r1
 8005f3e:	4291      	cmp	r1, r2
 8005f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f44:	d100      	bne.n	8005f48 <memcpy+0xc>
 8005f46:	4770      	bx	lr
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f52:	4291      	cmp	r1, r2
 8005f54:	d1f9      	bne.n	8005f4a <memcpy+0xe>
 8005f56:	bd10      	pop	{r4, pc}

08005f58 <memmove>:
 8005f58:	4288      	cmp	r0, r1
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	eb01 0402 	add.w	r4, r1, r2
 8005f60:	d902      	bls.n	8005f68 <memmove+0x10>
 8005f62:	4284      	cmp	r4, r0
 8005f64:	4623      	mov	r3, r4
 8005f66:	d807      	bhi.n	8005f78 <memmove+0x20>
 8005f68:	1e43      	subs	r3, r0, #1
 8005f6a:	42a1      	cmp	r1, r4
 8005f6c:	d008      	beq.n	8005f80 <memmove+0x28>
 8005f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f76:	e7f8      	b.n	8005f6a <memmove+0x12>
 8005f78:	4402      	add	r2, r0
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	428a      	cmp	r2, r1
 8005f7e:	d100      	bne.n	8005f82 <memmove+0x2a>
 8005f80:	bd10      	pop	{r4, pc}
 8005f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f8a:	e7f7      	b.n	8005f7c <memmove+0x24>

08005f8c <_free_r>:
 8005f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f8e:	2900      	cmp	r1, #0
 8005f90:	d048      	beq.n	8006024 <_free_r+0x98>
 8005f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f96:	9001      	str	r0, [sp, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f9e:	bfb8      	it	lt
 8005fa0:	18e4      	addlt	r4, r4, r3
 8005fa2:	f000 f8d3 	bl	800614c <__malloc_lock>
 8005fa6:	4a20      	ldr	r2, [pc, #128]	; (8006028 <_free_r+0x9c>)
 8005fa8:	9801      	ldr	r0, [sp, #4]
 8005faa:	6813      	ldr	r3, [r2, #0]
 8005fac:	4615      	mov	r5, r2
 8005fae:	b933      	cbnz	r3, 8005fbe <_free_r+0x32>
 8005fb0:	6063      	str	r3, [r4, #4]
 8005fb2:	6014      	str	r4, [r2, #0]
 8005fb4:	b003      	add	sp, #12
 8005fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fba:	f000 b8cd 	b.w	8006158 <__malloc_unlock>
 8005fbe:	42a3      	cmp	r3, r4
 8005fc0:	d90b      	bls.n	8005fda <_free_r+0x4e>
 8005fc2:	6821      	ldr	r1, [r4, #0]
 8005fc4:	1862      	adds	r2, r4, r1
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	bf04      	itt	eq
 8005fca:	681a      	ldreq	r2, [r3, #0]
 8005fcc:	685b      	ldreq	r3, [r3, #4]
 8005fce:	6063      	str	r3, [r4, #4]
 8005fd0:	bf04      	itt	eq
 8005fd2:	1852      	addeq	r2, r2, r1
 8005fd4:	6022      	streq	r2, [r4, #0]
 8005fd6:	602c      	str	r4, [r5, #0]
 8005fd8:	e7ec      	b.n	8005fb4 <_free_r+0x28>
 8005fda:	461a      	mov	r2, r3
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	b10b      	cbz	r3, 8005fe4 <_free_r+0x58>
 8005fe0:	42a3      	cmp	r3, r4
 8005fe2:	d9fa      	bls.n	8005fda <_free_r+0x4e>
 8005fe4:	6811      	ldr	r1, [r2, #0]
 8005fe6:	1855      	adds	r5, r2, r1
 8005fe8:	42a5      	cmp	r5, r4
 8005fea:	d10b      	bne.n	8006004 <_free_r+0x78>
 8005fec:	6824      	ldr	r4, [r4, #0]
 8005fee:	4421      	add	r1, r4
 8005ff0:	1854      	adds	r4, r2, r1
 8005ff2:	42a3      	cmp	r3, r4
 8005ff4:	6011      	str	r1, [r2, #0]
 8005ff6:	d1dd      	bne.n	8005fb4 <_free_r+0x28>
 8005ff8:	681c      	ldr	r4, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	6053      	str	r3, [r2, #4]
 8005ffe:	4421      	add	r1, r4
 8006000:	6011      	str	r1, [r2, #0]
 8006002:	e7d7      	b.n	8005fb4 <_free_r+0x28>
 8006004:	d902      	bls.n	800600c <_free_r+0x80>
 8006006:	230c      	movs	r3, #12
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	e7d3      	b.n	8005fb4 <_free_r+0x28>
 800600c:	6825      	ldr	r5, [r4, #0]
 800600e:	1961      	adds	r1, r4, r5
 8006010:	428b      	cmp	r3, r1
 8006012:	bf04      	itt	eq
 8006014:	6819      	ldreq	r1, [r3, #0]
 8006016:	685b      	ldreq	r3, [r3, #4]
 8006018:	6063      	str	r3, [r4, #4]
 800601a:	bf04      	itt	eq
 800601c:	1949      	addeq	r1, r1, r5
 800601e:	6021      	streq	r1, [r4, #0]
 8006020:	6054      	str	r4, [r2, #4]
 8006022:	e7c7      	b.n	8005fb4 <_free_r+0x28>
 8006024:	b003      	add	sp, #12
 8006026:	bd30      	pop	{r4, r5, pc}
 8006028:	2000049c 	.word	0x2000049c

0800602c <_malloc_r>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	1ccd      	adds	r5, r1, #3
 8006030:	f025 0503 	bic.w	r5, r5, #3
 8006034:	3508      	adds	r5, #8
 8006036:	2d0c      	cmp	r5, #12
 8006038:	bf38      	it	cc
 800603a:	250c      	movcc	r5, #12
 800603c:	2d00      	cmp	r5, #0
 800603e:	4606      	mov	r6, r0
 8006040:	db01      	blt.n	8006046 <_malloc_r+0x1a>
 8006042:	42a9      	cmp	r1, r5
 8006044:	d903      	bls.n	800604e <_malloc_r+0x22>
 8006046:	230c      	movs	r3, #12
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	2000      	movs	r0, #0
 800604c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800604e:	f000 f87d 	bl	800614c <__malloc_lock>
 8006052:	4921      	ldr	r1, [pc, #132]	; (80060d8 <_malloc_r+0xac>)
 8006054:	680a      	ldr	r2, [r1, #0]
 8006056:	4614      	mov	r4, r2
 8006058:	b99c      	cbnz	r4, 8006082 <_malloc_r+0x56>
 800605a:	4f20      	ldr	r7, [pc, #128]	; (80060dc <_malloc_r+0xb0>)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	b923      	cbnz	r3, 800606a <_malloc_r+0x3e>
 8006060:	4621      	mov	r1, r4
 8006062:	4630      	mov	r0, r6
 8006064:	f000 f862 	bl	800612c <_sbrk_r>
 8006068:	6038      	str	r0, [r7, #0]
 800606a:	4629      	mov	r1, r5
 800606c:	4630      	mov	r0, r6
 800606e:	f000 f85d 	bl	800612c <_sbrk_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	d123      	bne.n	80060be <_malloc_r+0x92>
 8006076:	230c      	movs	r3, #12
 8006078:	6033      	str	r3, [r6, #0]
 800607a:	4630      	mov	r0, r6
 800607c:	f000 f86c 	bl	8006158 <__malloc_unlock>
 8006080:	e7e3      	b.n	800604a <_malloc_r+0x1e>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	1b5b      	subs	r3, r3, r5
 8006086:	d417      	bmi.n	80060b8 <_malloc_r+0x8c>
 8006088:	2b0b      	cmp	r3, #11
 800608a:	d903      	bls.n	8006094 <_malloc_r+0x68>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	441c      	add	r4, r3
 8006090:	6025      	str	r5, [r4, #0]
 8006092:	e004      	b.n	800609e <_malloc_r+0x72>
 8006094:	6863      	ldr	r3, [r4, #4]
 8006096:	42a2      	cmp	r2, r4
 8006098:	bf0c      	ite	eq
 800609a:	600b      	streq	r3, [r1, #0]
 800609c:	6053      	strne	r3, [r2, #4]
 800609e:	4630      	mov	r0, r6
 80060a0:	f000 f85a 	bl	8006158 <__malloc_unlock>
 80060a4:	f104 000b 	add.w	r0, r4, #11
 80060a8:	1d23      	adds	r3, r4, #4
 80060aa:	f020 0007 	bic.w	r0, r0, #7
 80060ae:	1ac2      	subs	r2, r0, r3
 80060b0:	d0cc      	beq.n	800604c <_malloc_r+0x20>
 80060b2:	1a1b      	subs	r3, r3, r0
 80060b4:	50a3      	str	r3, [r4, r2]
 80060b6:	e7c9      	b.n	800604c <_malloc_r+0x20>
 80060b8:	4622      	mov	r2, r4
 80060ba:	6864      	ldr	r4, [r4, #4]
 80060bc:	e7cc      	b.n	8006058 <_malloc_r+0x2c>
 80060be:	1cc4      	adds	r4, r0, #3
 80060c0:	f024 0403 	bic.w	r4, r4, #3
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d0e3      	beq.n	8006090 <_malloc_r+0x64>
 80060c8:	1a21      	subs	r1, r4, r0
 80060ca:	4630      	mov	r0, r6
 80060cc:	f000 f82e 	bl	800612c <_sbrk_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d1dd      	bne.n	8006090 <_malloc_r+0x64>
 80060d4:	e7cf      	b.n	8006076 <_malloc_r+0x4a>
 80060d6:	bf00      	nop
 80060d8:	2000049c 	.word	0x2000049c
 80060dc:	200004a0 	.word	0x200004a0

080060e0 <_realloc_r>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	4607      	mov	r7, r0
 80060e4:	4614      	mov	r4, r2
 80060e6:	460e      	mov	r6, r1
 80060e8:	b921      	cbnz	r1, 80060f4 <_realloc_r+0x14>
 80060ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060ee:	4611      	mov	r1, r2
 80060f0:	f7ff bf9c 	b.w	800602c <_malloc_r>
 80060f4:	b922      	cbnz	r2, 8006100 <_realloc_r+0x20>
 80060f6:	f7ff ff49 	bl	8005f8c <_free_r>
 80060fa:	4625      	mov	r5, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006100:	f000 f830 	bl	8006164 <_malloc_usable_size_r>
 8006104:	42a0      	cmp	r0, r4
 8006106:	d20f      	bcs.n	8006128 <_realloc_r+0x48>
 8006108:	4621      	mov	r1, r4
 800610a:	4638      	mov	r0, r7
 800610c:	f7ff ff8e 	bl	800602c <_malloc_r>
 8006110:	4605      	mov	r5, r0
 8006112:	2800      	cmp	r0, #0
 8006114:	d0f2      	beq.n	80060fc <_realloc_r+0x1c>
 8006116:	4631      	mov	r1, r6
 8006118:	4622      	mov	r2, r4
 800611a:	f7ff ff0f 	bl	8005f3c <memcpy>
 800611e:	4631      	mov	r1, r6
 8006120:	4638      	mov	r0, r7
 8006122:	f7ff ff33 	bl	8005f8c <_free_r>
 8006126:	e7e9      	b.n	80060fc <_realloc_r+0x1c>
 8006128:	4635      	mov	r5, r6
 800612a:	e7e7      	b.n	80060fc <_realloc_r+0x1c>

0800612c <_sbrk_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d06      	ldr	r5, [pc, #24]	; (8006148 <_sbrk_r+0x1c>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fa feb0 	bl	8000e9c <_sbrk>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_sbrk_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_sbrk_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000bb0 	.word	0x20000bb0

0800614c <__malloc_lock>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__malloc_lock+0x8>)
 800614e:	f000 b811 	b.w	8006174 <__retarget_lock_acquire_recursive>
 8006152:	bf00      	nop
 8006154:	20000bb8 	.word	0x20000bb8

08006158 <__malloc_unlock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_unlock+0x8>)
 800615a:	f000 b80c 	b.w	8006176 <__retarget_lock_release_recursive>
 800615e:	bf00      	nop
 8006160:	20000bb8 	.word	0x20000bb8

08006164 <_malloc_usable_size_r>:
 8006164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006168:	1f18      	subs	r0, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfbc      	itt	lt
 800616e:	580b      	ldrlt	r3, [r1, r0]
 8006170:	18c0      	addlt	r0, r0, r3
 8006172:	4770      	bx	lr

08006174 <__retarget_lock_acquire_recursive>:
 8006174:	4770      	bx	lr

08006176 <__retarget_lock_release_recursive>:
 8006176:	4770      	bx	lr

08006178 <roundf>:
 8006178:	ee10 0a10 	vmov	r0, s0
 800617c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006180:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8006184:	2a16      	cmp	r2, #22
 8006186:	dc15      	bgt.n	80061b4 <roundf+0x3c>
 8006188:	2a00      	cmp	r2, #0
 800618a:	da08      	bge.n	800619e <roundf+0x26>
 800618c:	3201      	adds	r2, #1
 800618e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006192:	d101      	bne.n	8006198 <roundf+0x20>
 8006194:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006198:	ee00 3a10 	vmov	s0, r3
 800619c:	4770      	bx	lr
 800619e:	4908      	ldr	r1, [pc, #32]	; (80061c0 <roundf+0x48>)
 80061a0:	4111      	asrs	r1, r2
 80061a2:	4208      	tst	r0, r1
 80061a4:	d0fa      	beq.n	800619c <roundf+0x24>
 80061a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061aa:	4113      	asrs	r3, r2
 80061ac:	4403      	add	r3, r0
 80061ae:	ea23 0301 	bic.w	r3, r3, r1
 80061b2:	e7f1      	b.n	8006198 <roundf+0x20>
 80061b4:	2a80      	cmp	r2, #128	; 0x80
 80061b6:	d1f1      	bne.n	800619c <roundf+0x24>
 80061b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	007fffff 	.word	0x007fffff

080061c4 <powf>:
 80061c4:	b508      	push	{r3, lr}
 80061c6:	ed2d 8b04 	vpush	{d8-d9}
 80061ca:	eeb0 9a40 	vmov.f32	s18, s0
 80061ce:	eef0 8a60 	vmov.f32	s17, s1
 80061d2:	f000 f88f 	bl	80062f4 <__ieee754_powf>
 80061d6:	4b43      	ldr	r3, [pc, #268]	; (80062e4 <powf+0x120>)
 80061d8:	f993 3000 	ldrsb.w	r3, [r3]
 80061dc:	3301      	adds	r3, #1
 80061de:	eeb0 8a40 	vmov.f32	s16, s0
 80061e2:	d012      	beq.n	800620a <powf+0x46>
 80061e4:	eef4 8a68 	vcmp.f32	s17, s17
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	d60d      	bvs.n	800620a <powf+0x46>
 80061ee:	eeb4 9a49 	vcmp.f32	s18, s18
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	d70d      	bvc.n	8006214 <powf+0x50>
 80061f8:	eef5 8a40 	vcmp.f32	s17, #0.0
 80061fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006200:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006204:	bf08      	it	eq
 8006206:	eeb0 8a67 	vmoveq.f32	s16, s15
 800620a:	eeb0 0a48 	vmov.f32	s0, s16
 800620e:	ecbd 8b04 	vpop	{d8-d9}
 8006212:	bd08      	pop	{r3, pc}
 8006214:	eddf 9a34 	vldr	s19, [pc, #208]	; 80062e8 <powf+0x124>
 8006218:	eeb4 9a69 	vcmp.f32	s18, s19
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	d116      	bne.n	8006250 <powf+0x8c>
 8006222:	eef4 8a69 	vcmp.f32	s17, s19
 8006226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622a:	d057      	beq.n	80062dc <powf+0x118>
 800622c:	eeb0 0a68 	vmov.f32	s0, s17
 8006230:	f000 fb2a 	bl	8006888 <finitef>
 8006234:	2800      	cmp	r0, #0
 8006236:	d0e8      	beq.n	800620a <powf+0x46>
 8006238:	eef4 8ae9 	vcmpe.f32	s17, s19
 800623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006240:	d5e3      	bpl.n	800620a <powf+0x46>
 8006242:	f7ff fb39 	bl	80058b8 <__errno>
 8006246:	2321      	movs	r3, #33	; 0x21
 8006248:	6003      	str	r3, [r0, #0]
 800624a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80062ec <powf+0x128>
 800624e:	e7dc      	b.n	800620a <powf+0x46>
 8006250:	f000 fb1a 	bl	8006888 <finitef>
 8006254:	bb50      	cbnz	r0, 80062ac <powf+0xe8>
 8006256:	eeb0 0a49 	vmov.f32	s0, s18
 800625a:	f000 fb15 	bl	8006888 <finitef>
 800625e:	b328      	cbz	r0, 80062ac <powf+0xe8>
 8006260:	eeb0 0a68 	vmov.f32	s0, s17
 8006264:	f000 fb10 	bl	8006888 <finitef>
 8006268:	b300      	cbz	r0, 80062ac <powf+0xe8>
 800626a:	eeb4 8a48 	vcmp.f32	s16, s16
 800626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006272:	d706      	bvc.n	8006282 <powf+0xbe>
 8006274:	f7ff fb20 	bl	80058b8 <__errno>
 8006278:	2321      	movs	r3, #33	; 0x21
 800627a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800627e:	6003      	str	r3, [r0, #0]
 8006280:	e7c3      	b.n	800620a <powf+0x46>
 8006282:	f7ff fb19 	bl	80058b8 <__errno>
 8006286:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800628a:	2322      	movs	r3, #34	; 0x22
 800628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006290:	6003      	str	r3, [r0, #0]
 8006292:	d508      	bpl.n	80062a6 <powf+0xe2>
 8006294:	eeb0 0a68 	vmov.f32	s0, s17
 8006298:	f000 fb0a 	bl	80068b0 <rintf>
 800629c:	eeb4 0a68 	vcmp.f32	s0, s17
 80062a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a4:	d1d1      	bne.n	800624a <powf+0x86>
 80062a6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80062f0 <powf+0x12c>
 80062aa:	e7ae      	b.n	800620a <powf+0x46>
 80062ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80062b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b4:	d1a9      	bne.n	800620a <powf+0x46>
 80062b6:	eeb0 0a49 	vmov.f32	s0, s18
 80062ba:	f000 fae5 	bl	8006888 <finitef>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d0a3      	beq.n	800620a <powf+0x46>
 80062c2:	eeb0 0a68 	vmov.f32	s0, s17
 80062c6:	f000 fadf 	bl	8006888 <finitef>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d09d      	beq.n	800620a <powf+0x46>
 80062ce:	f7ff faf3 	bl	80058b8 <__errno>
 80062d2:	2322      	movs	r3, #34	; 0x22
 80062d4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80062e8 <powf+0x124>
 80062d8:	6003      	str	r3, [r0, #0]
 80062da:	e796      	b.n	800620a <powf+0x46>
 80062dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80062e0:	e793      	b.n	800620a <powf+0x46>
 80062e2:	bf00      	nop
 80062e4:	20000470 	.word	0x20000470
 80062e8:	00000000 	.word	0x00000000
 80062ec:	ff800000 	.word	0xff800000
 80062f0:	7f800000 	.word	0x7f800000

080062f4 <__ieee754_powf>:
 80062f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f8:	ee10 5a90 	vmov	r5, s1
 80062fc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006300:	ed2d 8b02 	vpush	{d8}
 8006304:	eeb0 8a40 	vmov.f32	s16, s0
 8006308:	eef0 8a60 	vmov.f32	s17, s1
 800630c:	f000 8291 	beq.w	8006832 <__ieee754_powf+0x53e>
 8006310:	ee10 8a10 	vmov	r8, s0
 8006314:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8006318:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800631c:	dc06      	bgt.n	800632c <__ieee754_powf+0x38>
 800631e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006322:	dd0a      	ble.n	800633a <__ieee754_powf+0x46>
 8006324:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006328:	f000 8283 	beq.w	8006832 <__ieee754_powf+0x53e>
 800632c:	ecbd 8b02 	vpop	{d8}
 8006330:	48d8      	ldr	r0, [pc, #864]	; (8006694 <__ieee754_powf+0x3a0>)
 8006332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006336:	f000 bab5 	b.w	80068a4 <nanf>
 800633a:	f1b8 0f00 	cmp.w	r8, #0
 800633e:	da1f      	bge.n	8006380 <__ieee754_powf+0x8c>
 8006340:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006344:	da2e      	bge.n	80063a4 <__ieee754_powf+0xb0>
 8006346:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800634a:	f2c0 827b 	blt.w	8006844 <__ieee754_powf+0x550>
 800634e:	15fb      	asrs	r3, r7, #23
 8006350:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006354:	fa47 f603 	asr.w	r6, r7, r3
 8006358:	fa06 f303 	lsl.w	r3, r6, r3
 800635c:	42bb      	cmp	r3, r7
 800635e:	f040 8271 	bne.w	8006844 <__ieee754_powf+0x550>
 8006362:	f006 0601 	and.w	r6, r6, #1
 8006366:	f1c6 0602 	rsb	r6, r6, #2
 800636a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800636e:	d120      	bne.n	80063b2 <__ieee754_powf+0xbe>
 8006370:	2d00      	cmp	r5, #0
 8006372:	f280 8264 	bge.w	800683e <__ieee754_powf+0x54a>
 8006376:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800637a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800637e:	e00d      	b.n	800639c <__ieee754_powf+0xa8>
 8006380:	2600      	movs	r6, #0
 8006382:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006386:	d1f0      	bne.n	800636a <__ieee754_powf+0x76>
 8006388:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800638c:	f000 8251 	beq.w	8006832 <__ieee754_powf+0x53e>
 8006390:	dd0a      	ble.n	80063a8 <__ieee754_powf+0xb4>
 8006392:	2d00      	cmp	r5, #0
 8006394:	f280 8250 	bge.w	8006838 <__ieee754_powf+0x544>
 8006398:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8006698 <__ieee754_powf+0x3a4>
 800639c:	ecbd 8b02 	vpop	{d8}
 80063a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a4:	2602      	movs	r6, #2
 80063a6:	e7ec      	b.n	8006382 <__ieee754_powf+0x8e>
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	daf5      	bge.n	8006398 <__ieee754_powf+0xa4>
 80063ac:	eeb1 0a68 	vneg.f32	s0, s17
 80063b0:	e7f4      	b.n	800639c <__ieee754_powf+0xa8>
 80063b2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80063b6:	d102      	bne.n	80063be <__ieee754_powf+0xca>
 80063b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80063bc:	e7ee      	b.n	800639c <__ieee754_powf+0xa8>
 80063be:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80063c2:	eeb0 0a48 	vmov.f32	s0, s16
 80063c6:	d108      	bne.n	80063da <__ieee754_powf+0xe6>
 80063c8:	f1b8 0f00 	cmp.w	r8, #0
 80063cc:	db05      	blt.n	80063da <__ieee754_powf+0xe6>
 80063ce:	ecbd 8b02 	vpop	{d8}
 80063d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d6:	f000 ba4d 	b.w	8006874 <__ieee754_sqrtf>
 80063da:	f000 fa4e 	bl	800687a <fabsf>
 80063de:	b124      	cbz	r4, 80063ea <__ieee754_powf+0xf6>
 80063e0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80063e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80063e8:	d117      	bne.n	800641a <__ieee754_powf+0x126>
 80063ea:	2d00      	cmp	r5, #0
 80063ec:	bfbc      	itt	lt
 80063ee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80063f2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80063f6:	f1b8 0f00 	cmp.w	r8, #0
 80063fa:	dacf      	bge.n	800639c <__ieee754_powf+0xa8>
 80063fc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006400:	ea54 0306 	orrs.w	r3, r4, r6
 8006404:	d104      	bne.n	8006410 <__ieee754_powf+0x11c>
 8006406:	ee70 7a40 	vsub.f32	s15, s0, s0
 800640a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800640e:	e7c5      	b.n	800639c <__ieee754_powf+0xa8>
 8006410:	2e01      	cmp	r6, #1
 8006412:	d1c3      	bne.n	800639c <__ieee754_powf+0xa8>
 8006414:	eeb1 0a40 	vneg.f32	s0, s0
 8006418:	e7c0      	b.n	800639c <__ieee754_powf+0xa8>
 800641a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800641e:	3801      	subs	r0, #1
 8006420:	ea56 0300 	orrs.w	r3, r6, r0
 8006424:	d104      	bne.n	8006430 <__ieee754_powf+0x13c>
 8006426:	ee38 8a48 	vsub.f32	s16, s16, s16
 800642a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800642e:	e7b5      	b.n	800639c <__ieee754_powf+0xa8>
 8006430:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006434:	dd6b      	ble.n	800650e <__ieee754_powf+0x21a>
 8006436:	4b99      	ldr	r3, [pc, #612]	; (800669c <__ieee754_powf+0x3a8>)
 8006438:	429c      	cmp	r4, r3
 800643a:	dc06      	bgt.n	800644a <__ieee754_powf+0x156>
 800643c:	2d00      	cmp	r5, #0
 800643e:	daab      	bge.n	8006398 <__ieee754_powf+0xa4>
 8006440:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80066a0 <__ieee754_powf+0x3ac>
 8006444:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006448:	e7a8      	b.n	800639c <__ieee754_powf+0xa8>
 800644a:	4b96      	ldr	r3, [pc, #600]	; (80066a4 <__ieee754_powf+0x3b0>)
 800644c:	429c      	cmp	r4, r3
 800644e:	dd02      	ble.n	8006456 <__ieee754_powf+0x162>
 8006450:	2d00      	cmp	r5, #0
 8006452:	dcf5      	bgt.n	8006440 <__ieee754_powf+0x14c>
 8006454:	e7a0      	b.n	8006398 <__ieee754_powf+0xa4>
 8006456:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800645a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800645e:	eddf 6a92 	vldr	s13, [pc, #584]	; 80066a8 <__ieee754_powf+0x3b4>
 8006462:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006466:	eee0 6a67 	vfms.f32	s13, s0, s15
 800646a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800646e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006472:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80066ac <__ieee754_powf+0x3b8>
 800647e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006482:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80066b0 <__ieee754_powf+0x3bc>
 8006486:	eee0 7a07 	vfma.f32	s15, s0, s14
 800648a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80066b4 <__ieee754_powf+0x3c0>
 800648e:	eef0 6a67 	vmov.f32	s13, s15
 8006492:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006496:	ee16 3a90 	vmov	r3, s13
 800649a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800649e:	f023 030f 	bic.w	r3, r3, #15
 80064a2:	ee00 3a90 	vmov	s1, r3
 80064a6:	eee0 0a47 	vfms.f32	s1, s0, s14
 80064aa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80064ae:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80064b2:	f025 050f 	bic.w	r5, r5, #15
 80064b6:	ee07 5a10 	vmov	s14, r5
 80064ba:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80064be:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80064ca:	3e01      	subs	r6, #1
 80064cc:	ea56 0200 	orrs.w	r2, r6, r0
 80064d0:	ee07 5a10 	vmov	s14, r5
 80064d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064d8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80064dc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80064e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80064e4:	ee17 4a10 	vmov	r4, s14
 80064e8:	bf08      	it	eq
 80064ea:	eeb0 8a40 	vmoveq.f32	s16, s0
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80064f4:	f340 8184 	ble.w	8006800 <__ieee754_powf+0x50c>
 80064f8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80064fc:	f340 80fc 	ble.w	80066f8 <__ieee754_powf+0x404>
 8006500:	eddf 7a67 	vldr	s15, [pc, #412]	; 80066a0 <__ieee754_powf+0x3ac>
 8006504:	ee28 0a27 	vmul.f32	s0, s16, s15
 8006508:	ee20 0a27 	vmul.f32	s0, s0, s15
 800650c:	e746      	b.n	800639c <__ieee754_powf+0xa8>
 800650e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8006512:	bf01      	itttt	eq
 8006514:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80066b8 <__ieee754_powf+0x3c4>
 8006518:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800651c:	f06f 0217 	mvneq.w	r2, #23
 8006520:	ee17 4a90 	vmoveq	r4, s15
 8006524:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006528:	bf18      	it	ne
 800652a:	2200      	movne	r2, #0
 800652c:	3b7f      	subs	r3, #127	; 0x7f
 800652e:	4413      	add	r3, r2
 8006530:	4a62      	ldr	r2, [pc, #392]	; (80066bc <__ieee754_powf+0x3c8>)
 8006532:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006536:	4294      	cmp	r4, r2
 8006538:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800653c:	dd06      	ble.n	800654c <__ieee754_powf+0x258>
 800653e:	4a60      	ldr	r2, [pc, #384]	; (80066c0 <__ieee754_powf+0x3cc>)
 8006540:	4294      	cmp	r4, r2
 8006542:	f340 80a4 	ble.w	800668e <__ieee754_powf+0x39a>
 8006546:	3301      	adds	r3, #1
 8006548:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800654c:	2400      	movs	r4, #0
 800654e:	4a5d      	ldr	r2, [pc, #372]	; (80066c4 <__ieee754_powf+0x3d0>)
 8006550:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006554:	ee07 1a90 	vmov	s15, r1
 8006558:	ed92 7a00 	vldr	s14, [r2]
 800655c:	4a5a      	ldr	r2, [pc, #360]	; (80066c8 <__ieee754_powf+0x3d4>)
 800655e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006562:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006566:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800656a:	1049      	asrs	r1, r1, #1
 800656c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006570:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006574:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006578:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800657c:	ee06 1a10 	vmov	s12, r1
 8006580:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006584:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006588:	ee14 7a90 	vmov	r7, s9
 800658c:	4017      	ands	r7, r2
 800658e:	ee05 7a90 	vmov	s11, r7
 8006592:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8006596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800659a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80066cc <__ieee754_powf+0x3d8>
 800659e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80065a2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80065a6:	ee25 6a26 	vmul.f32	s12, s10, s13
 80065aa:	eddf 6a49 	vldr	s13, [pc, #292]	; 80066d0 <__ieee754_powf+0x3dc>
 80065ae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80065b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80066d4 <__ieee754_powf+0x3e0>
 80065b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065ba:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80066a8 <__ieee754_powf+0x3b4>
 80065be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80065c2:	eddf 6a45 	vldr	s13, [pc, #276]	; 80066d8 <__ieee754_powf+0x3e4>
 80065c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065ca:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80066dc <__ieee754_powf+0x3e8>
 80065ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80065d2:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80065d6:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80065da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80065de:	eee5 6a07 	vfma.f32	s13, s10, s14
 80065e2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80065e6:	eef0 7a45 	vmov.f32	s15, s10
 80065ea:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80065ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f2:	ee17 1a90 	vmov	r1, s15
 80065f6:	4011      	ands	r1, r2
 80065f8:	ee07 1a90 	vmov	s15, r1
 80065fc:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8006600:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8006604:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006608:	ee27 7a24 	vmul.f32	s14, s14, s9
 800660c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006610:	eeb0 6a47 	vmov.f32	s12, s14
 8006614:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8006618:	ee16 1a10 	vmov	r1, s12
 800661c:	4011      	ands	r1, r2
 800661e:	ee06 1a90 	vmov	s13, r1
 8006622:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8006626:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80066e0 <__ieee754_powf+0x3ec>
 800662a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80066e4 <__ieee754_powf+0x3f0>
 800662e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006632:	ee06 1a10 	vmov	s12, r1
 8006636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800663a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80066e8 <__ieee754_powf+0x3f4>
 800663e:	492b      	ldr	r1, [pc, #172]	; (80066ec <__ieee754_powf+0x3f8>)
 8006640:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006644:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006648:	edd1 7a00 	vldr	s15, [r1]
 800664c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006650:	ee07 3a90 	vmov	s15, r3
 8006654:	4b26      	ldr	r3, [pc, #152]	; (80066f0 <__ieee754_powf+0x3fc>)
 8006656:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800665a:	eef0 7a47 	vmov.f32	s15, s14
 800665e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006662:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006666:	edd4 0a00 	vldr	s1, [r4]
 800666a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800666e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006672:	ee17 3a90 	vmov	r3, s15
 8006676:	4013      	ands	r3, r2
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006680:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006684:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006688:	ee77 7a66 	vsub.f32	s15, s14, s13
 800668c:	e70f      	b.n	80064ae <__ieee754_powf+0x1ba>
 800668e:	2401      	movs	r4, #1
 8006690:	e75d      	b.n	800654e <__ieee754_powf+0x25a>
 8006692:	bf00      	nop
 8006694:	08006ad5 	.word	0x08006ad5
 8006698:	00000000 	.word	0x00000000
 800669c:	3f7ffff7 	.word	0x3f7ffff7
 80066a0:	7149f2ca 	.word	0x7149f2ca
 80066a4:	3f800007 	.word	0x3f800007
 80066a8:	3eaaaaab 	.word	0x3eaaaaab
 80066ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80066b0:	36eca570 	.word	0x36eca570
 80066b4:	3fb8aa00 	.word	0x3fb8aa00
 80066b8:	4b800000 	.word	0x4b800000
 80066bc:	001cc471 	.word	0x001cc471
 80066c0:	005db3d6 	.word	0x005db3d6
 80066c4:	08006b04 	.word	0x08006b04
 80066c8:	fffff000 	.word	0xfffff000
 80066cc:	3e6c3255 	.word	0x3e6c3255
 80066d0:	3e53f142 	.word	0x3e53f142
 80066d4:	3e8ba305 	.word	0x3e8ba305
 80066d8:	3edb6db7 	.word	0x3edb6db7
 80066dc:	3f19999a 	.word	0x3f19999a
 80066e0:	3f76384f 	.word	0x3f76384f
 80066e4:	3f763800 	.word	0x3f763800
 80066e8:	369dc3a0 	.word	0x369dc3a0
 80066ec:	08006b14 	.word	0x08006b14
 80066f0:	08006b0c 	.word	0x08006b0c
 80066f4:	3338aa3c 	.word	0x3338aa3c
 80066f8:	f040 8092 	bne.w	8006820 <__ieee754_powf+0x52c>
 80066fc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80066f4 <__ieee754_powf+0x400>
 8006700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006704:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006708:	eef4 6ac7 	vcmpe.f32	s13, s14
 800670c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006710:	f73f aef6 	bgt.w	8006500 <__ieee754_powf+0x20c>
 8006714:	15db      	asrs	r3, r3, #23
 8006716:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800671a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800671e:	4103      	asrs	r3, r0
 8006720:	4423      	add	r3, r4
 8006722:	4949      	ldr	r1, [pc, #292]	; (8006848 <__ieee754_powf+0x554>)
 8006724:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006728:	3a7f      	subs	r2, #127	; 0x7f
 800672a:	4111      	asrs	r1, r2
 800672c:	ea23 0101 	bic.w	r1, r3, r1
 8006730:	ee07 1a10 	vmov	s14, r1
 8006734:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006738:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800673c:	f1c2 0217 	rsb	r2, r2, #23
 8006740:	4110      	asrs	r0, r2
 8006742:	2c00      	cmp	r4, #0
 8006744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006748:	bfb8      	it	lt
 800674a:	4240      	neglt	r0, r0
 800674c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006750:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800684c <__ieee754_powf+0x558>
 8006754:	ee17 3a10 	vmov	r3, s14
 8006758:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800675c:	f023 030f 	bic.w	r3, r3, #15
 8006760:	ee07 3a10 	vmov	s14, r3
 8006764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006768:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800676c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006850 <__ieee754_powf+0x55c>
 8006770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006774:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006778:	eddf 6a36 	vldr	s13, [pc, #216]	; 8006854 <__ieee754_powf+0x560>
 800677c:	eeb0 0a67 	vmov.f32	s0, s15
 8006780:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006784:	eeb0 6a40 	vmov.f32	s12, s0
 8006788:	eea7 6a66 	vfms.f32	s12, s14, s13
 800678c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006790:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006794:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006858 <__ieee754_powf+0x564>
 8006798:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800685c <__ieee754_powf+0x568>
 800679c:	eea7 6a26 	vfma.f32	s12, s14, s13
 80067a0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006860 <__ieee754_powf+0x56c>
 80067a4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80067a8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006864 <__ieee754_powf+0x570>
 80067ac:	eea6 6a87 	vfma.f32	s12, s13, s14
 80067b0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006868 <__ieee754_powf+0x574>
 80067b4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80067b8:	eeb0 6a40 	vmov.f32	s12, s0
 80067bc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80067c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80067c4:	eeb0 7a46 	vmov.f32	s14, s12
 80067c8:	ee77 6a66 	vsub.f32	s13, s14, s13
 80067cc:	ee20 6a06 	vmul.f32	s12, s0, s12
 80067d0:	eee0 7a27 	vfma.f32	s15, s0, s15
 80067d4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80067d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80067e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80067e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80067e8:	ee10 3a10 	vmov	r3, s0
 80067ec:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80067f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067f4:	da1a      	bge.n	800682c <__ieee754_powf+0x538>
 80067f6:	f000 f8b7 	bl	8006968 <scalbnf>
 80067fa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80067fe:	e5cd      	b.n	800639c <__ieee754_powf+0xa8>
 8006800:	4a1a      	ldr	r2, [pc, #104]	; (800686c <__ieee754_powf+0x578>)
 8006802:	4293      	cmp	r3, r2
 8006804:	dd02      	ble.n	800680c <__ieee754_powf+0x518>
 8006806:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8006870 <__ieee754_powf+0x57c>
 800680a:	e67b      	b.n	8006504 <__ieee754_powf+0x210>
 800680c:	d108      	bne.n	8006820 <__ieee754_powf+0x52c>
 800680e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006812:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681a:	f6ff af7b 	blt.w	8006714 <__ieee754_powf+0x420>
 800681e:	e7f2      	b.n	8006806 <__ieee754_powf+0x512>
 8006820:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006824:	f73f af76 	bgt.w	8006714 <__ieee754_powf+0x420>
 8006828:	2000      	movs	r0, #0
 800682a:	e78f      	b.n	800674c <__ieee754_powf+0x458>
 800682c:	ee00 3a10 	vmov	s0, r3
 8006830:	e7e3      	b.n	80067fa <__ieee754_powf+0x506>
 8006832:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006836:	e5b1      	b.n	800639c <__ieee754_powf+0xa8>
 8006838:	eeb0 0a68 	vmov.f32	s0, s17
 800683c:	e5ae      	b.n	800639c <__ieee754_powf+0xa8>
 800683e:	eeb0 0a48 	vmov.f32	s0, s16
 8006842:	e5ab      	b.n	800639c <__ieee754_powf+0xa8>
 8006844:	2600      	movs	r6, #0
 8006846:	e590      	b.n	800636a <__ieee754_powf+0x76>
 8006848:	007fffff 	.word	0x007fffff
 800684c:	3f317218 	.word	0x3f317218
 8006850:	35bfbe8c 	.word	0x35bfbe8c
 8006854:	3f317200 	.word	0x3f317200
 8006858:	3331bb4c 	.word	0x3331bb4c
 800685c:	b5ddea0e 	.word	0xb5ddea0e
 8006860:	388ab355 	.word	0x388ab355
 8006864:	bb360b61 	.word	0xbb360b61
 8006868:	3e2aaaab 	.word	0x3e2aaaab
 800686c:	43160000 	.word	0x43160000
 8006870:	0da24260 	.word	0x0da24260

08006874 <__ieee754_sqrtf>:
 8006874:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006878:	4770      	bx	lr

0800687a <fabsf>:
 800687a:	ee10 3a10 	vmov	r3, s0
 800687e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006882:	ee00 3a10 	vmov	s0, r3
 8006886:	4770      	bx	lr

08006888 <finitef>:
 8006888:	b082      	sub	sp, #8
 800688a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800688e:	9801      	ldr	r0, [sp, #4]
 8006890:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006894:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006898:	bfac      	ite	ge
 800689a:	2000      	movge	r0, #0
 800689c:	2001      	movlt	r0, #1
 800689e:	b002      	add	sp, #8
 80068a0:	4770      	bx	lr
	...

080068a4 <nanf>:
 80068a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068ac <nanf+0x8>
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	7fc00000 	.word	0x7fc00000

080068b0 <rintf>:
 80068b0:	ee10 2a10 	vmov	r2, s0
 80068b4:	b513      	push	{r0, r1, r4, lr}
 80068b6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80068ba:	397f      	subs	r1, #127	; 0x7f
 80068bc:	2916      	cmp	r1, #22
 80068be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80068c2:	dc47      	bgt.n	8006954 <rintf+0xa4>
 80068c4:	b32b      	cbz	r3, 8006912 <rintf+0x62>
 80068c6:	2900      	cmp	r1, #0
 80068c8:	ee10 3a10 	vmov	r3, s0
 80068cc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80068d0:	da21      	bge.n	8006916 <rintf+0x66>
 80068d2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80068d6:	425b      	negs	r3, r3
 80068d8:	4921      	ldr	r1, [pc, #132]	; (8006960 <rintf+0xb0>)
 80068da:	0a5b      	lsrs	r3, r3, #9
 80068dc:	0d12      	lsrs	r2, r2, #20
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	0512      	lsls	r2, r2, #20
 80068e4:	4313      	orrs	r3, r2
 80068e6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	edd1 6a00 	vldr	s13, [r1]
 80068f2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80068f6:	ed8d 7a01 	vstr	s14, [sp, #4]
 80068fa:	eddd 7a01 	vldr	s15, [sp, #4]
 80068fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006902:	ee17 3a90 	vmov	r3, s15
 8006906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800690a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800690e:	ee00 3a10 	vmov	s0, r3
 8006912:	b002      	add	sp, #8
 8006914:	bd10      	pop	{r4, pc}
 8006916:	4a13      	ldr	r2, [pc, #76]	; (8006964 <rintf+0xb4>)
 8006918:	410a      	asrs	r2, r1
 800691a:	4213      	tst	r3, r2
 800691c:	d0f9      	beq.n	8006912 <rintf+0x62>
 800691e:	0854      	lsrs	r4, r2, #1
 8006920:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8006924:	d006      	beq.n	8006934 <rintf+0x84>
 8006926:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800692a:	ea23 0304 	bic.w	r3, r3, r4
 800692e:	fa42 f101 	asr.w	r1, r2, r1
 8006932:	430b      	orrs	r3, r1
 8006934:	4a0a      	ldr	r2, [pc, #40]	; (8006960 <rintf+0xb0>)
 8006936:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800693a:	ed90 7a00 	vldr	s14, [r0]
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006946:	edcd 7a01 	vstr	s15, [sp, #4]
 800694a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800694e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006952:	e7de      	b.n	8006912 <rintf+0x62>
 8006954:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006958:	d3db      	bcc.n	8006912 <rintf+0x62>
 800695a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800695e:	e7d8      	b.n	8006912 <rintf+0x62>
 8006960:	08006b1c 	.word	0x08006b1c
 8006964:	007fffff 	.word	0x007fffff

08006968 <scalbnf>:
 8006968:	ee10 3a10 	vmov	r3, s0
 800696c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006970:	d025      	beq.n	80069be <scalbnf+0x56>
 8006972:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006976:	d302      	bcc.n	800697e <scalbnf+0x16>
 8006978:	ee30 0a00 	vadd.f32	s0, s0, s0
 800697c:	4770      	bx	lr
 800697e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006982:	d122      	bne.n	80069ca <scalbnf+0x62>
 8006984:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <scalbnf+0xc8>)
 8006986:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006a34 <scalbnf+0xcc>
 800698a:	4298      	cmp	r0, r3
 800698c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006990:	db16      	blt.n	80069c0 <scalbnf+0x58>
 8006992:	ee10 3a10 	vmov	r3, s0
 8006996:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800699a:	3a19      	subs	r2, #25
 800699c:	4402      	add	r2, r0
 800699e:	2afe      	cmp	r2, #254	; 0xfe
 80069a0:	dd15      	ble.n	80069ce <scalbnf+0x66>
 80069a2:	ee10 3a10 	vmov	r3, s0
 80069a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8006a38 <scalbnf+0xd0>
 80069aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006a3c <scalbnf+0xd4>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	eeb0 7a67 	vmov.f32	s14, s15
 80069b4:	bfb8      	it	lt
 80069b6:	eef0 7a66 	vmovlt.f32	s15, s13
 80069ba:	ee27 0a27 	vmul.f32	s0, s14, s15
 80069be:	4770      	bx	lr
 80069c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006a40 <scalbnf+0xd8>
 80069c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80069c8:	4770      	bx	lr
 80069ca:	0dd2      	lsrs	r2, r2, #23
 80069cc:	e7e6      	b.n	800699c <scalbnf+0x34>
 80069ce:	2a00      	cmp	r2, #0
 80069d0:	dd06      	ble.n	80069e0 <scalbnf+0x78>
 80069d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80069da:	ee00 3a10 	vmov	s0, r3
 80069de:	4770      	bx	lr
 80069e0:	f112 0f16 	cmn.w	r2, #22
 80069e4:	da1a      	bge.n	8006a1c <scalbnf+0xb4>
 80069e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80069ea:	4298      	cmp	r0, r3
 80069ec:	ee10 3a10 	vmov	r3, s0
 80069f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	dd0a      	ble.n	8006a0c <scalbnf+0xa4>
 80069f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006a38 <scalbnf+0xd0>
 80069fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006a3c <scalbnf+0xd4>
 80069fe:	eef0 7a40 	vmov.f32	s15, s0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bf18      	it	ne
 8006a06:	eeb0 0a47 	vmovne.f32	s0, s14
 8006a0a:	e7db      	b.n	80069c4 <scalbnf+0x5c>
 8006a0c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006a40 <scalbnf+0xd8>
 8006a10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006a44 <scalbnf+0xdc>
 8006a14:	eef0 7a40 	vmov.f32	s15, s0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	e7f3      	b.n	8006a04 <scalbnf+0x9c>
 8006a1c:	3219      	adds	r2, #25
 8006a1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a22:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006a26:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006a48 <scalbnf+0xe0>
 8006a2a:	ee07 3a10 	vmov	s14, r3
 8006a2e:	e7c4      	b.n	80069ba <scalbnf+0x52>
 8006a30:	ffff3cb0 	.word	0xffff3cb0
 8006a34:	4c000000 	.word	0x4c000000
 8006a38:	7149f2ca 	.word	0x7149f2ca
 8006a3c:	f149f2ca 	.word	0xf149f2ca
 8006a40:	0da24260 	.word	0x0da24260
 8006a44:	8da24260 	.word	0x8da24260
 8006a48:	33000000 	.word	0x33000000

08006a4c <_init>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	bf00      	nop
 8006a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a52:	bc08      	pop	{r3}
 8006a54:	469e      	mov	lr, r3
 8006a56:	4770      	bx	lr

08006a58 <_fini>:
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5a:	bf00      	nop
 8006a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5e:	bc08      	pop	{r3}
 8006a60:	469e      	mov	lr, r3
 8006a62:	4770      	bx	lr
